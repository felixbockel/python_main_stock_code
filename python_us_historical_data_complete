#! /usr/bin/python
#select row and press ctrl/ to comment and uncomment

#import python libraries
import numpy
import pandas
# Import the plotting library 
import matplotlib.pyplot as plt 
from matplotlib.backends.backend_pdf import PdfPages

# Import the yfinance. If you get module not found error the run !pip install yfiannce from your Jupyter notebook 
import yfinance as yf   
# Import the library 
from alpha_vantage.timeseries import TimeSeries
# subprocess to run r on python
import subprocess
#python runs periodically

#download data for today's date automatically
from datetime import datetime, timedelta
from datetime import date

# send dataframe to an email address
# from mailer import Mailer
import email
import smtplib
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase

# change directory
import os.path
import glob
# garbage collection - clear memory
import gc
# read csv data
import csv
# avoid running into code error when data is not available
from pandas_datareader._utils import RemoteDataError
from pandas_datareader.data import Options
# avoid printing outout
from IPython.utils import io
# run code on GPU
#from numba import jit

#----------
# run timer
import time
start_time = time.time()
# send notification to email
#import apprise

#### Input data- never ever overwrite those numbers in here. may lead to fatal code errors ####

#date time not needed anymore -> it is automated
    #start_year=2015 # 2015 starting point from what date i want to look back at stock history//shouldn't be smaller than 200days from today's date. error may occur if violated
    #start_month=7 # 7
    #start_day=6 # 6

# all stocks
#7000 stocks on us market -execution time 10570sec ->176min
# us_stock1
us_stocks=['OEDV', 'AAPL', 'BAC', 'AMZN', 'T', 'GOOG', 'MO', 'DAL', 'AA', 'AXP', 'DD', 'BABA', 'ABT', 'UA', 'AMAT', 'AMGN', 'AAL', 'AIG', 'ALL', 'ADBE', 'GOOGL', 'ACN', 'ABBV', 'MT', 'LLY', 'AGN', 'APA', 'ADP', 'APC', 'AKAM', 'NLY', 'ABX', 'ATVI', 'ADSK', 'ADM', 'WBA', 'ARNA', 'LUV', 'ACAD', 'PANW', 'AMD', 'AET', 'AEP', 'ALXN', 'CLMS', 'AVGO', 'EA', 'DB', 'RAI', 'AEM', 'APD', 'AMBA', 'NVS', 'APOL', 'ANF', 'LULU', 'RAD', 'ARRY', 'AGNC', 'JBLU', 'A', 'ORLY', 'FOLD', 'AZO', 'ATML', 'AN', 'AZN', 'AES', 'GAS', 'BUD', 'ARR', 'BDX', 'AKS', 'AB', 'ACOR', 'CS', 'AFL', 'ADI', 'AEGR', 'ACIW', 'AMP', 'AVP', 'AMTD', 'AEO', 'AWK', 'NVO', 'ALTR', 'ALK', 'PAA', 'ARCC', 'AAP', 'NAT', 'FNMA', 'FAV', 'AIV', 'AGIO', 'AEE', 'UBS', 'AVXL', 'ARLP', 'ANTM', 'AGU', 'AG', 'AFSI', 'ABC', 'STO', 'ATI', 'ADT', 'AVB', 'ATW', 'ALNY', 'LH', 'AVY', 'AUY', 'ASH', 'ARMH', 'ARIA', 'ANR', 'AINV', 'ACXM', 'ACHN', 'ACET', 'ABMD', 'ABM', 'VA', 'LIFE', 'ATO', 'ARP', 'AON', 'ADXS', 'ADC', 'APU', 'SAVE', 'AV', 'AKRX', 'ADS', 'ABAX', 'AYI', 'AWH', 'ASML', 'AMT', 'ALDR', 'ACM', 'DWA', 'ATRS', 'ARW', 'ARI', 'ARG', 'AR', 'AMCC', 'AMC', 'AL', 'AGEN', 'AAN', 'WTR', 'FCAU', 'BAH', 'AXAS', 'AVT', 'ALB', 'AIZ', 'SAIC', 'CAR', 'AXLL', 'AU', 'ARO', 'APH', 'ANTH', 'AMX', 'AMDA', 'AI', 'ABCO', 'WMC', 'JKHY', 'AVAV', 'AMKR', 'ALJ', 'ACH', 'ERC', 'APPY', 'ANAC', 'AEIS', 'Y', 'MTGE', 'CENX', 'ASPS', 'AMRN', 'AMPE', 'AMAG', 'ALKS', 'AFFX', 'ADES', 'ACAT', 'AAON', 'XLRN', 'VRSK', 'VJET', 'OA', 'ATLS', 'APTS', 'APO', 'ALSK', 'ALG', 'AHC', 'ACTG', 'ACAS', 'RBA', 'MAA', 'BAM', 'ATHN', 'AT', 'ASX', 'ARCO', 'ANET', 'ANCX', 'AIR', 'AF', 'WAB', 'RS', 'PKG', 'CSH', 'AXDX', 'AVHI', 'AVA', 'ATHX', 'ARWR', 'ANGI', 'AMG', 'ALSN', 'ALGN', 'AKBA', 'AGO', 'AEZS', 'ACRX', 'ROK', 'GLPI', 'DNI', 'AZZ', 'ATRC', 'ARRS', 'ARMK', 'AOS', 'ANFI', 'AMID', 'AMCX', 'ALIM', 'ALE', 'AHT', 'ACW', 'ABB', 'SPR', 'SEE', 'RDEN', 'PAAS', 'DLPH', 'ADAC', 'CBL', 'BBVA', 'AYR', 'APOG', 'ANDE', 'AMSC', 'AMRS', 'AMED', 'ALEX', 'ALCO', 'ADUS', 'ACTA', 'ACST', 'AAWW', 'WMS', 'PAG', 'MDRX', 'KLIC', 'ETH', 'AZPN', 'AXE', 'ATNY', 'APRI', 'AMH', 'AME', 'AJG', 'AIQ', 'AHGP', 'AGCO', 'AERI', 'ACRE', 'ABEO', 'WAL', 'SYT', 'SHLM', 'NOG', 'HTA', 'GIII', 'DAVE', 'CVU', 'BSI', 'AWAY', 'ATU', 'ASTI', 'AREX', 'ARE', 'ANSS', 'AMNB', 'AMBS', 'ALR', 'AIXG', 'AIN', 'AHL', 'AGX', 'AEG', 'ADTN', 'ADMS', 'ACLS', 'ABG', 'ZX', 'NXJ', 'KS', 'HOLI', 'GPI', 'ENI', 'BEAV', 'AXTA', 'AWR', 'AWI', 'AVEO', 'AUO', 'ATHM', 'ATAX', 'ASM', 'AROC', 'ANH', 'ALX', 'AHS', 'AGI', 'AER', 'AE', 'RHHBY', 'PETX', 'ODC', 'NAO', 'KAR', 'HUSA', 'HIVE', 'FMS', 'DOX', 'CXW', 'AZUR', 'AXS', 'AXL', 'AWX', 'AVID', 'ASNA', 'ASGN', 'ARDX', 'ARAY', 'AQXP', 'APT', 'APDN', 'AMBC', 'ALGT', 'ALDW', 'AIT', 'AIRM', 'AIMC', 'AEL', 'AEHR', 'ADHD', 'ACUR', 'ACHC', 'ACFC', 'ACCO', 'ABY', 'TA', 'RPAI', 'MANH', 'LAMR', 'KYN', 'AXN', 'ATRO', 'ATNI', 'ARCW', 'APEI', 'AP', 'ANIK', 'ANGO', 'AMTG', 'AMSG', 'AMOT', 'AM', 'ALV', 'ALOG', 'AKR', 'AEGN', 'ZLTQ', 'WRLD', 'UHAL', 'UAMY', 'SAH', 'RJET', 'NAII', 'AQNM', 'CAS', 'CACC', 'ATSG', 'ASEI', 'ASB', 'ARTX', 'AROW', 'ARCB', 'AMRK', 'ALRM', 'AHP', 'AGRX', 'AFAM', 'ADK', 'ACSF', 'ABTL', 'ABGB', 'ABEV', 'ABCD', 'AAOI', 'USAP', 'STFC', 'STAY', 'SEED', 'RGA', 'IDSA', 'HART', 'CH', 'CEA', 'BREW', 'AXR', 'AVG', 'AVD', 'AUDC', 'ATRI', 'ATOS', 'ARC', 'APIC', 'AOSL', 'AOI', 'AMWD', 'ALXA', 'ALLY', 'AIRI', 'AFOP', 'ACGL', 'ACFN', 'ABR', 'ABCB', 'SAMG', 'REXI', 'RAIL', 'NSAM', 'MITT', 'LCM', 'HASI', 'GOL', 'GIL', 'EAD', 'ATTO', 'ATR', 'ATNM', 'ASTC', 'ASR', 'ASC', 'ARTNA', 'ARGS', 'AOD', 'AGNCP', 'ADRO', 'ACNB', 'AAV', 'AAT', 'ZNH', 'UAM', 'NTT', 'NFJ', 'LNT', 'KALU', 'HOMB', 'HIX', 'FAF', 'FAC', 'EGT', 'CAAS', 'BGR', 'BETR', 'AUPH', 'ATV', 'ATLC', 'AST', 'ARIS', 'ARCI', 'APLE', 'ANY', 'ANIP', 'AMSWA', 'AMSF', 'ALLT', 'AKTX', 'AGYS', 'AGTC', 'AFG', 'ADDYY', 'AAVL', 'WAIR', 'RESI', 'LND', 'LFL', 'HRT', 'ESD', 'ECF', 'DGLY', 'CIK', 'CII', 'CHOP', 'CCD', 'CADC', 'AYA', 'AWRE', 'AVV', 'AVNW', 'ATRM', 'APPF', 'AFFMQ', 'AMRI', 'AMCN', 'AMCF', 'ALTI', 'ALLE', 'AJRD', 'AHH', 'AGM', 'AGII', 'AFCB', 'AEPI', 'ADMA', 'ABCW', 'AAME', 'TEO', 'SRAQU', 'SINO', 'OMAB', 'NOA', 'NCZ', 'MTT', 'MHG', 'JAGX', 'ISL', 'HIO', 'GRR', 'FAX', 'ENL', 'DIT', 'CRMT', 'CRESY', 'CGA', 'CAF', 'ATRA', 'ATEN', 'ATEC', 'ARLZ', 'ARII', 'ARDM', 'ARDC', 'ARCX', 'APPS', 'APHB', 'ANW', 'ANAT', 'ANAD', 'AKAO', 'AGHI', 'AETI', 'AEB', 'ADPT', 'ADMP', 'ACRS', 'ACC', 'ABEOW', 'ABDC', 'REX', 'PAC', 'NNA', 'NAUH', 'IGD', 'HMNY', 'GABC', 'ERH', 'EPAX', 'CACQ', 'BTI', 'AXPW', 'AWF', 'AVX', 'ASUR', 'ASMB', 'ASFI', 'ASCMA', 'ASCC', 'ARES', 'ARCP', 'AQMS', 'ANCB', 'AMRC', 'AMOV', 'AKG', 'AFW', 'ACY', 'ACPW', 'ABIO', 'AAC', 'XKE', 'VLRS', 'TEAM', 'SORL', 'NEN', 'NEA', 'LMIA', 'JEQ', 'IGA', 'IDE', 'GBAB', 'FWP', 'EVTC', 'CMGE', 'CHY', 'CADTU', 'BTZ', 'AXU', 'AWP', 'ATE', 'ATAI', 'ARQL', 'ARKR', 'APP', 'APLP', 'APF', 'APB', 'AMRB', 'AMBR', 'ALQA', 'ALOT', 'AKER', 'AIB', 'AHPI', 'AGRO', 'AFST', 'ADX', 'ADGE', 'ADAT', 'ADAP', 'ACU', 'ACTS', 'VLKAY', 'TKC', 'AQQSQ', 'SCOK', 'RZA', 'PWX', 'PRTS', 'POPE', 'PEO', 'OASM', 'NCV', 'NBB', 'NADL', 'MHY', 'MHF', 'IOTS', 'HYB', 'GAM', 'EOD', 'EAGL', 'DLA', 'CBA', 'BRKS', 'AVK', 'AUMAU', 'AUBN', 'ASYS', 'ASA', 'AMPH', 'AMIC', 'AMFW', 'ALJJ', 'ALDX', 'AGR', 'AGD', 'AFC', 'AFA', 'AEY', 'AEK', 'ADVS', 'ABUS', 'AAPC', 'TANN', 'SHOS', 'RYAM', 'RJETQ', 'PAHC', 'NAC', 'MZA', 'MGR', 'HYI', 'GNOW', 'FWRD', 'FEN', 'FEI', 'CHLN', 'CALI', 'AXON', 'AXGN', 'AVH', 'AVAL', 'AUMN', 'ATL', 'ASRVP', 'ASRV', 'ASBI', 'ASBB', 'ARTW', 'APWC', 'APAM', 'AMS', 'AMFC', 'ALN', 'AGFS', 'AFGE', 'AEMD', 'ADNC', 'ACV', 'ACG', 'ACBI', 'ABTX', 'AAMC', 'UNAM', 'TVE', 'TVC', 'SGF', 'SCAI', 'HVCW', 'OMAM', 'NSA', 'NKG', 'NAD', 'MTGEP', 'MPAA', 'LDP', 'JRI', 'JAX', 'IF', 'GGM', 'ETF', 'EARS', 'EADSY', 'DMO', 'DEX', 'AZSEY', 'AXX', 'AXTI', 'AVXS', 'AUQ', 'ATTU', 'ATLO', 'ASTE', 'ASND', 'ARL', 'APTO', 'AMTX', 'AKP', 'AGIIL', 'AFMD', 'AFFY', 'AFB', 'AEUA', 'ADEP', 'ABIL', 'ABAC', 'WIW', 'WGA', 'SBI', 'RKDA', 'PSF', 'NAZ', 'MNP', 'MMU', 'JTA', 'IPCC', 'IAF', 'IAE', 'GCP', 'FTAI', 'FNTCU', 'FGB', 'FCO', 'EMD', 'EAA', 'DDAIF', 'CHI', 'CEE', 'BUI', 'AXSM', 'ANOS', 'ANCI', 'ALTV', 'ALAN', 'AKZOY', 'AKO-A', 'AJX', 'AGNCB', 'AFSD', 'AFH', 'AEGG', 'ACP', 'ABRN', 'WRN', 'USA', 'PHX', 'NZH', 'KYE', 'KLREU', 'JCE', 'JBR', 'JBK', 'IGZ', 'IGI', 'HOPS', 'HDRA', 'GRO', 'GPACU', 'GER', 'ELEC', 'EGIF', 'DYSL', 'CNLM', 'CLAC', 'CACG', 'BTA', 'BRSS', 'BLVDW', 'BLVD', 'AVLY', 'AUMAW', 'ASMI', 'ASKH', 'ARUN', 'AREN', 'ARCPP', 'AMSGP', 'AMRH', 'ALTX', 'AIY', 'AIMT', 'AIF', 'AERG', 'AED', 'ADXSW', 'ACLZ', 'ABAT', 'AAAP', 'WIA', 'WEA', 'VKI', 'TRTL', 'SKAS', 'SCD', 'RUK', 'ROIQ', 'QPACU', 'AMLH', 'PZE', 'PAI', 'NXZ', 'NORD', 'NMA', 'NKX', 'NBRV', 'MOG-A', 'MAV', 'LDF', 'JSYNU', 'JPI', 'JBN', 'HDRAU', 'GTATQ', 'GPIAW', 'GGZ', 'GGACW', 'GCH', 'GAI', 'FNTC', 'FBGX', 'EXD', 'EHI', 'EAE', 'DRA', 'DFP', 'DDF', 'CVB', 'CNLMR', 'CLAD', 'BLVDU', 'BHAC', 'BGY', 'AVNU', 'AVL', 'ASG', 'ARU', 'ANTX', 'ANSU', 'ANRZQ', 'ANDAU', 'ALYI', 'ALLM', 'ALLB', 'AIRT', 'AIC', 'AFFM', 'AC', 'ZERO', 'VOLVY', 'TRTLU', 'TPZ', 'ABEC', 'SIEGY', 'SDCJF', 'ROIQW', 'ROIQU', 'QPAC', 'PAACR', 'NZF', 'NVX', 'NVG', 'NUW', 'NIE', 'MYHI', 'MHNB', 'LAQ', 'KED', 'HJV', 'GLV', 'FIEE', 'ELECU', 'EACQU', 'CNLMU', 'CAMBU', 'AXPWW', 'ASPN', 'ARBV', 'AOXY', 'AOGN', 'ALOD', 'AKO-B', 'AINC', 'AGFSW', 'AFFW', 'AFCO', 'AERT', 'AEH', 'AEGA', 'ACNV', 'ABHD', 'ABCP', 'AAU', 'TANP', 'TANO', 'SMCG', 'SMACU', 'SBW', 'AXXE', 'PACQF', 'NRBAY', 'MLPB', 'MHNC', 'MHNA', 'JDD', 'IMMA', 'IAIC', 'HNNA', 'HCACU', 'GYC', 'GTN-A', 'GPIA', 'GGACU', 'GGAC', 'GFY', 'GDF', 'FSAM', 'FMAO', 'FCAM', 'ECACU', 'EAGLW', 'EAGLU', 'DLYT', 'CAMBW', 'BHACU', 'AVTH', 'AVOI', 'AVGR', 'AUXO', 'AUNFF', 'AUNB', 'ATOC', 'ATEA', 'ASNB', 'ASCCF', 'ARWA', 'ARTH', 'ARGB', 'ANDA', 'ANAS', 'AMPG', 'AMNF', 'AMEH', 'AMBOY', 'AHONY', 'AFSS', 'AFGH', 'AEYE', 'AERO', 'ADVC', 'ACIIQ', 'ACDVF', 'ABBB', 'WTER', 'AAWC', 'TWCF', 'TGRO', 'TFECY', 'SUGO', 'CBAI', 'SMACR', 'SIGL', 'LEAS', 'PRVW', 'PAAC', 'OPEI', 'NXK', 'NHYDY', 'NBD', 'NAEY', 'LMFA', 'LGI', 'JMLP', 'IREBY', 'IGAP', 'IBO', 'ALME', 'HDRAR', 'HCAC', 'HADV', 'GPIAU', 'GPACW', 'GGACR', 'GDO', 'GCV', 'FUTU', 'AWON', 'FNTCW', 'FBAK', 'FABK', 'ESOA', 'ELUXY', 'ECACR', 'EACQW', 'EAB', 'DTEGY', 'DNSKY', 'DBRM', 'UAHC', 'CLACU', 'CEAI', 'CADT', 'BHACR', 'BAYRY', 'BAC-PL', 'AXST', 'AXIH', 'AXAHY', 'AUSI', 'ATAR', 'ASHG', 'ASCS', 'APDNW', 'AOREF', 'ANPDF', 'ANAV', 'AMUB', 'AMPLQ', 'AMIN', 'AMBZ', 'AMBTQ', 'AMAVF', 'ALYE', 'ALSE', 'ALRT', 'ALNPY', 'ALMG', 'AKTS', 'AHII', 'AHFP', 'AGIN', 'AFSE', 'AFBG', 'ADTM', 'ADLS', 'ACCA', 'ABNK', 'ABKI', 'WWRB', 'WETM', 'VOIL', 'VBHLF', 'UBAB', 'STWRY', 'ARCS', 'SKFRY', 'RWEOY', 'RAFI', 'QUBSF', 'PTPF', 'PRKA', 'PAEKY', 'PAACU', 'ORXOY', 'MLPZ', 'MLPQ', 'MHM', 'LMFAU', 'KMF', 'KLRE', 'JOES', 'IFNNY', 'HISP', 'HGKGF', 'GPAC', 'GNGBY', 'GLUX', 'FFMH', 'ELDO', 'SOUL', 'EBKDY', 'DFF', 'USAE', 'CRZBY', 'CITY', 'CISAW', 'CIG-C', 'CHOPF', 'ABHI', 'CCLAY', 'CADTR', 'CACGW', 'BST', 'BCS-PD', 'BCAUY', 'BAOXF', 'BAMXY', 'AZZEF', 'AXRX', 'AXIM', 'AXANF', 'AVTS', 'AVMXY', 'AVBH', 'AUTCF', 'AUMA', 'ATTBF', 'ASCK', 'ASAZY', 'ARZGY', 'ARWAU', 'ARWAR', 'ARNI', 'ARNGF', 'ARKAY', 'ARGKF', 'APVS', 'APNI', 'APEOF', 'ANZFF', 'ANDAW', 'ANDAR', 'AMTY', 'AMTC', 'AMSE', 'AMSA', 'AMRR', 'AMKBY', 'AMCO', 'AMBK', 'AMAR', 'ALXDF', 'ALSMY', 'ALIOF', 'ALGI', 'ALALF', 'AKVA', 'AIQUY', 'AIII', 'AHRO', 'AHNR', 'AGPPY', 'AGM-A', 'AGESY', 'ADGL', 'ADFT', 'ACUG', 'ACHI', 'ABCE', 'AASP', 'AACAY', 'ZURVY', 'ADCF', 'WHLKY', 'WDAS', 'VLKPY', 'VLKAF', 'UATG', 'TUIFF', 'TPDKY', 'TOTRF', 'TMNSF', 'TKGBY', 'TELNY', 'TARSF', 'AMPW', 'SZGPY', 'ARYX', 'SYIEF', 'SWGAY', 'SWGAF', 'SVNLF', 'BTFL', 'SKBSY', 'SAUHF', 'RMLXP', 'RCMFF', 'PSSR', 'PSAHF', 'PRDC', 'PPTG', 'PNDZY', 'AMFE', 'PGRD', 'PGPHF', 'AHIX', 'PEXNY', 'PBAM', 'PACI', 'ORKLY', 'OPESY', 'OMVKY', 'NVZMY', 'NVZMF', 'NVSEF', 'NRK', 'NLY-PA', 'NAN', 'NABZY', 'MURGY', 'MAJJ', 'MABA', 'MAAL', 'LNNNF', 'LNEGY', 'LMFAW', 'KUKAY', 'AWGI', 'ISXIF', 'ISSJY', 'IPLO', 'ILMCF', 'IALB', 'HXGCF', 'HXGBY', 'HUTN', 'HOKCY', 'HIPH', 'HGKGY', 'HGHAF', 'HENOY', 'HCIIP', 'GELYY', 'GEEK', 'GAHC', 'FNMFN', 'FNMAL', 'FLYLF', 'FGRPF', 'FASV', 'EXAD', 'EVTCY', 'ETPHF', 'ERAO', 'ELECW', 'EFGXY', 'ECAC', 'APYP', 'DPSGY', 'DD-PB', 'DATI', 'CYAP', 'CRYO', 'CPPCY', 'COLAY', 'COGLF', 'CMWAY', 'LOGL', 'CHCR', 'CCLAF', 'CBAUF', 'AMIEQ', 'CACGU', 'BWL-A', 'BF-A', 'BAMXF', 'AZRH', 'AYTU', 'AXXU', 'AXXTF', 'AXELF', 'AXAHF', 'AVTC', 'AVMXF', 'AURZ', 'AUMY', 'ATVM', 'ATUSF', 'ATURF', 'ATOR', 'ATOA', 'ATLCF', 'ATGSY', 'ATGN', 'ATCV', 'ATCEY', 'ATBEF', 'DCAC', 'ASWRF', 'ASPW', 'ASPU', 'ASMVF', 'ASLM', 'ASDOF', 'ASB-PB', 'ARVSF', 'ARREF', 'AROFF', 'ARMHF', 'ARET', 'APYI', 'APLD', 'APELY', 'APCX', 'AOMFF', 'AOBI', 'ANFGY', 'ANDR', 'ANCKF', 'AMT-PB', 'AMSYF', 'AMSU', 'AMNL', 'AMMX', 'AMMS', 'AMLM', 'AMIH', 'AMFL', 'AMEN', 'AMBCW', 'AMADY', 'ALPMY', 'ALMMF', 'ALLVF', 'ALLN', 'ALIOY', 'ALIAF', 'ALFVY', 'ALFE', 'ALDA', 'ALAWP', 'AKKVY', 'AJACD', 'AIW', 'AIVI', 'AIRYY', 'AIRW', 'AIPUY', 'AHT-PE', 'AHMS', 'AHIID', 'AHCHY', 'AHBIF', 'AGTMF', 'AGN-PA', 'AGGZF', 'AGESF', 'AFYG', 'AFT', 'AFCMF', 'AFBA', 'AEYIF', 'AETUF', 'ADTR', 'ADRNF', 'ADIA', 'ADHLY', 'ACUS', 'ACSEF', 'ACRB', 'ACOPF', 'ACMUY', 'ACGFF', 'ACAR', 'ABTO', 'ABRW', 'ABGPF', 'ABGLY', 'AAST', 'AASL', 'AABVF', 'AABB', 'REMO', 'LEON', 'ZODFY', 'YWRLF', 'YARIY', 'XXAAO', 'XNGAF', 'SGBP', 'BA', 'IBM', 'BP', 'BAX', 'BBRY', 'BIDU', 'BRK-A', 'BBY', 'BX', 'BSX', 'BIIB', 'BMY', 'BBBY', 'USB', 'BRK-B', 'BLK', 'YUM', 'BTU', 'MNST', 'BK', 'FITB', 'ZBH', 'PBR', 'BHP', 'CZBS', 'GBSN', 'BEN', 'GNCA', 'LB', 'BDSI', 'BMO', 'BBT', 'BPT', 'GALE', 'BKS', 'HRB', 'BWLD', 'BHI', 'STI', 'PNRA', 'TAP', 'CNBKA', 'CBRL', 'BITA', 'BCS', 'TD', 'MTB', 'BXP', 'BTX', 'BMRN', 'RY', 'BCR', 'HBAN', 'BCE', 'SWK', 'PDLI', 'DSU', 'BRCD', 'B', 'BGCP', 'BWA', 'BLL', 'TOL', 'SAM', 'HEB', 'EGLE', 'BOX', 'BC', 'PBI', 'KERX', 'CBB', 'BKE', 'BGS', 'BCEI', 'BBG', 'PACB', 'CM', 'BKCC', 'BBL', 'BBEP', 'TUP', 'SB', 'BKMU', 'BG', 'GABA', 'DNKN', 'BRS', 'BPOP', 'BLCM', 'BGC', 'RBS', 'PBYI', 'NCS', 'BLDP', 'BBD', 'SAN', 'EBS', 'BPL', 'BOBE', 'BLUE', 'BDL', 'STL', 'NILE', 'ICON', 'FIBK', 'EWBC', 'EAT', 'CFR', 'BNS', 'BMS', 'BCRX', 'BCPC', 'BAS', 'WBK', 'SYN', 'SBGI', 'NWBO', 'BRKR', 'BOKF', 'BKD', 'BIO', 'WRB', 'VLY', 'VIVO', 'PVCT', 'ONB', 'HCBK', 'COKE', 'CBI', 'BXLT', 'BLOX', 'BJRI', 'BIOD', 'BCOR', 'UBSH', 'TCBI', 'SUSQ', 'SGMO', 'RRGB', 'ROX', 'LCUT', 'IBTX', 'IBN', 'FFBC', 'DNB', 'BZUN', 'BIP', 'BHE', 'BGFV', 'SONA', 'SBY', 'SASR', 'NXST', 'EVBN', 'CBK', 'BYD', 'BVSN', 'BR', 'BMI', 'BIG', 'BDC', 'BCO', 'BAP', 'BAK', 'ZION', 'VRA', 'SFBS', 'SBNY', 'RATE', 'PBH', 'JBSS', 'JACK', 'CTIC', 'BZH', 'BV', 'BSBR', 'BRC', 'BEBE', 'BBOX', 'BAA', 'TECH', 'SPB', 'NRIM', 'NPBC', 'NAVB', 'LYG', 'IBKR', 'BTE', 'BPI', 'BAMM', 'TLRD', 'OLBK', 'NYCB', 'NBIX', 'NBHC', 'FMBI', 'FIVE', 'CST', 'CNOB', 'CALA', 'CACB', 'BXS', 'BPTH', 'BOH', 'BKU', 'BKH', 'BH', 'BFAM', 'BDN', 'SBLK', 'SBCF', 'ROLL', 'PSB', 'PBIP', 'PB', 'HTBX', 'HTBI', 'GBDC', 'FRBK', 'FIZZ', 'FFKT', 'FCNCA', 'EBIO', 'BXE', 'BWXT', 'BMTC', 'BLRX', 'BLKB', 'BBSI', 'BABY', 'WF', 'OZRK', 'MBII', 'JBT', 'HTR', 'HDB', 'FBP', 'FBHS', 'EGBN', 'COB', 'CLBS', 'CBSH', 'CANF', 'BWP', 'BUSE', 'BURL', 'BRO', 'BRKL', 'BONT', 'BOJA', 'BKJ', 'BHB', 'BGG', 'BEAT', 'BCC', 'BANC', 'XBKS', 'WGBS', 'WASH', 'WABC', 'UCBI', 'PPBI', 'PLX', 'NBTB', 'MBVT', 'INBK', 'IBP', 'EBR', 'CSFL', 'CSBK', 'CIB', 'CBU', 'CBLI', 'CATY', 'BWINB', 'BVN', 'BRN', 'BORN', 'BOFI', 'BNK', 'BNCN', 'BLMN', 'BIOL', 'BBRG', 'WIFI', 'WIBC', 'SJT', 'SBS', 'PFBI', 'PEBK', 'NX', 'LOB', 'KIN', 'IBCP', 'GWB', 'FNBC', 'FARM', 'EBSB', 'CUDA', 'CCBG', 'CBNJ', 'CBF', 'CBD', 'BXMT', 'BTG', 'BSL', 'BRG', 'BOSC', 'BLMT', 'BLFS', 'BKEP', 'BIND', 'BIN', 'BFS', 'BFR', 'BF-B', 'BERY', 'BELFB', 'BBN', 'UBNK', 'TRST', 'TOWN', 'TBNK', 'SQBG', 'SPHS', 'SGBK', 'SBH', 'ORPN', 'NWBI', 'NML', 'NKSH', 'NFBK', 'MNRO', 'LBAI', 'GRBK', 'GBT', 'FBNK', 'ETV', 'CZWI', 'CBPO', 'BSTC', 'BSRR', 'BSQR', 'BSFT', 'BRX', 'BPFH', 'BONE', 'BONA', 'BODY', 'BLX', 'BLDR', 'BIOS', 'BIF', 'BHLB', 'BDGE', 'BDE', 'BCOM', 'BANF', 'XELB', 'UBOH', 'TTOO', 'TRIB', 'SVA', 'SALT', 'RBC', 'QSR', 'PFBC', 'PBT', 'MPB', 'IBOC', 'HYT', 'HFBC', 'GSBC', 'GLDI', 'FBIO', 'CLBH', 'CBAN', 'BSAC', 'BRT', 'BRID', 'BRFS', 'BLT', 'BLBD', 'BKSC', 'BHL', 'BGMD', 'BDR', 'BBW', 'BBDO', 'UNB', 'STBA', 'SFST', 'SBSI', 'SBSA', 'RBPAA', 'PLAY', 'OSBC', 'MHE', 'LBRDA', 'KYTH', 'KFFB', 'JXSB', 'ISBC', 'GFED', 'FNLC', 'FCTY', 'FCCY', 'FBC', 'CHRS', 'BWINA', 'BVX', 'BTN', 'BSET', 'BOOT', 'BOOM', 'BNFT', 'BIOC', 'BHBK', 'BGT', 'BCOV', 'BCLI', 'BASI', 'BANR', 'WAYN', 'UCBA', 'UBA', 'TCBK', 'SMBC', 'SHBI', 'SBOT', 'RDHL', 'OFG', 'NBBC', 'MUH', 'MTBC', 'MFT', 'MBWM', 'LBIX', 'JAXB', 'INF', 'INDB', 'ICBK', 'IBA', 'HEAR', 'GBCI', 'FXCB', 'FSBW', 'FRC', 'FRBA', 'FBIZ', 'EPAY', 'ENZ', 'CUBA', 'CBNK', 'CBAK', 'CARV', 'BYFC', 'BXC', 'BWC', 'BUR', 'BT', 'BSPM', 'BSM', 'BSF', 'BOTJ', 'BOE', 'BNY', 'BLW', 'BKT', 'BID', 'BCX', 'BBX', 'BAGR', 'TSBK', 'TLMR', 'TCBIP', 'TBBK', 'STCK', 'RCKY', 'PULS', 'PNBK', 'PKBK', 'OKSB', 'CUBV', 'NHS', 'NECB', 'MYD', 'MUC', 'MCBC', 'LSBK', 'LBIO', 'HBP', 'HBIO', 'GTWN', 'GCBC', 'GBNK', 'FWV', 'ETW', 'EIP', 'DKT', 'DCOM', 'CWBC', 'CVLY', 'BYBK', 'BWEN', 'BVA', 'BUFF', 'BSMX', 'BOTA', 'BNSO', 'BNJ', 'BMBM', 'BMA', 'BKK', 'BCRH', 'BCBP', 'BBLU', 'BBEPP', 'BANX', 'YCB', 'WBKC', 'UNTY', 'UBSI', 'UBP', 'UBCP', 'TBK', 'SVBL', 'SSBI', 'SNBC', 'SBBX', 'SAL', 'RBCAA', 'PRAN', 'OBCI', 'NHTB', 'NCBS', 'MYJ', 'MRNA', 'MRLN', 'MQT', 'KIPS', 'INB', 'HMPR', 'HFBL', 'HEOP', 'HAWK', 'FFIN', 'ESXB', 'CUNB', 'COLB', 'CLRB', 'BTT', 'BRLI', 'BOXC', 'BOCH', 'BMRC', 'BME', 'BKYF', 'BKEPP', 'BCV', 'BBNK', 'BBCN', 'VIV', 'VBLT', 'VBFC', 'TOF', 'SVBI', 'ROKA', 'PWOD', 'PMBC', 'PBHC', 'PACW', 'ONCY', 'NGVC', 'NEWT', 'NBW', 'NBN', 'MHN', 'MHD', 'MBUU', 'MAB', 'LARK', 'GLBZ', 'FMBH', 'FCVA', 'FBMS', 'EVBS', 'ESSA', 'ESBK', 'EPRS', 'DXB', 'DTK', 'DARA', 'CWAY', 'CUBI', 'CBMG', 'BYM', 'BXMX', 'BWG', 'BW', 'BTO', 'BPMC', 'BNTCW', 'BLD', 'BKFS', 'BIOA', 'BHK', 'BFO', 'BDMS', 'BDJ', 'BCH', 'BALT', 'WBB', 'VBF', 'USBI', 'UBFO', 'STBZ', 'RVSB', 'PEBO', 'NEPT', 'MYN', 'MUI', 'MSL', 'MLVF', 'MIW', 'MFL', 'MCI', 'LOAN', 'JOEZ', 'ISBA', 'HWBK', 'HBMD', 'HBK', 'HBCP', 'GNBC', 'FMNB', 'FGBI', 'FCBC', 'FBSS', 'EIGR', 'EBTC', 'DMB', 'CBPX', 'BZM', 'BRDR', 'BPY', 'BPOPN', 'BNED', 'BLIN', 'BKN', 'BIE', 'BGI', 'BFZ', 'BFIN', 'BERK', 'BECN', 'BBGI', 'BBBI', 'ZBK', 'WTBA', 'VSBN', 'ONOV', 'BWMG', 'TCBIL', 'TBPH', 'SYBT', 'SLVO', 'PBM', 'PBCP', 'OVBC', 'OLLI', 'NVET', 'NTN', 'MVT', 'MVF', 'MUA', 'METR', 'KBLB', 'GNUS', 'FSBK', 'FFNM', 'CYBA', 'EGF', 'DHY', 'CVCY', 'CIVB', 'CBSHP', 'BSE', 'BQH', 'BPMX', 'BPFHW', 'BNCL', 'BLPH', 'BLOZF', 'BLH', 'BGSF', 'BGNE', 'BEP', 'BELFA', 'BEL', 'BAF', 'SWCC', 'WIL', 'WFBI', 'WEBK', 'TPVG', 'SUBK', 'SIBC', 'SBCP', 'RIVR', 'PLMT', 'PBSK', 'PBMD', 'OVLY', 'NBO', 'MYI', 'MUJ', 'MNE', 'MIY', 'MCA', 'LBRDK', 'IROQ', 'HHY', 'HBNC', 'GSBD', 'GNBT', 'GBTC', 'FITBI', 'FBNC', 'EVM', 'EMJ', 'EKSO', 'EIM', 'DUC', 'CSHB', 'CO', 'CFNB', 'CBIO', 'CART', 'BZC', 'BOI', 'BLBK', 'BKOR', 'BJZ', 'BFK', 'BFFI', 'BDCV', 'BDBD', 'TCBIW', 'SWJ', 'SFBC', 'SBLKL', 'PURE', 'PLBC', 'PBIB', 'ONCYF', 'NSBC', 'NRO', 'MYC', 'MUE', 'MPV', 'MEN', 'MELR', 'LPSB', 'LABC', 'JFBC', 'IIBK', 'GEVA', 'GCFB', 'FMCB', 'ETB', 'ENX', 'EIV', 'CUBS', 'CBIN', 'BSD', 'BPOPM', 'BMRA', 'BLE', 'BIT', 'BGX', 'BGCA', 'BFY', 'BECC', 'BDCO', 'BBLS', 'BBF', 'BAYK', 'BASFY', 'BAESY', 'VLYWW', 'BPISF', 'TRCB', 'STRZ', 'SNLS', 'SKBI', 'NUUU', 'SBNYW', 'RIOB', 'PUB', 'PLPL', 'PFED', 'OXBC', 'OPB', 'NYH', 'NWBOW', 'NBGGY', 'NAKD', 'MTGB', 'MQY', 'MGYR', 'MFCB', 'MENB', 'MBCN', 'LNBB', 'FXLG', 'FTLF', 'FSRL', 'FNHM', 'FFBCW', 'DIXI', 'BMIN', 'CMTB', 'CATYW', 'CABC', 'BVXV', 'BVFL', 'BSRC', 'BHV', 'BGH', 'BCCI', 'BBLUQ', 'BBK', 'ZIONZ', 'ZIONW', 'XBOR', 'WISHY', 'SCNB', 'SBBP', 'RILY', 'RBGLY', 'PVBC', 'PBR-A', 'PBBI', 'OSBCP', 'NIDB', 'NEWTZ', 'NBH', 'MYF', 'MTBCP', 'MPA', 'MFBP', 'ITYBY', 'ISM', 'FRA', 'FMBM', 'EQBK', 'EIO', 'EIA', 'EBMT', 'CTBI', 'CSBB', 'CROL', 'CMOH', 'CECB', 'BSPE', 'BRBI', 'BPK', 'BPFHP', 'BOMK', 'BOFIL', 'BNPQY', 'BMBN', 'BKHU', 'BGB', 'BEOB', 'BDRBF', 'BDCZ', 'BANFP', 'BABB', 'ZBZX', 'XTLB', 'VAPO', 'UCIB', 'TPVZ', 'TMAK', 'STBI', 'SPWZ', 'SOMC', 'SIUDF', 'SCZC', 'RBS-PR', 'PUSH', 'PRGB', 'PMCB', 'PDOB', 'ORPB', 'NWPP', 'NWBN', 'MVNR', 'MCHB', 'LSBG', 'LBDC', 'KSBI', 'IEBS', 'IDGBF', 'HTWC', 'BJCT', 'GRBS', 'GCYO', 'FMTB', 'FHLB', 'FCOB', 'DSM', 'CWBK', 'COVR', 'CIVBP', 'CCBC', 'CBCO', 'BZYR', 'BZT', 'BZLFY', 'BYLK', 'BWFG', 'BSHF', 'BRKO', 'BRFH', 'BRBW', 'BNTC', 'BNNP', 'BNCC', 'BMNM', 'BMER', 'BLPG', 'BLJ', 'BLCK', 'BKYI', 'BKCT', 'BITI', 'BIREF', 'BIEI', 'BCHEY', 'BARZ', 'WEIN', 'VGRI', 'UNIB', 'THCZ', 'TEUFF', 'TDCB', 'TBNC', 'SWBC', 'STI-PE', 'SNNY', 'SMEBF', 'SLTB', 'SLCT', 'SBFC', 'SAN-PI', 'SAN-PC', 'RLBS', 'RGRX', 'RGBP', 'PTGEF', 'PMRA', 'PKAY', 'PFCI', 'PNBC', 'PEBC', 'PCLB', 'PCHA', 'PBIO', 'ORBN', 'NWIN', 'NCAL', 'MWBC', 'MTNB', 'LTLB', 'LRCDF', 'LPBC', 'KWBT', 'JBSAF', 'JBAXY', 'ISCHF', 'IRSB', 'INBP', 'IFSB', 'IBTGF', 'IBAL', 'HBKS', 'HBANP', 'HARI', 'BVAP', 'GRCU', 'GHDS', 'FRSB', 'FOTB', 'FNWB', 'FMFG', 'FMBP', 'FIBH', 'FDBC', 'FCBS', 'FBSI', 'EGDW', 'EAST', 'DKMR', 'CWBB', 'CUBN', 'CTBP', 'CRSB', 'CRMBQ', 'CNBV', 'CMGGF', 'CLRBW', 'CHBH', 'CFOK', 'BWOWF', 'BWEL', 'BTHE', 'BTCS', 'BSCA', 'BRPC', 'BRGYY', 'BOPH', 'BOCA-CL', 'BNXR', 'BNKJF', 'BMTNF', 'BLKG', 'BLIAQ', 'BLGA', 'BK-PC', 'BISN', 'BHWB', 'BFCF', 'BEST', 'BELLY', 'BDRXF', 'BCYP', 'BAFYY', 'BACHY', 'ZB-PG', 'YEWB', 'XBIO', 'WRB-PB', 'WPHM', 'WNRP', 'WDKA', 'VLLX', 'VABK', 'USGIF', 'USB-PO', 'URBF', 'UOVEY', 'UBQU', 'TYCB', 'TSGTF', 'TRTB', 'TIRTZ', 'TFHW', 'TBLMY', 'SVJTY', 'STZ-B', 'SMUUY', 'SLOT', 'PCBN', 'SEBNF', 'SCAF', 'SBOTF', 'SBFM', 'SBES', 'SBAZ', 'RTMNF', 'RMHB', 'RCBC', 'RBS-PT', 'QTXB', 'PXBBF', 'PWBO', 'PSBR', 'PPERY', 'PPERF', 'POGLY', 'PLZB', 'PUNK', 'PBYA', 'PATD', 'PATCA', 'PACM', 'OTTW', 'OPBK', 'OMBP', 'OJCB', 'NTIOF', 'NRLB', 'NJCB', 'MZIM', 'MSVB', 'MOG-B', 'MNHN', 'MLGT', 'MDIBY', 'MCBF', 'MBVA', 'MBDE', 'LXMO', 'LEN-B', 'KTYB', 'KISB', 'JMSB', 'IVOB', 'INDOY', 'IMBBY', 'IDRAW', 'ICTV', 'IBBI', 'HXBM', 'HSRPP', 'HSNGY', 'HONT', 'HLAN', 'HKBT', 'HIBE', 'HBKA', 'HBANO', 'GRRB', 'GPDB', 'GOGC', 'GEF-B', 'FSRX', 'FRTR', 'FNRN', 'FMBL', 'FMBJ', 'FINW', 'FCREY', 'FCNH', 'FCEPP', 'FCBK', 'FCBI', 'FBPRN', 'FBBN', 'EVGBC', 'ETINY', 'ENUM', 'ENTB', 'EMALF', 'EESI', 'DEMBF', 'CXGP', 'CTPNF', 'CTBK', 'CSHX', 'CSCGY', 'CPBO', 'CLDB', 'CICHY', 'CHK-PD', 'CHBJF', 'CDNL', 'PCL', 'FITX', 'F', 'GE', 'XON', 'MSFT', 'XOM', 'INTC', 'VZ', 'C', 'DIS', 'KO', 'JPM', 'CSCO', 'PG', 'WFC', 'GM', 'MCD', 'CMCSA', 'S', 'CAT', 'TGT', 'CVX', 'SBUX', 'CHK', 'MRK', 'CMG', 'UTX', 'ORCL', 'MMM', 'COP', 'EMC', 'DE', 'UNP', 'CRM', 'COST', 'LOW', 'CVS', 'LMT', 'SO', 'HAL', 'JCP', 'EMR', 'ED', 'CATM', 'X', 'DOW', 'LNKD', 'NVDA', 'FDX', 'CL', 'SNE', 'TM', 'STT', 'MOS', 'TRV', 'KMB', 'FTR', 'CELG', 'SNDK', 'GD', 'SCTY', 'MON', 'EXC', 'DUK', 'UAL', 'NOK', 'KSS', 'MRO', 'HPE', 'ETFC', 'RTN', 'VLO', 'SYMC', 'DVN', 'DISH', 'CERN', 'STX', 'ESRX', 'OXY', 'CSX', 'MPC', 'CTSH', 'KR', 'LVS', 'LRCX', 'CBS', 'WY', 'WHR', 'CA', 'SHLD', 'FAST', 'TWC', 'O', 'IP', 'PPL', 'MCO', 'GME', 'CTL', 'HMC', 'EL', 'DDD', 'COF', 'POT', 'GLW', 'CF', 'NEM', 'WDC', 'GT', 'KLAC', 'XRX', 'DANG', 'CB', 'CALM', 'SHW', 'RF', 'NOC', 'JCI', 'CTXS', 'CLX', 'WMB', 'LLTC', 'CAH', 'NSC', 'TSO', 'SYY', 'CME', 'CIEN', 'CHKP', 'VFC', 'SCCO', 'K', 'HRL', 'CSIQ', 'CMCT', 'GERN', 'SYK', 'RRC', 'CPB', 'SLW', 'DG', 'SSW', 'DRAD', 'CSII', 'SINA', 'MNKD', 'FOXA', 'CMI', 'CCL', 'MKC', 'KHC', 'NYT', 'EW', 'CI', 'CAG', 'WB', 'VMC', 'NWSA', 'COH', 'CLF', 'NUE', 'CHRW', 'RL', 'MCK', 'LEN', 'KKR', 'HAIN', 'DOV', 'CTRP', 'CNX', 'CLDX', 'CINF', 'NCR', 'HL', 'NFX', 'MNK', 'LCI', 'KMX', 'HES', 'TJX', 'SE', 'HUN', 'HSY', 'ETN', 'QIHU', 'NE', 'L', 'DHR', 'CIM', 'CSC', 'CROX', 'CRDS', 'CHTR', 'YGE', 'WU', 'SWHC', 'PXD', 'NAV', 'EMN', 'CPXX', 'CAB', 'THC', 'PSUN', 'PH', 'CREE', 'XOMA', 'TSM', 'TIF', 'TECD', 'SWN', 'SLM', 'RGR', 'JNS', 'GBX', 'WLL', 'TSCO', 'SPTN', 'QUNR', 'QLGC', 'LNC', 'CLR', 'CAM', 'SPWR', 'SCHW', 'FE', 'ETR', 'CX', 'CLMT', 'CLB', 'YZC', 'XEC', 'SANM', 'NRF', 'MUR', 'MMC', 'FLR', 'CZR', 'TEG', 'SIX', 'PVH', 'PCG', 'MDP', 'H', 'GPC', 'FUN', 'DTE', 'DF', 'CY', 'CP', 'CONN', 'CNI', 'WEN', 'RRD', 'PRGO', 'MNR', 'GCI', 'COG', 'CMO', 'CCI', 'WPC', 'TRP', 'TDC', 'RDC', 'PSEC', 'OC', 'MFC', 'INCY', 'CEO', 'STJ', 'SGY', 'RCL', 'ERF', 'COO', 'CNQ', 'TNH', 'SNTA', 'SNP', 'OAK', 'MAS', 'LUK', 'LNG', 'LLL', 'ITC', 'IMAX', 'FMC', 'DCI', 'CYTX', 'CTAS', 'CCJ', 'WBMD', 'TRGP', 'PGR', 'NRZ', 'EQT', 'CC', 'WWAV', 'WAT', 'UPL', 'TRI', 'TLN', 'SONC', 'SCG', 'ROVI', 'PGH', 'MAIN', 'GNTX', 'CVRR', 'CRUS', 'ZMH', 'UIS', 'TMK', 'SWFT', 'SJM', 'PPC', 'GETH', 'EGO', 'EGN', 'CYOU', 'CSGS', 'COLM', 'CMS', 'CHU', 'CEMP', 'CDRB', 'XONE', 'WYN', 'UNIS', 'OCN', 'MSM', 'MFRM', 'HK', 'CYCC', 'CYBR', 'CXO', 'CR', 'CQP', 'CPST', 'CNP', 'CDE', 'CBG', 'CACI', 'XIN', 'ULTA', 'TRTC', 'SN', 'SF', 'NWE', 'NOVC', 'NFG', 'MOD', 'IVR', 'HRS', 'HMY', 'FLS', 'CRC', 'CPLA', 'CPK', 'COL', 'CE', 'VVC', 'TEL', 'SNX', 'SJW', 'PDCO', 'MCY', 'LNCO', 'JKS', 'JAZZ', 'HFC', 'FDO', 'CLVS', 'CHL', 'CCIH', 'CBOE', 'USG', 'TWO', 'TRNO', 'TMST', 'SNV', 'OSK', 'OLN', 'OLED', 'NPTN', 'MTW', 'MTRN', 'MENT', 'KGC', 'IAG', 'FHN', 'EV', 'ECA', 'DEST', 'DECK', 'CYH', 'CNC', 'CFX', 'CBM', 'CASY', 'TK', 'STR', 'SSP', 'SM', 'NUAN', 'MTSC', 'MTG', 'MSCC', 'MPEL', 'MAC', 'IO', 'FSC', 'EXAS', 'EVC', 'ERIE', 'CVO', 'CVC', 'CRK', 'CMC', 'CLNE', 'CCE', 'CARA', 'VG', 'UTHR', 'TU', 'REXX', 'MSG', 'MKL', 'LVLT', 'KSU', 'KRC', 'KIM', 'KATE', 'ITT', 'ISIL', 'INFN', 'HNI', 'HLS', 'GSVC', 'DDR', 'CUK', 'CPLP', 'CNO', 'CNL', 'CEQP', 'ZBRA', 'VHC', 'UTSI', 'SIMO', 'SBAC', 'OFC', 'NLNK', 'NEOG', 'NCT', 'NAVI', 'MIC', 'LKQ', 'LGF', 'LANC', 'JMI', 'GIB', 'FDML', 'DENN', 'CSV', 'CSL', 'CRR', 'CMA', 'CJES', 'CHS', 'CHD', 'CDW', 'TCAP', 'SCVL', 'RPTP', 'RGS', 'QTM', 'PSDV', 'PCI', 'PCH', 'NWN', 'NTRS', 'MJN', 'MASI', 'LMCA', 'LC', 'JASO', 'ISLE', 'IPG', 'IMN', 'GTY', 'EXK', 'ESL', 'ELY', 'DRE', 'DEL', 'CYTR', 'CSGP', 'CRME', 'CPE', 'VHMC', 'COR', 'CNK', 'CMRX', 'CLGX', 'CG', 'CERS', 'CAKE', 'TG', 'SNC', 'SCOR', 'SCI', 'SCHL', 'SC', 'PTR', 'PRTA', 'PRGS', 'PNW', 'ORIT', 'OGE', 'NWS', 'MIK', 'LSCC', 'LEA', 'IRBT', 'HTGC', 'HSC', 'GV', 'FOX', 'DISCA', 'CUB', 'CRIS', 'CNAT', 'CMP', 'CAMP', 'XCRA', 'USM', 'UFS', 'TEAR', 'SXT', 'SON', 'SBRA', 'RXN', 'RKT', 'PRXL', 'PRSC', 'PAR', 'OTEX', 'NCLH', 'KODK', 'JOE', 'JBL', 'IPHI', 'HSKA', 'HFWA', 'HBHC', 'GMT', 'FUL', 'FMCC', 'FLDM', 'EMMS', 'EE', 'DVAX', 'CYS', 'CVI', 'CVG', 'CTB', 'CRMD', 'CRI', 'CRH', 'CRAY', 'CPRX', 'CPA', 'COHU', 'CHH', 'CEB', 'CCF', 'CARB', 'CAMT', 'CALD', 'WAVX', 'VC', 'UVV', 'UTL', 'UNF', 'UMPQ', 'TPC', 'SKT', 'SEM', 'RPXC', 'PRMW', 'PJC', 'ORC', 'NHTC', 'NHC', 'NDSN', 'NCI', 'MX', 'KEP', 'JAH', 'IGC', 'ICA', 'GRA', 'GEOS', 'FSIC', 'FCN', 'ELNK', 'ECPG', 'DLX', 'DGAS', 'CYNO', 'CXDC', 'CVEO', 'CPGX', 'COT', 'CLI', 'CHSP', 'CHE', 'CGI', 'CEF', 'CCU', 'CCK', 'CCC', 'CBT', 'CBMX', 'CALX', 'CAFD', 'CAC', 'VICR', 'UNT', 'TPLM', 'TEX', 'SYRG', 'SPNS', 'SMG', 'SIAL', 'SEMG', 'SATS', 'RSYS', 'RECN', 'RCI', 'POOL', 'NEU', 'MEOH', 'MCC', 'LOPE', 'LNN', 'LINC', 'IBKC', 'GPOR', 'FSTR', 'EVER', 'DMRC', 'CYAN', 'CSCD', 'CPL', 'CNS', 'CMCSK', 'CLSN', 'CLDT', 'CLD', 'CIZN', 'CHMT', 'CGG', 'CDK', 'CBR', 'CBIS', 'CASH', 'WLK', 'VOXX', 'VAL', 'VAC', 'UGI', 'UAN', 'TTC', 'TAXI', 'SWC', 'SUI', 'SSD', 'SPA', 'SID', 'RM', 'REG', 'PNNT', 'ON', 'NVRO', 'NPD', 'MTH', 'MDCO', 'MANT', 'LPL', 'LMNX', 'LEU', 'IXYS', 'HTS', 'HRZN', 'HMSY', 'GORO', 'GHM', 'GHL', 'GHC', 'FRP', 'FNSR', 'EMAN', 'DISCK', 'CWEI', 'CTRN', 'CSAL', 'CRZO', 'CRTO', 'CPHD', 'CPG', 'COWN', 'CORT', 'COMM', 'CMN', 'CIG', 'CHGG', 'CCNE', 'CAVM', 'CAI', 'WINA', 'VCRA', 'TRR', 'TRMK', 'TESO', 'SYNL', 'STOR', 'SQM', 'SMCI', 'SLG', 'SKM', 'SJR', 'SCL', 'RSO', 'ROIC', 'PTY', 'PRIM', 'PODD', 'ORI', 'NJR', 'NATI', 'MNI', 'MNGA', 'LMCK', 'LFC', 'KOOL', 'KN', 'ISCA', 'INT', 'INAP', 'HWCC', 'HMN', 'HCAP', 'GRC', 'FTD', 'FMER', 'FHCO', 'FBRC', 'EPE', 'ENG', 'DNN', 'CZZ', 'CYTK', 'CYD', 'CWT', 'CWCO', 'CW', 'CVT', 'CVGW', 'CVA', 'CTRE', 'CSOD', 'COSI', 'CORE', 'CMCO', 'CLM', 'CLH', 'CLC', 'CFMS', 'CERE', 'CEL', 'CDNS', 'CCP', 'CBZ', 'CAJ', 'CAE', 'XTLY', 'WLB', 'WBS', 'WATT', 'VIMC', 'TNC', 'TKR', 'TIS', 'SPNC', 'SGI', 'RLI', 'RLGY', 'REN', 'PLCE', 'PCTY', 'PCCC', 'PBA', 'PAH', 'ONEQ', 'ONDK', 'NVIV', 'NDLS', 'MNDO', 'LADR', 'KEYW', 'IPGP', 'IEX', 'IDT', 'HOFT', 'HAFC', 'GNCMA', 'GFF', 'FOE', 'FIX', 'FICO', 'FCCO', 'EGAN', 'EFSC', 'DAN', 'CYBE', 'CVLT', 'CVBF', 'CUI', 'CRT', 'CRS', 'CRL', 'COOL', 'CNSL', 'CLNY', 'CLCT', 'CIVI', 'CIT', 'CIE', 'CHKR', 'CHKE', 'CETV', 'CECO', 'CCRN', 'CASS', 'CALL', 'XXII', 'WLKP', 'VWR', 'VRTV', 'UCTT', 'TRS', 'TMP', 'THOR', 'THFF', 'TFSL', 'STRL', 'STAA', 'SNHY', 'SKY', 'SGM', 'RLH', 'PRSS', 'PKE', 'PKD', 'OZM', 'OSN', 'OMER', 'NWPX', 'MYCC', 'MVC', 'MTDR', 'MATW', 'MATR', 'LDRH', 'KOSS', 'KAMN', 'JGW', 'IX', 'IRDM', 'IOC', 'IMMR', 'IHC', 'GRVY', 'GLRE', 'GDOT', 'FSS', 'FNB', 'FELE', 'FDUS', 'ELRC', 'ECOM', 'DYAX', 'CVM', 'CVE', 'CSLT', 'CPT', 'CPRT', 'CPF', 'CORI', 'CMTL', 'CMLS', 'CHNR', 'CFI', 'CFG', 'CDTX', 'CDR', 'CDI', 'CCXI', 'CCOI', 'WNC', 'WLT', 'WDFC', 'VNCE', 'VCEL', 'USCR', 'UIHC', 'TY', 'TW', 'TLOG', 'TICC', 'STRT', 'STC', 'SP', 'SHIP', 'SHG', 'SHEN', 'SGMS', 'RNST', 'RNP', 'RMCF', 'PZG', 'PRA', 'PPP', 'PHH', 'PFGC', 'OTTR', 'NYMX', 'MXC', 'MTRX', 'MPET', 'MLP', 'MCS', 'LPX', 'LIME', 'LCNB', 'LAND', 'IVC', 'IMOS', 'ICLR', 'HXL', 'HNRG', 'HMHC', 'HHC', 'HEI', 'GOOD', 'FULT', 'FRME', 'FNV', 'FMX', 'FEIC', 'FCF', 'ETAK', 'EQC', 'EMKR', 'EHIC', 'DRH', 'CVGI', 'CTRV', 'CSTE', 'CRDC', 'CPN', 'CNMD', 'CLRO', 'CISG', 'CHMI', 'CHEF', 'CHDN', 'CHCO', 'CGNX', 'CCUR', 'CBAY', 'CATO', 'WRK', 'WCN', 'VSEC', 'UMC', 'UMBF', 'TWMC', 'TCO', 'TCCO', 'TAC', 'SXI', 'STRP', 'SRC', 'SQNS', 'SPIL', 'SEB', 'SCSS', 'SANW', 'QUMU', 'QDEL', 'PWRD', 'POL', 'PLM', 'PES', 'OSHC', 'NTLS', 'NCMI', 'MC', 'LSG', 'KUTV', 'KTCC', 'KT', 'KINS', 'KEX', 'JVA', 'IMDZ', 'HTHT', 'GLT', 'GCAP', 'FPP', 'FMD', 'FF', 'FCFS', 'FBR', 'EPC', 'EDN', 'EDE', 'DX', 'DQ', 'DCIX', 'CWST', 'CVTI', 'CTWS', 'CTQ', 'CTCM', 'CSU', 'CRV', 'CRAI', 'CPSS', 'COCO', 'CNIT', 'CNCE', 'CLS', 'CKP', 'CIO', 'CIA', 'CHMA', 'CGO', 'CDTI', 'CDNA', 'CCO', 'CASI', 'CAPR', 'XPLR', 'USAC', 'TWER', 'TREX', 'TRC', 'TPUB', 'TPI', 'TFSCU', 'TCRD', 'TCPC', 'TCB', 'SWX', 'STV', 'SRCE', 'SHI', 'SABR', 'QRHC', 'PNY', 'PMTS', 'PMD', 'PLXS', 'PLPC', 'PGC', 'OPHT', 'OCFC', 'OCC', 'NMRX', 'NFEC', 'MY', 'MBTF', 'LODE', 'LOCM', 'LNDC', 'LKFN', 'LJPC', 'KYO', 'KOPN', 'KEM', 'JCTCF', 'ITEK', 'IART', 'GPX', 'FRAN', 'FNHC', 'FFHL', 'FC', 'VUOC', 'EML', 'DTLK', 'DRRX', 'DDC', 'CUZ', 'CSBR', 'CRY', 'CRNT', 'CPPL', 'COHR', 'CNTF', 'CMPR', 'CLUB', 'CLNT', 'CIX', 'CHA', 'CFFN', 'CDZI', 'CCCL', 'CAW', 'CARO', 'ZIXI', 'YORW', 'WYY', 'VRTU', 'VLTC', 'VIRC', 'TOUR', 'TNXP', 'SPXC', 'SOR', 'SMTC', 'SLRC', 'SAR', 'RXII', 'RGEN', 'QUIK', 'PCYO', 'NVEC', 'NMFC', 'NJ', 'NWTR', 'MIDD', 'MFNC', 'MCF', 'KOF', 'KMPR', 'IRMD', 'IMSC', 'IGR', 'IFON', 'HYGS', 'HURC', 'HOTR', 'GVA', 'GTS', 'GBR', 'GAIN', 'FWM', 'FDC', 'FCPT', 'FCLF', 'EXCU', 'EGLT', 'ECR', 'DXR', 'DGSE', 'CYRN', 'CYBX', 'CUBE', 'CTRL', 'CSS', 'CRWN', 'CREG', 'CPSI', 'GSAC', 'CPS', 'CORR', 'CNHI', 'CNA', 'CMRE', 'CLLS', 'CKEC', 'CIR', 'CHT', 'CHMG', 'CHFC', 'CHCI', 'CGIX', 'CGEN', 'CERU', 'CELP', 'CCM', 'CBYL', 'CASM', 'CAPN', 'CAL', 'ZFC', 'ZBB', 'XNY', 'WSTC', 'WSFS', 'WMIH', 'WIRE', 'WCIC', 'VVI', 'UEC', 'UCFC', 'TRX', 'TRCO', 'SSFN', 'SPSC', 'SNFCA', 'SMI', 'SGB', 'SGA', 'SFN', 'RWC', 'POR', 'PFD', 'PDS', 'PBPB', 'NWY', 'NRCIB', 'NHF', 'NGHC', 'MWV', 'MVG', 'MSN', 'MSEX', 'MPX', 'MGT', 'MCRI', 'LORL', 'LION', 'LEDS', 'LAYN', 'KZ', 'KEQU', 'IEC', 'HQCL', 'HILL', 'GLAD', 'GKOS', 'GEB', 'FVE', 'FULL', 'FSRV', 'FONR', 'EXAR', 'ETM', 'ESSX', 'ESMC', 'ELON', 'DPW', 'DNBF', 'DJCO', 'DBL', 'CXRX', 'CVV', 'CVR', 'CUTR', 'CUO', 'CSUAY', 'CSRA', 'CRCM', 'CPHC', 'CPGI', 'CONE', 'COBZ', 'CNTY', 'CNNX', 'CLW', 'CKH', 'CHUY', 'CHN', 'CFD', 'CEMI', 'CECE', 'CDXS', 'VYFC', 'VTG', 'UTF', 'EVCI', 'TUES', 'TGD', 'TCS', 'SSNLF', 'SOCB', 'SIM', 'SFNC', 'SEIC', 'RMGN', 'RENT', 'PSTR', 'PSTB', 'PRK', 'PGLC', 'PFMT', 'PED', 'OFED', 'MHGC', 'MGH', 'MDVX', 'MCZ', 'MAXD', 'LTBR', 'LRAD', 'LFVN', 'JCS', 'HVT', 'HTGZ', 'HTBK', 'HGSH', 'GYB', 'GPK', 'GPIC', 'FSP', 'FSFR', 'FOGO', 'FDEF', 'EXA', 'ESP', 'EPM', 'ELP', 'EDIG', 'DAC', 'CZNC', 'CXE', 'CUR', 'CTT', 'CTS', 'CTIB', 'CTG', 'CSTM', 'CSPI', 'CRWS', 'CRVL', 'CPTA', 'COLL', 'CNCO', 'CMCM', 'CLWT', 'CHSCP', 'CHFN', 'CEVA', 'CENT', 'CELGZ', 'CCS', 'CCMP', 'CBDS', 'CANN', 'ZEP', 'XRA', 'VUZI', 'UVSP', 'USEG', 'TXTR', 'TAST', 'SUNS', 'SSB', 'SMTX', 'RYI', 'ROYT', 'RCPI', 'RBY', 'RALY', 'QBAK', 'PYT', 'PSEM', 'PRSN', 'PNX', 'PKOH', 'PFIS', 'PCYG', 'PCBK', 'OME', 'NSANY', 'NRE', 'NEFF', 'NATL', 'MCN', 'LUKOY', 'LMOS', 'LITB', 'KRNY', 'JSDA', 'ITRN', 'INPH', 'INFA', 'IGTE', 'HLTH', 'GULTU', 'GTU', 'GSV', 'GLDD', 'GFN', 'GARS', 'FFIC', 'EDUC', 'DWSN', 'DRAM', 'DLHC', 'CZFS', 'CZFC', 'CVCO', 'CTY', 'CTX', 'CTIX', 'CSWC', 'CRVS', 'CPIX', 'CPAC', 'COTY', 'CNYD', 'CNR', 'CNFR', 'CNET', 'CLIR', 'CLFD', 'CLDN', 'CFNL', 'CFFI', 'CETC', 'WAC', 'VGZ', 'TNDM', 'TFSC', 'STLY', 'SMED', 'SIEB', 'SCX', 'SBRAP', 'PULB', 'PSID', 'PRTY', 'PHI', 'PFLT', 'PCO', 'OXLC', 'OFS', 'NWFL', 'NVTR', 'NRCIA', 'NEWP', 'NCB', 'MGCD', 'MCRN', 'MCGC', 'MBRG', 'KMG', 'KCLI', 'JSD', 'JRJC', 'JOF', 'JJSF', 'INTT', 'IIN', 'ICL', 'HZN', 'HCCI', 'HAE', 'GUA', 'GLCH', 'GAINO', 'FUNC', 'FSV', 'FOXF', 'FLIC', 'FCAP', 'EXTN', 'ERN', 'ENSV', 'DYNT', 'DWCH', 'DRC', 'DOOR', 'DL', 'CTW', 'CTP', 'CTO', 'CTHR', 'CSUN', 'CSQ', 'CRRC', 'CRF', 'CPHR', 'CPHI', 'COVS', 'CODI', 'CMFN', 'CLOW', 'CKSW', 'CET', 'CENTA', 'CEM', 'CCSC', 'CATS', 'CAA', 'WTFC', 'WMMVY', 'WLTW', 'VTA', 'VIDE', 'TMHC', 'TGA', 'SWNC', 'SFR', 'SENEB', 'SENEA', 'ROG', 'RFI', 'RAND', 'QTMM', 'PPX', 'PMC', 'PFO', 'NVSL', 'NTIC', 'NNC', 'NGHCP', 'NCOM', 'MRD', 'MRCC', 'MOC', 'MNAP', 'LOJN', 'LMNR', 'LABL', 'KTP', 'JW-A', 'JQC', 'ITUS', 'ITIC', 'IRIX', 'IRCP', 'IPB', 'INTG', 'IKAN', 'SGRCF', 'ICD', 'HREEF', 'HOTRW', 'HFFC', 'GTLS', 'GLQ', 'GEH', 'DRIO', 'DEG', 'HD', 'DTV', 'DLTR', 'D', 'DPS', 'DRI', 'XRAY', 'RDS-A', 'KHI', 'DHI', 'DGX', 'DFS', 'ODP', 'DLR', 'DRYS', 'DPZ', 'DNR', 'DMD', 'DDS', 'DHG', 'DEO', 'DSW', 'DO', 'DBD', 'RDS-B', 'DY', 'DRWI', 'DPM', 'DKS', 'DXCM', 'DATE', 'DATA', 'FTF', 'DVA', 'DV', 'DRII', 'DFT', 'DRQ', 'DNP', 'DGI', 'DSX', 'PACD', 'DST', 'DMND', 'DLB', 'ODFL', 'IDTI', 'DW', 'DK', 'DHT', 'VDSI', 'DAKT', 'KTOS', 'KKD', 'FANG', 'DYN', 'DMLP', 'DCO', 'ERB', 'DOC', 'DEPO', 'DWRE', 'DTSI', 'WD', 'STLD', 'DHX', 'DGII', 'DGICA', 'DAR', 'SIRO', 'SIGM', 'KST', 'FPF', 'DORM', 'DLNG', 'DIN', 'TGS', 'RDY', 'LPG', 'DRD', 'DM', 'DCT', 'DCM', 'IDXG', 'DXPE', 'TACO', 'SDPI', 'PLOW', 'PDI', 'KRNT', 'FDP', 'DTF', 'DSS', 'DPRX', 'DIOD', 'DFRG', 'DCTH', 'EOC', 'DSKX', 'DSCO', 'DRNA', 'DERM', 'TWIN', 'TRAK', 'TDS', 'TDE', 'SISAF', 'LEO', 'GDV', 'ETG', 'DXM', 'DSPG', 'DSGX', 'LBF', 'HTD', 'GNMK', 'DXLG', 'DLTH', 'QQQX', 'DVD', 'DSKY', 'DNAI', 'DKL', 'EXG', 'DXYN', 'DSL', 'DNOW', 'DEA', 'YOD', 'EVV', 'DSWL', 'DPLO', 'DMTX', 'DHRM', 'DHIL', 'DCUC', 'VDTH', 'TAYD', 'NAK', 'MFD', 'KTF', 'KMM', 'IHD', 'EDD', 'DVCR', 'DHF', 'DEI', 'DDT', 'DION', 'VMM', 'VCF', 'UDF', 'TDJ', 'PDT', 'MZF', 'MDM', 'DTEA', 'DPG', 'DMF', 'DISCB', 'DEJ', 'DEER', 'DDE', 'DBVT', 'DAIO', 'DAEG', 'CTU', 'VFL', 'SAUC', 'PYDS', 'JTD', 'JHA', 'IPDN', 'GHY', 'GDEF', 'EVT', 'DSTI', 'DPSI', 'DHXM', 'DDDX', 'NIQ', 'MMD', 'LOR', 'HNW', 'ETY', 'ETO', 'DTZ', 'DTQ', 'DGICB', 'DCUB', 'DCA', 'DAKP', 'CJJD', 'CHW', 'VODG', 'TRUU', 'TDI', 'TDF', 'TCRZ', 'NID', 'IID', 'HTGM', 'EVG', 'ESDI', 'DSCI', 'DOVR', 'DIRI', 'DIGP', 'TACOW', 'SCIO', 'QLTY', 'NNDM', 'ISDR', 'FDI', 'FDEU', 'DXI', 'DTRX', 'DTRM', 'DSE', 'DRSV', 'DPSM', 'DIAX', 'DELT', 'DECN', 'DDXS', 'DCMT', 'DANOY', 'UNDT', 'UDWK', 'PYS', 'MSD', 'JPM-PE', 'EDRG', 'DX-PA', 'DVOXQ', 'DTST', 'DSXN', 'DNDNQ', 'DMXHF', 'DIALF', 'DGTW', 'DFFN', 'DDR-PK', 'DALP', 'ZSTN', 'YGRO', 'WMDS', 'WFC-PO', 'DCNPF', 'TDGCF', 'TDA', 'CDVIQ', 'SPXX', 'SODI', 'PRPCF', 'MS-PF', 'MFRVF', 'LCDX', 'JIDG', 'ISD', 'GS-PJ', 'GPOVY', 'GDSI', 'FUPEF', 'DYAI', 'DVLY', 'DVDCY', 'DUKH', 'DTRC', 'DSNKY', 'DRIOW', 'DPDW', 'DMPI', 'DMCIF', 'DELTW', 'DDRI', 'DDAY', 'DBSDY', 'DASTY', 'DAIMF', 'TRAC', 'TLSSF', 'DOMK', 'TCRX', 'STT-PC', 'PSA-PQ', 'PJIHF', 'MXCHF', 'MS-PA', 'MRSKY', 'MDEVF', 'KSM', 'JPM-PB', 'JPM-PA', 'IVDN', 'IDND', 'IDEXY', 'HRBR', 'HLDCY', 'HDVY', 'DBGF', 'GPFOY', 'FTDL', 'DALXF', 'EDRWY', 'ECIFY', 'DYNA', 'DYN-WT', 'DXSPF', 'DXMM', 'DWIS', 'DTVI', 'DSCVF', 'DRGDF', 'DRCSY', 'DPWW', 'DPNEY', 'DPMAF', 'DOMKD', 'DNRG', 'DMRR', 'DMCAF', 'DLTZ', 'DLR-PF', 'DLPX', 'DLOV', 'DJSP', 'DIVC', 'DIMN', 'DIMC', 'DHTMY', 'DGRLY', 'DELTY', 'DCBF', 'DAWIF', 'DALT', 'CTPZY', 'CTPTY', 'CTDT', 'CRQDF', 'CMRE-PD', 'CHDRY', 'CADY', 'C-PJ', 'BOLYY', 'BNDSY', 'BEVFF', 'DCLT', 'ZB-PF', 'YERR', 'VPTDF', 'TGDBF', 'SDRG', 'SDOI', 'SBDG', 'RZORD', 'RODI', 'PYGMF', 'PUODY', 'PTCDF', 'PSB-PU', 'PSA-PY', 'PSA-PW', 'PRISY', 'PRDGF', 'PAIR', 'NUNAF', 'NTDMF', 'NODB', 'NIOBF', 'NDMT', 'NATDF', 'MS-PI', 'MHSDF', 'MDAV', 'KIM-PI', 'JPM-PF', 'ISDAF', 'ICAEF', 'HWKDF', 'HUSI-PH', 'HUSI-PG', 'HPDLF', 'HBGRF', 'HAUP', 'GUZBY', 'GRBMF', 'GINBF', 'GFDV', 'GDV-PD', 'GBOOY', 'FSCGF', 'FRC-PC', 'FRC-PA', 'FDOC', 'ERELY', 'EGDFF', 'EDPFY', 'EBIOF', 'DYNR', 'DYII', 'DXIN', 'DX-PB', 'DWRKF', 'DWHHF', 'DVSPF', 'DUOT', 'DUNR', 'DUFRY', 'DTSRF', 'DTNOF', 'DTHRF', 'DTGI', 'DSNY', 'DSGT', 'DSFN', 'DSEEY', 'DSDVY', 'DRUNF', 'DRTGF', 'DRRSF', 'DRLDF', 'DRLCQ', 'DRIFF', 'DREUF', 'DQUEL', 'DQJCF', 'DPSTF', 'DPMLF', 'DPDM', 'DORLO', 'DOLLF', 'DNIYY', 'DMNO', 'DMMIF', 'DMIFF', 'DMEDF', 'DLUEY', 'DLR-PI', 'DLNO', 'DLMV', 'DLLLY', 'DLLLF', 'DLKGF', 'DLAKY', 'DJRT', 'DJIFF', 'DITTF', 'DIPGY', 'DINRF', 'DINO', 'DIMI', 'DIISY', 'DIIEF', 'DIFTY', 'DIDAF', 'DHOXQ', 'DHIFF', 'DGJI', 'DGIX', 'DFT-PB', 'DFIHY', 'DGDM', 'DEYU', 'DEUZF', 'DELAF', 'DEEL', 'DEBC', 'DEAR', 'DDEJF', 'DDDC', 'DDCC', 'DDAIY', 'DD-PA', 'DBVTF', 'DBOEF', 'DBHSF', 'DBCP', 'DBAI', 'DATX', 'DASTF', 'DAFL', 'CTPZF', 'CSDXY', 'COF-PC', 'CNRFF', 'CMPVF', 'CMPRF', 'GREW', 'CIADY', 'CDVI', 'CDQFF', 'CDLA', 'CDKG', 'BXP-PB', 'BTDPF', 'BQNBF', 'BPXXY', 'BOMXF', 'BNDSF', 'BMDPY', 'BMDPF', 'BMDPD', 'BDYVY', 'BDULF', 'BDORY', 'BCS-PC', 'BBT-PE', 'BBT-PD', 'BAC-PW', 'BAC-PE', 'AZTEF', 'AWLCF', 'ASXSF', 'AMXVF', 'AKTAF', 'DEAC', 'ADTCQ', 'ACSAF', 'ABDTF', 'DIRV', 'ZLPSF', 'ZB-PH', 'YITD', 'XXNCC', 'XXNCB', 'XTMCF', 'TMXLF', 'WILYY', 'WILLF', 'WFVLF', 'WFCNP', 'WFC-PW', 'WFC-PR', 'WDSL', 'WDFPF', 'DSUS', 'WBS-PE', 'VWLTF', 'VTGDF', 'USNZY', 'USB-PN', 'USB-PA', 'UNDVL', 'UMDI', 'UDIRF', 'TWDLD', 'TRVX', 'TODM', 'TNTHF', 'TCB-PB', 'STT-PE', 'STT-PD', 'STEFF', 'STAR-PD', 'SQIDF', 'SOHMF', 'SLMZF', 'SLFBF', 'SKYC', 'SKDTY', 'SHWDF', 'SHONF', 'SDISY', 'SBMSF', 'SBMAF', 'RYDBF', 'RYDAF', 'RWNEF', 'RVGD', 'RSRZF', 'RHKJF', 'RF-PB', 'RF-PA', 'RDSPY', 'RDSMY', 'RDIAF', 'RAIDF', 'PYOIF', 'PWRV', 'PVECD', 'PSB-PV', 'PSB-PS', 'PSA-PZ', 'PSA-PU', 'PSA-PS', 'PMXRF', 'PMIG', 'PGLA', 'PGCSF', 'PEYUF', 'PBI-PB', 'OBGRF', 'NWRLY', 'NTKIF', 'NNN-PE', 'NDVLF', 'NDGPF', 'NDEV', 'NDEKY', 'NDEKF', 'MXMTY', 'MRVKY', 'MPIR', 'MNLDF', 'MJDS', 'MJDLF', 'MILTY', 'MGDDY', 'MDIT', 'MDDWF', 'MBDC', 'MALDF', 'LUCRF', 'LOEEF', 'LEDIF', 'LCMD', 'KTHAF', 'KMI-PA', 'KLMR', 'KIRI', 'KESAF', 'KCDMF', 'KBDHY', 'JPOTF', 'JPM-PH', 'ISDAY', 'IRIG', 'IPOAF', 'ILDO', 'IKBDF', 'IDEXF', 'HYSNY', 'HMGN', 'HLDVF', 'HIIDY', 'HDIUF', 'HBGRY', 'GZDIF', 'GUFAF', 'GSEFF', 'GROC', 'GPOPF', 'GPGJY', 'GPDNF', 'GPAGF', 'GPAEF', 'GODYF', 'GMXDF', 'IDIG', 'GMBXF', 'GKSDF', 'GIIZF', 'GDV-PA', 'GDHC', 'GCWOF', 'GCHEF', 'GBEYF', 'GVDI', 'GALEF', 'GAGXF', 'FRDIF', 'FRC-PF', 'FRC-PE', 'FLMNF', 'FLIDF', 'FASDF', 'FACDF', 'EXHTF', 'EVER-PA', 'EUGFF', 'ERDCF', 'DRGZ', 'EMBVF', 'ELPVY', 'ELPQF', 'ELCPF', 'EGDCY', 'EGDCF', 'EBAY', 'EVA', 'RIT', 'ELLI', 'EPD', 'ETP', 'LINE', 'EXPE', 'NEE', 'FCEL', 'EOG', 'EXPD', 'NTI', 'SU', 'ETE', 'NRG', 'ICE', 'WEC', 'EXEL', 'ENDP', 'PEG', 'EQR', 'XEL', 'EIX', 'ESV', 'SRE', 'NBL', 'EQIX', 'EGHT', 'ESPR', 'ESI', 'NETE', 'TE', 'NUS', 'PBF', 'EDU', 'SEP', 'GXP', 'EXXI', 'EJ', 'MCEP', 'WR', 'NS', 'HLX', 'EFX', 'ECL', 'UEIC', 'MGEE', 'IEP', 'HOV', 'ES', 'ERIC', 'ENB', 'OMEX', 'ECHO', 'WWE', 'WPX', 'RE', 'LF', 'EXR', 'EVEP', 'SXE', 'PNK', 'KEG', 'GNE', 'ENR', 'EC', 'GST', 'EPAM', 'PQ', 'PE', 'ENV', 'ENLK', 'EGRX', 'EFC', 'XCO', 'STRA', 'JEC', 'GAB', 'ERII', 'ECYT', 'E', 'SXC', 'EQY', 'ENSG', 'ELGX', 'WRE', 'RICE', 'NPO', 'NGL', 'GEL', 'ENS', 'ENOC', 'EME', 'EEP', 'EDAP', 'EBIX', 'SEAS', 'PEIX', 'LE', 'HE', 'EXP', 'ETRM', 'EQM', 'ENPH', 'ENLC', 'ENH', 'EMES', 'SPN', 'RGC', 'LOCO', 'EXTR', 'EGL', 'LYV', 'KOS', 'GLPW', 'EXPO', 'ESS', 'ESGR', 'EPR', 'EFII', 'REGI', 'PEI', 'NDRO', 'GTE', 'EIGI', 'ECOL', 'VOC', 'VLP', 'TEP', 'PTEN', 'PETS', 'TXGE', 'EVR', 'EVLV', 'ERJ', 'ENTA', 'EIG', 'EFOI', 'XRS', 'UUUU', 'TNP', 'SXCP', 'PEGI', 'MEI', 'LECO', 'JE', 'FNGN', 'EZPW', 'EXPR', 'EXLS', 'ESLT', 'ERA', 'EPIQ', 'EOX', 'ENT', 'EGOV', 'PERY', 'PDCE', 'NYNY', 'HEP', 'GLDC', 'FET', 'EXFO', 'ENZN', 'EGY', 'EEI', 'WERN', 'TTP', 'SSE', 'EXAC', 'EVAR', 'ESE', 'EROC', 'ERI', 'ENBL', 'EMITF', 'EEQ', 'EEFT', 'SYMX', 'SPKE', 'PLUS', 'OESX', 'NSIT', 'MFLX', 'FEIM', 'EVOL', 'ESTE', 'EROS', 'ELTP', 'ELMD', 'EHTH', 'EBF', 'EARN', 'YUMA', 'XENT', 'WHLR', 'VTTI', 'VNOM', 'ROYL', 'PME', 'PAM', 'NRT', 'LEE', 'LACO', 'HEQ', 'EVHC', 'EVDY', 'ELOS', 'ECT', 'EAC', 'UE', 'TEGP', 'MGIC', 'LONG', 'JONE', 'IRET', 'EXAM', 'ETSY', 'ESRT', 'EQS', 'EQGP', 'ENTG', 'EMCI', 'ELS', 'EFUT', 'EDI', 'EDGW', 'ECTE', 'XUE', 'SYKE', 'SDOC', 'RELL', 'PGZ', 'NEP', 'MUS', 'JPEP', 'IESC', 'HEES', 'FXEN', 'EYES', 'EVI', 'ENVA', 'ELA', 'EGAS', 'FNRG', 'VET', 'MXE', 'MICT', 'MEP', 'HLG', 'FPL', 'FES', 'EXLP', 'EVOK', 'EVGN', 'ESND', 'ESES', 'ESEA', 'EPZM', 'ENVI', 'EMF', 'EGI', 'EDR', 'RUSHA', 'RIF', 'PRXI', 'PFIE', 'JOB', 'IRR', 'GLRI', 'FIF', 'EZCH', 'EVO', 'EVK', 'EVH', 'ESCA', 'ERS', 'ERMS', 'EGP', 'EFT', 'WGP', 'VTNR', 'REI', 'JMF', 'GI', 'FEO', 'FELP', 'ESIO', 'EOT', 'EOI', 'ENTL', 'ELTK', 'ELSE', 'EDIT', 'ZAZA', 'TEI', 'SFXE', 'RADA', 'PESI', 'MSF', 'MEIL', 'LNCGY', 'NYNYR', 'LLEX', 'JRS', 'HTLD', 'HOVNP', 'EZT', 'EVRI', 'ETX', 'EOS', 'ENJ', 'EMI', 'EMG', 'EMCF', 'ELJ', 'EDGE', 'XPL', 'VEOEY', 'TYG', 'TRCH', 'SXCL', 'SPI', 'RLJE', 'REE', 'PNPL', 'NTEK', 'NDP', 'MRRL', 'MMV', 'MIE', 'LLEN', 'LINDW', 'KEF', 'JGV', 'HIE', 'GSPE', 'GRF', 'GGE', 'FFA', 'EYEG', 'EVF', 'EURN', 'ESNT', 'EPIX', 'ENRJ', 'EMMSP', 'ELU', 'ELLO', 'EFR', 'EFM', 'EFF', 'EEA', 'CQH', 'EVSTC', 'TMBXF', 'SCEI', 'RUSHB', 'CDII', 'OEC', 'LINK', 'LEXG', 'KE', 'GPM', 'GCEH', 'EVP', 'EVN', 'EVJ', 'ESCR', 'EQCO', 'ENZY', 'ENBP', 'EMO', 'ECCA', 'ECC', 'NESV', 'CTR', 'YECO', 'TIK', 'TENG', 'SUME', 'SRGG', 'SFYWQ', 'OROE', 'MEILW', 'GEK', 'GBSX', 'FMLP', 'FLGE', 'FISK', 'EVY', 'ENFC', 'EMXX', 'EMPO', 'EFSI', 'EAUI', 'WPXP', 'TSNU', 'EGYH', 'SRF', 'SFXEQ', 'ROYE', 'PCSV', 'NENE', 'MITEY', 'MICTW', 'LIND', 'IEEC', 'HOML', 'GLRIW', 'EXNT', 'EXCC', 'ESGI', 'ESBA', 'EQFN', 'EMQ', 'EMIS', 'EMGL', 'EIHC', 'EDF', 'ECPN', 'CSCR', 'COIL', 'CEV', 'WHLRW', 'WHLRP', 'VNGE', 'TRMYQ', 'TOMZ', 'SVLT', 'SMHD', 'SMCE', 'SEOAY', 'SCIA', 'GCEI', 'MYNG', 'MIELY', 'JUHL', 'GMEI', 'GEZC', 'GETG', 'GEQ', 'FXENP', 'EYEGW', 'EVSI', 'ETST', 'ESPH', 'ESNC', 'ESCRP', 'ENZB', 'ENO', 'ENDV', 'EMZ', 'ELRN', 'ELIO', 'EEYUF', 'EDXC', 'EBAYL', 'CJREF', 'WLTGQ', 'WGEI', 'WELX', 'NERG', 'VEOEF', 'USRE', 'TTEG', 'TRER', 'CEXE', 'SSET', 'MEILZ', 'RBEIF', 'SCEDP', 'RGRI', 'RGRE', 'RGRC', 'PSPW', 'PEGFF', 'OMTK', 'OGCP', 'EAPH', 'IFNY', 'IEVM', 'ECOS', 'MILLQ', 'GEIG', 'GDEN', 'FREVS', 'FNEC', 'EZTD', 'EXEO', 'EVTN', 'EVLMC', 'ETHOF', 'ETHG', 'ETFM', 'ETEC', 'ESLOY', 'ESFS', 'EROX', 'ERIXF', 'ENZR', 'ENVV', 'ENRG', 'ENGT', 'ENCR', 'EMPR', 'ELST', 'ELRNF', 'EKFC', 'EGFEY', 'EDCI', 'ECRO', 'ECIA', 'ECCZ', 'EBODF', 'CPPXF', 'CNNEF', 'CEGX', 'EHSK', 'URZ', 'UREE', 'TNRG', 'SURVF', 'SRRE', 'SNDY', 'SMTOY', 'SMGY', 'SLGYF', 'SEYE', 'RNWR', 'RGRP', 'REEMF', 'PSON', 'PREX', 'PMFI', 'PKREY', 'PGSI', 'PEDH', 'PCG-PA', 'NMREF', 'NGEY', 'NEV', 'MNR-PB', 'MIDLF', 'MEGEF', 'MEEC', 'MDLNF', 'LRET', 'JSHG', 'JELCF', 'IVANF', 'ESSE', 'IHPXF', 'HYEG', 'NUVI', 'HOMX', 'HMGLF', 'HENC', 'HECC', 'ENMGF', 'GXP-PE', 'GSEN', 'GRMS', 'EFLO', 'GDEE', 'FWDR', 'EVOMY', 'ETCK', 'ESLOF', 'ERHE', 'EQUEY', 'EPSC', 'EPR-PF', 'EPR-PC', 'EOXLQ', 'EONGY', 'EOMN', 'ENRJ-P', 'ENHD', 'ENGGF', 'ENAKF', 'EMON', 'EMBT', 'EMAV', 'ELYGF', 'ELB', 'EKCS', 'EHGSF', 'EGRN', 'EDSFF', 'EDNMF', 'EDMC', 'ECPCY', 'ECCE', 'EBML', 'EACO', 'CXEE', 'CUAEF', 'CRWE', 'CRNCY', 'CRIUF', 'CMS-PB', 'CESDF', 'PMMEF', 'CAEN', 'BTOW', 'BJWTF', 'BDRCF', 'ZPTAF', 'ZKBSF', 'ZHUZY', 'ZDEXF', 'YUMA-PA', 'YEVN', 'YASKY', 'XTRN', 'XNGSF', 'XIDEQ', 'WSTR', 'WKLN', 'WHGPF', 'WELPP', 'VYEY', 'TRDGF', 'TPIUY', 'TPCA', 'TOTZF', 'TOELY', 'TEXQY', 'TEPCY', 'TEGY', 'TEGR', 'TCRRF', 'TBLEY', 'SXYEY', 'SVGYF', 'STIE', 'STAR-PE', 'SSNNF', 'SQNXF', 'SPXCY', 'SPNI', 'SMBZF', 'SIBN', 'SEKEY', 'SEKEF', 'SDRXP', 'SCE-PD', 'SBGSF', 'QASPD', 'RIOCF', 'RDEMF', 'RDEIY', 'RDEIF', 'RCKHF', 'RAREF', 'QSEP', 'QEGY', 'PTORF', 'PRLE', 'PRFC', 'POWN', 'PKPL', 'PGXPF', 'PEXUF', 'PEI-PA', 'PEGYF', 'OTED', 'OILX', 'OGES', 'OAKR', 'NZERF', 'NSFDF', 'NRWEF', 'MESNF', 'NNHE', 'NMEX', 'NKOSF', 'NHEGY', 'NESW', 'NESC', 'NEE-PH', 'RDEGF', 'MQPXF', 'MQLXF', 'MPEVF', 'MMXMY', 'MHREF', 'MGUY', 'MENC', 'MCWEF', 'LRTR', 'LRAXF', 'LNCGD', 'LIOEF', 'LIEG', 'KMPPF', 'KELTF', 'JYHW', 'JREIF', 'IUNSF', 'ITOEF', 'ISAGY', 'IRET-P', 'INITF', 'INGXF', 'EFFI', 'IHRMF', 'IHPCF', 'IACAF', 'HXPN', 'HWKR', 'HUSKF', 'HUAY', 'CNTO', 'HRELY', 'HESAF', 'GXYEY', 'GXP-PD', 'BCTE', 'GRP-U', 'GLPEF', 'GNTP', 'GERFF', 'GEHDY', 'GDNEY', 'GBNXF', 'GAB-PH', 'EVTP', 'FUAIY', 'FOEAY', 'EARI', 'FEXXF', 'FEEC', 'FBPRL', 'EZRT', 'EZJR', 'EZENQ', 'EYNOO', 'EYMSP', 'EXTDF', 'EXSFF', 'EXPL', 'EXMGF', 'EXIXF', 'EXCH', 'EVRRF', 'EVKIF', 'EVAI', 'EUSP', 'EURI', 'EUIVF', 'ETNTY', 'ETIVF', 'BMXI', 'ETCC', 'ETAH', 'ESWW', 'ESRI', 'ESPGY', 'ESIT', 'ESCC', 'ESBS', 'ERIP', 'ERGZF', 'ERGO', 'ERGN', 'EREPF', 'EQGPF', 'EPUMY', 'EPOR', 'EPM-PA', 'EPGL', 'EPGG', 'EP-PC', 'EORBF', 'EOHDF', 'ENTWW', 'ENTP', 'ENTK', 'ENRT', 'ENPT', 'ENMHF', 'ENDTF', 'ENDO', 'ENAFF', 'EMSF', 'ELVAF', 'ELTZ', 'IPUB', 'ELSRF', 'ELRE', 'ELPSF', 'ELFIF', 'ELEZY', 'ELEEF', 'ELCO', 'EKRNF', 'EJPRY', 'EHGRF', 'EGYF', 'EGFDF', 'EGDD', 'EFRMF', 'EFCT', 'EESH', 'EENEY', 'EDTXF', 'EDCFF', 'ECYCF', 'ECOP', 'ECOCQ', 'ECIG', 'ECGI', 'EBSH', 'EBRPF', 'EBR-B', 'EBKOF', 'EBCOY', 'EBCOF', 'EADSF', 'EACQ', 'EKNL', 'CYRBY', 'CWGYF', 'CWEGF', 'CUYTF', 'CURN', 'CSOL', 'GOOXF', 'CRVYF', 'CNDPF', 'CLRGF', 'CLFMF', 'CHVFF', 'CHNUF', 'AXGC', 'CCOZY', 'CBLY', 'BWSOF', 'BTBIF', 'BRRE', 'BOWFF', 'BNET', 'BMRK', 'BLTHF', 'BKEAF', 'BJINF', 'BGLEI', 'BGLEH', 'BERI', 'BCCEF', 'AVRW', 'AUHEF', 'ASKE', 'ASAE', 'ARENE', 'AREEP', 'APLL', 'AMAZ', 'ALZH', 'AGYP', 'AGLNY', 'AEEX', 'AAEH', 'IONAF', 'CHVEF', 'ZNNMF', 'ZKBHF', 'ZKBGF', 'YOKEF', 'XREG', 'XNGR', 'XLEFF', 'WVVEF', 'WTWOD', 'WPTH', 'WLUC', 'WLTG', 'WIEI', 'ECPO', 'WELPM', 'WEEEF', 'WCTXF', 'WARGF', 'VPEMY', 'BMMCF', 'FB', 'FCX', 'FSLR', 'WFM', 'FIT', 'PRU', 'FFIV', 'TIPT', 'FISV', 'FL', 'FLEX', 'FEYE', 'FIS', 'PNC', 'TSN', 'PFG', 'KFS', 'FTNT', 'TMO', 'LTS', 'FTI', 'MFA', 'FRO', 'FLIR', 'FLWS', 'WDR', 'PBCT', 'GNW', 'FOSL', 'MHFI', 'UFCS', 'SYF', 'SIVB', 'SFM', 'UFPI', 'UNFI', 'FLO', 'IFF', 'GGAL', 'FTK', 'FCS', 'FARO', 'TFM', 'SLF', 'PHK', 'GFI', 'FRT', 'FII', 'SVVC', 'PF', 'KB', 'FNFG', 'FIG', 'FDS', 'LPLA', 'HIG', 'FLTX', 'SFL', 'RJF', 'FUEL', 'FN', 'FCH', 'FREE', 'FLT', 'FGP', 'SFS', 'RAS', 'SOFO', 'RFP', 'RACE', 'KCAP', 'GIFI', 'FRGI', 'FR', 'HIFS', 'FT', 'FMI', 'FLY', 'FISI', 'VOYA', 'THS', 'MBFI', 'FRPT', 'FORM', 'FOR', 'FNF', 'FINL', 'FFNW', 'TLF', 'MFSF', 'FLXN', 'FFG', 'ZF', 'WSBF', 'SAFM', 'PFS', 'MTU', 'MSFG', 'MFS', 'GSM', 'FSYS', 'FRED', 'FORR', 'FBEC', 'ZTR', 'WFD', 'VIRT', 'QTWW', 'NEWS', 'FXCM', 'FUR', 'FPO', 'FATE', 'TTF', 'SMFG', 'NPI', 'NATH', 'INTL', 'FPRX', 'FORD', 'FOMX', 'FI', 'FALC', 'PJH', 'PCF', 'NMZ', 'NICK', 'MOFG', 'IFN', 'HALL', 'GDL', 'FRSH', 'FIVN', 'FCSC', 'WAFD', 'SNAK', 'SMMF', 'MFG', 'JPS', 'HTY', 'GF', 'FSGI', 'FSFG', 'SPE', 'RCS', 'PROV', 'PLNT', 'PKO', 'PFSI', 'NQU', 'LWAY', 'LTXB', 'IFMI', 'HYF', 'HTLF', 'HPI', 'HMNF', 'GMZ', 'FTEK', 'FORTY', 'FLKS', 'TSI', 'SPU', 'REFR', 'PHF', 'NQM', 'NPV', 'NPP', 'NMT', 'MXF', 'MSP', 'KF', 'JFR', 'FSM', 'FRS', 'FRPH', 'FLL', 'FGEN', 'FFWM', 'FENX', 'SWZ', 'SBFG', 'RCG', 'PRH', 'PNFP', 'PGP', 'NUO', 'NQP', 'NPM', 'MGU', 'KFH', 'JTP', 'IVH', 'GOF', 'FSI', 'FPI', 'FMO', 'FLXS', 'FENG', 'WILC', 'TKF', 'SIVBO', 'SIFI', 'PFL', 'NMY', 'IRL', 'HGH', 'HBOS', 'FUND', 'FSD', 'FNFV', 'YDKN', 'VTN', 'UTG', 'SRV', 'SGL', 'SFHI', 'RFT', 'PZC', 'PYN', 'PML', 'PMF', 'PCN', 'OAKS', 'NUV', 'NTC', 'NSL', 'NIO', 'NCA', 'KAP', 'JPW', 'HPF', 'GJR', 'FPT', 'FOF', 'FNJN', 'FMN', 'FISH', 'FHY', 'FGL', 'FFC', 'FCB', 'FAM', 'CMFO', 'CHEV', 'CBFV', 'CAFN', 'WHF', 'VGI', 'UFAB', 'TSLF', 'TCFC', 'PNF', 'PHD', 'PFBX', 'NYV', 'NUM', 'NQS', 'NOMD', 'NOM', 'RFMK', 'MSBF', 'MNRK', 'MFO', 'LOGN', 'JPC', 'JMM', 'HPS', 'HARL', 'GJP', 'GJH', 'GHI', 'FSCFL', 'FMY', 'FLC', 'FCIC', 'FCE-A', 'WLFC', 'VGM', 'THW', 'SZC', 'SQBK', 'SMM', 'RQI', 'PJS', 'PFN', 'OPOF', 'NPN', 'NJV', 'NASB', 'JHP', 'HTF', 'FSNN', 'FLXT', 'CIF', 'CFBK', 'CEN', 'WVFC', 'TLI', 'PFK', 'PCQ', 'ORRF', 'ONFC', 'NWYF', 'NNY', 'NMI', 'MFCO', 'KIO', 'KBSF', 'JRO', 'JHY', 'JFC', 'INTLL', 'HCFB', 'GLO', 'GJO', 'GFNSL', 'GFNCP', 'FUTL', 'FRD', 'FMSA', 'FGFH', 'FFDF', 'CTF', 'CSI', 'CFCB', 'WTFCM', 'WHFBL', 'WAFDW', 'VEND', 'THQ', 'SBFGP', 'RJD', 'RFTA', 'PNI', 'PFCF', 'PCM', 'NQI', 'NMS', 'NMO', 'JGH', 'IVFH', 'IIF', 'GNBF', 'GIM', 'FXNC', 'FVRD', 'FSCE', 'FORK', 'FOJCY', 'FNSI', 'WINS', 'STND', 'SFGP', 'RYFL', 'RIV', 'PXFG', 'PMX', 'MCBK', 'KFI', 'JMT', 'JLS', 'IFUE', 'HLFN', 'GJV', 'FUJIY', 'FTRPR', 'FLOW', 'FKWL', 'FINN', 'FCT', 'FCFP', 'WSFSL', 'WFCF', 'UVFT', 'TWN', 'TRYF', 'TFG', 'SFDL', 'NTX', 'NPT', 'NPF', 'JUVF', 'IFUS', 'IFAN', 'HVT-A', 'HKUP', 'GJT', 'FVRG', 'FSB', 'FRMA', 'FRFHF', 'FRAF', 'FQVLF', 'FPBF', 'FPAY', 'FOUR', 'FOFN', 'FNFI', 'FMCKJ', 'FLXI', 'FLUX', 'FKYS', 'FJTSY', 'FCSMF', 'FANUY', 'FABU', 'COFS', 'CNAF', 'CKFC', 'YYEQG', 'YYEQF', 'WTFCW', 'WFCL', 'UIFC', 'TURV', 'TRVR', 'TFCCF', 'SUGR', 'STVF', 'SRCF', 'SNYFY', 'SMKY', 'SFPI', 'SFEF', 'SCSG', 'RIVE', 'RBS-PI', 'RAS-PA', 'PFLC', 'ORGN', 'NSFC', 'NIPMY', 'MVBF', 'MTSFF', 'HOTF', 'HKFI', 'NHMD', 'GVFF', 'FILM', 'GFNL', 'FVPI', 'FULO', 'FULLL', 'FUJHY', 'FTTN', 'FSUMF', 'FSCR', 'FRFC', 'FRCOY', 'FPWM', 'FNRC', 'FMCXF', 'FJTSF', 'FFMGF', 'FFLO', 'FETM', 'FEOVF', 'FEEXF', 'FDNH', 'FCRGF', 'FCGYF', 'CLA', 'CCA', 'CBAF', 'GFOX', 'BFNC', 'BCONQ', 'ZAHLY', 'XXFPL', 'UFGSY', 'WSRFP', 'WFC-PL', 'WFC-PJ', 'WAKE', 'AFRS', 'USDF', 'TVFZF', 'GFGVF', 'TGONF', 'FLST', 'TAWNF', 'SSNF', 'SNV-PC', 'SMFNF', 'RSLLF', 'RPKIF', 'RFXRF', 'RBCF', 'QMIS', 'QGPLF', 'PRRFY', 'POFNF', 'PNC-PQ', 'PIFLF', 'PGNN', 'PFTI', 'PFHS', 'PFGZP', 'PFG-PB', 'PEFDF', 'PARA', 'NXFI', 'NRF-PE', 'NRF-PB', 'NIM', 'NEE-PC', 'MTYFF', 'MTSFY', 'MLFB', 'MFDB', 'MCFUF', 'MCBG', 'MBCFF', 'LSFG', 'LIBC', 'LFEEF', 'KFN-P', 'IDFB', 'HWEN', 'HTS-PA', 'HOFJF', 'HNFSB', 'HCFL', 'GOFPY', 'GJNSF', 'GDL-PB', 'GAMN', 'FYFFF', 'FXER', 'FXCNF', 'FVCB', 'FURCF', 'FULCY', 'FUBP', 'FTSB', 'FTMDF', 'FTCY', 'FSPKF', 'FSOYF', 'FSNUY', 'FSFF', 'FSEI', 'FSDK', 'FRZCF', 'FRXX', 'FRFXF', 'FRCOF', 'FPMI', 'FPCG', 'FOSUF', 'FORSU', 'FOLB', 'FOFI', 'FNMFM', 'FNMAS', 'FNMAJ', 'FNLPF', 'FNBP', 'FMCKN', 'FMCKL', 'FMCKI', 'FMCCP', 'FLTCF', 'FLNXF', 'FLMJF', 'FLEW', 'FJTCY', 'FJBHF', 'FISB', 'FIRT', 'FINMY', 'FINGF', 'FIND', 'FIISO', 'FIHD', 'FIED', 'FGROF', 'FGETF', 'FFWC', 'FEBHF', 'FDVF', 'FDVA', 'FDNB', 'FDCFF', 'FCUV', 'FCUUF', 'FCSB', 'FCPA', 'FCE-B', 'FCCTO', 'FCCN', 'FCBE', 'FBVI', 'FBTT', 'FBPA', 'FBOP', 'FBOO', 'FBOHY', 'FBFS', 'FANDY', 'FAIT', 'FAHLF', 'CSFD', 'CPOKY', 'CPFH', 'COF-PP', 'CIWV', 'CHFY', 'CHFRD', 'CGIFF', 'CFIS', 'CFIN', 'CEFC', 'CHFR', 'CAPP', 'BSTA', 'BOBS', 'BLUBF', 'FDBL', 'BDFH', 'BABSF', 'AZFL', 'ASBN', 'ASBFF', 'ANPFF', 'ALRS', 'ALLY-PA', 'AGM-PB', 'AFSI-PB', 'AFLYY', 'YDNCF', 'XXJZA', 'FLKM', 'WTFPP', 'WPFH', 'WIHLY', 'WFTBF', 'WFSTF', 'WFE-PA', 'WEFP', 'WCFB', 'VUVAF', 'VNFGF', 'VNDSL', 'CIFHY', 'VIAAY', 'VFFIF', 'VER-PF', 'UTG-RWI', 'USFCQ', 'UPZPF', 'UNIF', 'TYFG', 'TVLF', 'TRYFD', 'TPHIF', 'GILD', 'GS', 'MRVL', 'VOD', 'PCLN', 'GSK', 'GIS', 'GPS', 'UNH', 'GMCR', 'GRPN', 'GPRO', 'GRMN', 'TROW', 'HTZ', 'Z', 'GG', 'KNDI', 'IGT', 'XL', 'SPG', 'JOY', 'LG', 'GWPH', 'IT', 'GWW', 'RGLD', 'NGD', 'VGR', 'GPRE', 'OMC', 'GLBL', 'MLNK', 'GSAT', 'GOV', 'GGG', 'RDN', 'MEG', 'ING', 'GES', 'GEO', 'GOLD', 'GGP', 'JCOM', 'HCSG', 'ROSG', 'OGS', 'GLUU', 'GEVO', 'RGSE', 'MYGN', 'LBTYA', 'UNM', 'TGI', 'SA', 'PSG', 'GPN', 'GENE', 'TAL', 'MDXG', 'GWR', 'GBL', 'G', 'ULTI', 'MOV', 'MG', 'GOGO', 'GNC', 'GCO', 'IHG', 'HRG', 'GSS', 'GEF', 'TDG', 'SGU', 'HSON', 'GIG', 'SGEN', 'SAND', 'PGEM', 'NGG', 'KRG', 'ININ', 'HCI', 'GLNG', 'GILT', 'WHG', 'TPH', 'THRM', 'SNR', 'MDU', 'GWRE', 'GTN', 'GSOL', 'GPL', 'GNRC', 'GIGM', 'GAME', 'WTM', 'WMGI', 'THG', 'PENN', 'NKA', 'GVP', 'GRUB', 'GLP', 'SIGI', 'RUTH', 'LUX', 'JMP', 'HTM', 'GSL', 'GLOG', 'GIMO', 'GGN', 'TV', 'QVCA', 'NSH', 'LBTYK', 'ITG', 'IILG', 'III', 'GNVC', 'GLBS', 'GIGA', 'GGB', 'WPG', 'WLDN', 'WG', 'WES', 'VNET', 'SGLDF', 'SALM', 'PAGP', 'NEWM', 'NAVG', 'GALT', 'TINY', 'PRAA', 'MRC', 'KTWO', 'IRG', 'HMIN', 'GSI', 'GROW', 'GPRK', 'GMO', 'GMLP', 'GMAN', 'GLMD', 'GHDX', 'GFA', 'GENC', 'VPG', 'SERV', 'ROCK', 'RGT', 'RGDX', 'PRGX', 'MOLG', 'LILA', 'JMG', 'HUBG', 'GUID', 'GSIT', 'GSIG', 'GRIF', 'GAIA', 'LBRG', 'XOXO', 'WSTG', 'WKHS', 'THR', 'PHOT', 'NWLI', 'KANG', 'HCKT', 'GSB', 'GMED', 'GLOP', 'GLOB', 'GLF', 'GDDY', 'GBIM', 'GB', 'WTT', 'TNET', 'TGH', 'ORN', 'OHGI', 'OB', 'KONA', 'GUT', 'GRFS', 'GLYC', 'GLOW', 'ZN', 'WEB', 'SYRX', 'PLG', 'NAME', 'MYRG', 'MTCH', 'MPG', 'MIG', 'LHCG', 'INVT', 'GTXI', 'GLU', 'GK', 'GGT', 'GBLI', 'WEYS', 'THGA', 'SSN', 'SIXD', 'SGC', 'ISP', 'GZT', 'GTIM', 'GTHP', 'GOGL', 'GNL', 'GCVRZ', 'NVEE', 'NGS', 'MARA', 'MAMS', 'ISG', 'IND', 'IGLD', 'GURE', 'GPT', 'GNK', 'SBGL', 'PTNT', 'LGL', 'INZ', 'GYRO', 'GNT', 'GKNT', 'GJS', 'GEN', 'GASS', 'CIGI', 'ZAYO', 'WUHN', 'UWN', 'TRNX', 'SGZA', 'SGOC', 'SAFT', 'RAVE', 'MSK', 'LILAK', 'IKGH', 'HMTV', 'GWGH', 'GTT', 'GSH', 'GOODN', 'GOMO', 'GNRT', 'GLPG', 'GFIG', 'ZAIS', 'WYIGU', 'SGRP', 'SGNL', 'NSEC', 'NGHCZ', 'NGHCO', 'MWG', 'MDW', 'ISF', 'HURN', 'HCJ', 'GRX', 'GRNH', 'GPP', 'GMETP', 'GMET', 'ZG', 'WWWW', 'SUTR', 'RMRAV', 'PGRE', 'PGND', 'OSG', 'MWO', 'MGF', 'LBTYB', 'JRVR', 'JMPC', 'JMPB', 'GRH', 'GRAM', 'GALTU', 'GAINN', 'WYIGW', 'WMGIZ', 'THMG', 'SFTBY', 'SELF', 'QVCB', 'PPCH', 'OXFD', 'OSGB', 'MDBX', 'GTXO', 'GSJ', 'GRSHU', 'GMRE', 'GAINP', 'CXH', 'WYIG', 'VIAS', 'VCMG', 'TOR', 'SRG', 'SPND', 'RCGP', 'PRVT', 'PGRX', 'PACV', 'OGZPY', 'LSCG', 'LNVGY', 'CMGO', 'GTSO', 'GOVX', 'GLADO', 'GEOR', 'GALTW', 'CNIG', 'CCOM', 'NXGA', 'SRGZ', 'SANT', 'GAWK', 'ROGP', 'RMR', 'RMGI', 'RBIZ', 'PRZM', 'PROP', 'PGPEF', 'MXSG', 'MNGPY', 'MNGGF', 'MAKSY', 'IMCI', 'HSTC', 'HLM-P', 'GTOMY', 'GPRC', 'GPLH', 'GOODP', 'GNSZ', 'GMEC', 'GLTC', 'GLOH', 'GLBD', 'CRXM', 'CRBO', 'CCGI', 'PKGM', 'NVGC', 'UPGI', 'TRCK', 'TCKGY', 'STKS', 'SNCAF', 'SLNM', 'RJDG', 'REBL', 'PRXG', 'PMIR', 'PHIL', 'PGOL', 'PANG', 'NOBGF', 'LIQD', 'MTNOY', 'MDRM', 'MCAR', 'QCLSF', 'IRNS', 'INKS', 'ICGQF', 'HGBL', 'GZPFY', 'GTMM', 'GTHR', 'GRSH', 'GRMC', 'GPOFF', 'GNKWF', 'GMCI', 'GIFLF', 'GDRZF', 'GBGD', 'GANS', 'CWGL', 'CMPGY', 'CLHRF', 'CCGN', 'MYGG', 'CANWF', 'CAGU', 'STBV', 'WIRX', 'VKIN', 'VITFF', 'UUGRY', 'TWMJF', 'TGICQ', 'SOGC', 'YNGFF', 'SLLFF', 'SLGD', 'SGZH', 'SCGLY', 'RVREF', 'RSNAY', 'ROGI', 'RIBS', 'RDUFF', 'QBEIF', 'PZCUF', 'PUBGY', 'PRED', 'POGS', 'PGSC', 'PEGRY', 'OTCM', 'HPTG', 'NDBKY', 'NAUG', 'MTLQU', 'MSGO', 'MSADF', 'MNGPF', 'GRHHQ', 'MHGU', 'MAGE', 'LZAGF', 'LNGLF', 'LLESF', 'LKAI', 'LEXVF', 'GYSN', 'JCOUF', 'ITWG', 'ITPOF', 'INGIY', 'ICGFF', 'HMRTY', 'CGPI', 'HAMP', 'GWPRF', 'GWOX', 'GVCM', 'GTGR', 'GSPH', 'GS-PD', 'GRZG', 'GRH-PC', 'GQMNF', 'GPHOF', 'GPHBF', 'GPCM', 'GOHE', 'GOGR', 'GNZR', 'GNGT', 'GLYE', 'GLXZ', 'GLOFF', 'GLNCY', 'GLLA', 'GLGI', 'GLAXF', 'GKNGY', 'GKIT', 'GIKLY', 'GIGNY', 'GGN-PB', 'GDVTZ', 'GDPM', 'GBLIZ', 'MXMG', 'PCGR', 'TYHJF', 'CTIG', 'CLTZF', 'CHPGF', 'CGHA', 'BTGOF', 'BSNRY', 'BSND', 'BGMZF', 'BFMC', 'BFGC', 'BDVSY', 'ZMDC', 'ZARFF', 'YTRGF', 'YNGDF', 'XYIGF', 'JPEX', 'WWHZF', 'WPG-PI', 'WMTN', 'WGLCP', 'VODOF', 'VODAF', 'VNRFY', 'VNLPF', 'TACXF', 'VEGPF', 'URHG', 'UIBGF', 'TYIN', 'TORXF', 'TLGN', 'TLCTF', 'TKTCY', 'TGRI', 'TGOSY', 'TGISQ', 'TCNGF', 'TCHBF', 'TBGPF', 'SUWG', 'SURRY', 'STTX', 'SRCRF', 'SPOM', 'SPG-PJ', 'SOUTF', 'SOLTF', 'SOIGF', 'SOGCQ', 'SOCGM', 'SNNHF', 'SNMCY', 'SHPHF', 'SHGT', 'SGPYY', 'SGLOF', 'SGCNF', 'SGCLF', 'SGBLY', 'SFDPF', 'CGYG', 'SCGLF', 'SAYC', 'SAGD', 'RVDO', 'RSKIA', 'RPHL', 'ROAOF', 'RMIOF', 'RKIGF', 'RIGI', 'RHSC', 'RGCTF', 'RDFY', 'RBSPF', 'RBS-PS', 'QMXGF', 'PWCHF', 'PTOZF', 'PRVG', 'PPAAY', 'PLGTF', 'PGTK', 'PGEJF', 'MXOM', 'OPYGY', 'OKSKF', 'NULGF', 'NGPHF', 'NGBL', 'NACG', 'MWOG', 'MVTG', 'MTYGF', 'MTNOF', 'MSRPW', 'MRGLF', 'MRDDF', 'MQBKY', 'MMRGF', 'MJLB', 'RGDXQ', 'MFMNF', 'MCGRF', 'MAQAF', 'LZAGY', 'LYG-PA', 'LTGHF', 'LSGOF', 'LQNGF', 'LNGLY', 'LLTHF', 'LLESY', 'LLDTF', 'LGLBF', 'LGCUF', 'HPQ', 'OPK', 'HON', 'SIRI', 'SKYS', 'VIPS', 'HOT', 'HCN', 'POST', 'HCP', 'HP', 'HOG', 'HUM', 'HAS', 'KBH', 'HAR', 'PYPL', 'HW', 'MHLD', 'LL', 'HSIC', 'RHI']
# 36 global top indices-> execution time 6min
#global_indices=['^GSPC', '^DJI', '^IXIC', '^NYA', '^XAX', '^BUK100P', '^RUT', '^VIX', '^FTSE', '^GDAXI', '^FCHI', '^STOXX50E', '^N100', '^BFX', 'IMOEX.ME', '^N225', '^HSI', '000001.SS', '399001.SZ', '^STI', '^AXJO', '^AORD', '^BSESN', '^JKSE', '^KLSE', '^NZ50', '^KS11', '^TWII', '^GSPTSE', '^BVSP', '^MXX', '^IPSA', '^MERV', '^TA125.TA', '^CASE30', '^JN0U.JO']
# 2292 aussie stocks - execution time 49min
#aussie_stocks=['CBA.AX', 'BHP.AX', 'CSL.AX', 'WBC.AX', 'NAB.AX', 'FMG.AX', 'ANZ.AX', 'WES.AX', 'MQG.AX', 'RIO.AX', 'WOW.AX', 'TLS.AX', 'GMG.AX', 'TCL.AX', 'APT.AX', 'ALL.AX', 'COL.AX', 'NCM.AX', 'REA.AX', 'WPL.AX', 'SYD.AX', 'XRO.AX', 'JHX.AX', 'SHL.AX', 'FPH.AX', 'BXB.AX', 'QBE.AX', 'COH.AX', 'REH.AX', 'ASX.AX', 'RMD.AX', 'SUN.AX', 'MGOC.AX', 'RHC.AX', 'S32.AX', 'STO.AX', 'SCG.AX', 'AMC.AX', 'BSL.AX', 'MIN.AX', 'IAG.AX', 'NST.AX', 'EDV.AX', 'TPG.AX', 'MGR.AX', 'APA.AX', 'TAH.AX', 'DXS.AX', 'SGP.AX', 'SEK.AX', 'AFI.AX', 'DMP.AX', 'WTC.AX', 'AIA.AX', 'CPU.AX', 'MPL.AX', 'MFG.AX', 'GPT.AX', 'VAS.AX', 'QAN.AX', 'TWE.AX', 'MCY.AX', 'SVW.AX', 'LLC.AX', 'SPK.AX', 'OSH.AX', 'BLD.AX', 'PMGOLD.AX', 'OZL.AX', 'IEL.AX', 'SOL.AX', 'EVN.AX', 'CHC.AX', 'ORG.AX', 'AZJ.AX', 'HVN.AX', 'IGO.AX', 'AST.AX', 'VCX.AX', 'ALD.AX', 'ARG.AX', 'LYC.AX', 'CIM.AX', 'MEZ.AX', 'CAR.AX', 'ALQ.AX', 'PME.AX', 'ALX.AX', 'WOR.AX', 'FBU.AX', 'NXT.AX', 'BOQ.AX', 'CWN.AX', 'BEN.AX', 'QUB.AX', 'JBH.AX', 'CWY.AX', 'IPL.AX', 'PLS.AX', 'ANN.AX', 'ORI.AX', 'IFT.AX', 'AWC.AX', 'EBO.AX', 'STW.AX', 'NEC.AX', 'SKI.AX', 'IVV.AX', 'AGL.AX', 'BRG.AX', 'ALU.AX', 'A2M.AX', 'RWC.AX', 'PMV.AX', 'ILU.AX', 'MLT.AX', 'MTS.AX', 'APE.AX', 'CIA.AX', 'SDF.AX', 'IOZ.AX', 'CGF.AX', 'ARB.AX', 'NWL.AX', 'Z1P.AX', 'DOW.AX', 'BKW.AX', 'VGS.AX', 'GNE.AX', 'AMP.AX', 'SGM.AX', 'VUK.AX', 'VEA.AX', 'NHF.AX', 'SGR.AX', 'ORA.AX', 'PDL.AX', 'MGF.AX', 'CLW.AX', 'TNE.AX', 'HLS.AX', 'CDA.AX', 'GOZ.AX', 'CTD.AX', 'SUL.AX', 'FLT.AX', 'PXA.AX', 'ORE.AX', 'DHG.AX', 'NIC.AX', 'TLT.AX', 'SNZ.AX', 'YAL.AX', 'BPT.AX', 'BAP.AX', 'IFL.AX', 'VTS.AX', 'CSR.AX', 'IRE.AX', 'SCP.AX', 'MP1.AX', 'BWP.AX', 'CNU.AX', 'LNK.AX', 'ZIM.AX', 'BFL.AX', 'ABP.AX', 'NSR.AX', 'CHN.AX', 'DRR.AX', 'PNI.AX', 'PTM.AX', 'GXY.AX', 'IOO.AX', 'UWL.AX', 'LFS.AX', 'PBH.AX', 'WHC.AX', 'SKC.AX', 'ABC.AX', 'CNI.AX', 'CMW.AX', 'LFG.AX', 'VEU.AX', 'BIN.AX', 'QUAL.AX', 'PPT.AX', 'AAA.AX', 'CQR.AX', 'WPR.AX', 'CIP.AX', 'VAP.AX', 'SLK.AX', 'PRU.AX', 'EVT.AX', 'RRL.AX', 'DDR.AX', 'NDQ.AX', 'WAM.AX', 'CEN.AX', 'VHY.AX', 'CCP.AX', 'INA.AX', 'WEB.AX', 'IAF.AX', 'PPH.AX', 'JHG.AX', 'AVN.AX', 'ELD.AX', 'LIC.AX', 'TYR.AX', 'IPH.AX', 'LTR.AX', 'HMC.AX', 'AUB.AX', 'NHC.AX', 'MFF.AX', 'LOV.AX', 'VGAD.AX', 'HUB.AX', 'CRN.AX', 'NUF.AX', 'HYGG.AX', 'AIZ.AX', 'MVW.AX', 'NAN.AX', 'OCL.AX', 'DEG.AX', 'LSF.AX', 'BGA.AX', 'TLX.AX', 'RBD.AX', 'IVC.AX', 'ETHI.AX', 'IMU.AX', 'A200.AX', 'MXT.AX', 'PNV.AX', 'CGC.AX', 'HTA.AX', 'TPW.AX', 'VAF.AX', 'AX1.AX', 'ZEL.AX', 'MAQ.AX', 'ING.AX', 'BKL.AX', 'PDN.AX', 'RMS.AX', 'APX.AX', 'CUV.AX', 'SLR.AX', 'UMG.AX', 'GOLD.AX', 'CKF.AX', 'PGH.AX', 'EML.AX', 'AUI.AX', 'MGH.AX', 'JLG.AX', 'SBM.AX', 'SFR.AX', 'COF.AX', 'WLE.AX', 'CQE.AX', 'HBRD.AX', 'HSN.AX', 'ARF.AX', 'MSB.AX', 'ASM.AX', 'BKI.AX', 'GNC.AX', 'PPK.AX', 'CCX.AX', 'GOR.AX', 'ISX.AX', 'URW.AX', 'HGH.AX', 'FCL.AX', 'GUD.AX', 'DBI.AX', 'PPM.AX', 'DUI.AX', 'PSI.AX', 'NWS.AX', 'VDHG.AX', 'HDN.AX', 'KGN.AX', 'VUL.AX', 'IDX.AX', 'NVX.AX', 'JIN.AX', 'FAIR.AX', 'HM1.AX', 'MND.AX', 'MGX.AX', 'GRR.AX', 'OCA.AX', 'MHH.AX', 'NEA.AX', 'NCK.AX', 'ERA.AX', 'MMS.AX', 'OML.AX', 'SIQ.AX', 'IXJ.AX', 'IEM.AX', 'RMC.AX', 'BGP.AX', 'SHV.AX', 'IAP.AX', 'KMD.AX', 'LEP.AX', 'WAF.AX', 'AEF.AX', 'RBL.AX', 'OBL.AX', 'RFF.AX', 'VG1.AX', 'SGF.AX', 'BET.AX', 'BGL.AX', 'MAF.AX', 'WSA.AX', 'GMA.AX', 'BVS.AX', 'NBI.AX', 'IMD.AX', 'IAA.AX', 'KED.AX', 'AAC.AX', 'CIN.AX', 'GEM.AX', 'KKC.AX', 'MICH.AX', 'AKP.AX', 'OPH.AX', 'INR.AX', 'NXL.AX', 'DUB.AX', 'IEU.AX', 'NWH.AX', 'CMM.AX', 'SFY.AX', 'ACL.AX', 'ASB.AX', 'ECX.AX', 'CTT.AX', 'SM1.AX', 'AD8.AX', 'SZL.AX', 'WGX.AX', 'GWA.AX', 'BRN.AX', 'BBN.AX', 'SKO.AX', 'PWH.AX', 'ADI.AX', 'DTL.AX', 'XARO.AX', 'SWM.AX', 'BWX.AX', 'ADH.AX', 'KAR.AX', 'AFG.AX', 'SYR.AX', 'ALK.AX', 'DJW.AX', 'API.AX', 'AQZ.AX', 'TGR.AX', 'QPON.AX', 'NTO.AX', 'SIG.AX', 'EHL.AX', 'PRN.AX', 'MIR.AX', 'MNY.AX', 'WGB.AX', 'REG.AX', 'STX.AX', 'AVZ.AX', 'EOS.AX', 'ASIA.AX', 'EHE.AX', 'SLF.AX', 'VGE.AX', 'VIF.AX', 'OMH.AX', 'FGG.AX', 'GDI.AX', 'PWR.AX', 'VSO.AX', 'RSG.AX', 'WHF.AX', 'SXY.AX', 'VACF.AX', 'ADT.AX', 'PPC.AX', 'HPI.AX', 'HACK.AX', 'VRT.AX', 'MMM.AX', 'FGX.AX', 'MYX.AX', 'EQT.AX', 'JMS.AX', 'BFG.AX', 'SPL.AX', 'PPS.AX', 'VGB.AX', 'PL8.AX', 'IHVV.AX', 'APL.AX', 'MCR.AX', 'ABB.AX', 'CWP.AX', 'PGF.AX', 'IFM.AX', 'FDV.AX', 'MVA.AX', 'RDC.AX', '88E.AX', 'ABR.AX', 'PGG.AX', 'MYS.AX', 'ERD.AX', 'UNI.AX', 'VXR.AX', 'VG8.AX', 'PAR.AX', 'VGL.AX', 'SXL.AX', 'CRED.AX', 'AIS.AX', 'ABY.AX', 'PIC.AX', 'ASG.AX', 'BTH.AX', 'RAC.AX', 'RF1.AX', 'LKE.AX', 'AGG.AX', 'PYC.AX', 'VGI.AX', 'AMI.AX', 'DJRE.AX', 'VDGR.AX', 'MNF.AX', 'HUM.AX', 'ADO.AX', 'ALG.AX', 'EMR.AX', 'MAH.AX', 'HT1.AX', 'SYA.AX', 'RUL.AX', 'AQR.AX', 'CXL.AX', 'RED.AX', 'VDBA.AX', 'BBT.AX', 'IFRA.AX', 'GDX.AX', 'OPT.AX', 'ILC.AX', 'AFP.AX', 'LGL.AX', 'BILL.AX', 'PMC.AX', 'PCI.AX', 'QRI.AX', 'IVE.AX', 'PAI.AX', 'ELO.AX', 'PLL.AX', 'FLN.AX', 'SLC.AX', 'GCI.AX', 'SSR.AX', 'TLG.AX', 'CVN.AX', 'SGLLV.AX', 'HPG.AX', 'IJP.AX', 'IMM.AX', 'MYR.AX', 'ART.AX', 'RHP.AX', 'A4N.AX', 'PPE.AX', 'CAT.AX', 'AOF.AX', 'WZR.AX', 'ALC.AX', 'PSQ.AX', 'DDH.AX', 'ADN.AX', 'JRV.AX', 'DGL.AX', 'VBND.AX', 'BLX.AX', 'COE.AX', 'WMI.AX', 'QHAL.AX', 'AMH.AX', 'SSM.AX', 'POS.AX', 'FSF.AX', 'MAI.AX', 'CAJ.AX', 'AMA.AX', 'UOS.AX', 'FFX.AX', 'TRJ.AX', 'F100.AX', 'MME.AX', 'BOE.AX', 'SDG.AX', 'JHC.AX', 'PAN.AX', 'PFP.AX', 'PIA.AX', 'WGN.AX', 'VAE.AX', 'RIC.AX', 'IJR.AX', 'QOZ.AX', 'BKG.AX', 'OFX.AX', 'CDD.AX', 'NMT.AX', 'PIXX.AX', 'MOT.AX', 'NGI.AX', 'MAU.AX', 'AXE.AX', 'AVH.AX', 'BCI.AX', 'HAS.AX', 'MHG.AX', 'VESG.AX', '3PL.AX', 'ALI.AX', 'ARX.AX', 'WDIV.AX', 'MVF.AX', 'AGI.AX', 'TNT.AX', 'BCK.AX', 'BST.AX', 'MHJ.AX', 'BSE.AX', 'CDM.AX', 'WAX.AX', 'CXO.AX', 'FUEL.AX', 'EGR.AX', 'CTM.AX', '4DX.AX', 'GEAR.AX', 'NXS.AX', 'IRI.AX', 'EZL.AX', 'YMAX.AX', 'PE1.AX', 'MOAT.AX', 'NWSLV.AX', 'SRV.AX', 'WBT.AX', 'TGG.AX', 'MLD.AX', '3DP.AX', 'CVW.AX', 'HUO.AX', 'TUA.AX', 'WCMQ.AX', 'MFB.AX', 'IHD.AX', 'E25.AX', 'SNL.AX', 'RTR.AX', 'GDF.AX', 'CDP.AX', 'RARI.AX', 'WGO.AX', 'ORR.AX', 'LRK.AX', 'APD.AX', 'WSP.AX', 'SST.AX', 'SFC.AX', 'NEW.AX', 'QAU.AX', 'CLV.AX', 'TECH.AX', 'PNR.AX', 'PAC.AX', 'CGS.AX', 'WQG.AX', 'SVL.AX', 'TBR.AX', 'VHT.AX', 'PLUS.AX', 'KSL.AX', 'BUB.AX', 'TWR.AX', 'IHCB.AX', 'ILB.AX', 'SKT.AX', 'WXOZ.AX', 'RCB.AX', 'EGG.AX', 'RDV.AX', 'FEMX.AX', 'ABA.AX', 'IHL.AX', 'MVP.AX', 'OTW.AX', 'FZO.AX', 'PLT.AX', 'IHWL.AX', 'EOF.AX', 'GLN.AX', 'FLOT.AX', 'CVC.AX', 'SRG.AX', 'SO4.AX', 'AVJ.AX', 'ACDC.AX', 'LEG.AX', 'KGL.AX', 'NCZ.AX', 'GNX.AX', 'MLX.AX', 'SVM.AX', 'DCN.AX', 'TRA.AX', 'BBOZ.AX', 'DGO.AX', 'AMS.AX', 'HLO.AX', 'SYI.AX', 'HE8.AX', 'FWD.AX', '4DS.AX', 'RDY.AX', 'GLB.AX', 'QVE.AX', 'COG.AX', 'ECF.AX', 'DYL.AX', 'FRI.AX', 'CEL.AX', 'OOO.AX', 'WAR.AX', 'M7T.AX', 'STA.AX', 'ISEC.AX', 'ENN.AX', 'MNS.AX', 'FID.AX', 'EMH.AX', 'WOT.AX', 'EX20.AX', 'GNG.AX', 'NWF.AX', 'VEQ.AX', 'ROBO.AX', 'ITG.AX', 'ANO.AX', 'DSK.AX', 'SPT.AX', '8VI.AX', 'VML.AX', 'IGL.AX', 'CL1.AX', 'EPD.AX', 'ZER.AX', 'TGP.AX', 'AJM.AX', 'EWC.AX', 'DRA.AX', 'IJH.AX', 'YOJ.AX', 'KSC.AX', 'PDI.AX', 'VVLU.AX', 'EXR.AX', 'VCF.AX', 'FANG.AX', 'ICQ.AX', 'DTC.AX', 'WMA.AX', 'CAI.AX', 'SLA.AX', 'SMR.AX', 'GTK.AX', 'ST1.AX', 'GVF.AX', 'TNK.AX', 'TRS.AX', 'HFR.AX', 'CBR.AX', 'AHQ.AX', 'MVE.AX', 'FYI.AX', 'FOR.AX', 'QPM.AX', 'AVG.AX', 'LYL.AX', 'ATEC.AX', 'NTU.AX', 'CYL.AX', 'JAN.AX', 'MAD.AX', 'SOM.AX', 'AIM.AX', 'AUT.AX', 'EMV.AX', 'IMR.AX', 'RHY.AX', 'LME.AX', 'HZN.AX', 'NVA.AX', 'PGL.AX', 'SHJ.AX', 'NZK.AX', 'PEK.AX', 'ACW.AX', 'FEX.AX', 'IRD.AX', 'NZM.AX', 'AGVT.AX', 'MCA.AX', 'SMP.AX', 'KLL.AX', 'IMA.AX', 'OGC.AX', 'WDMF.AX', 'NEU.AX', 'GRV.AX', 'BNDS.AX', 'VDCO.AX', 'HMY.AX', 'KCN.AX', 'BOC.AX', 'SLH.AX', 'TEK.AX', 'SRL.AX', 'GSS.AX', 'AZY.AX', 'BMN.AX', 'GDG.AX', 'ONE.AX', 'SUBD.AX', 'CRO.AX', 'GPR.AX', 'ARU.AX', 'HTG.AX', 'HLA.AX', 'VMS.AX', 'BTI.AX', 'WJA.AX', 'MML.AX', 'VTG.AX', 'TIE.AX', 'CCV.AX', 'KPG.AX', 'PVS.AX', 'NOL.AX', 'SLX.AX', 'NOX.AX', 'LDX.AX', 'WMC.AX', 'EOL.AX', 'MVB.AX', 'QLTY.AX', 'MGV.AX', 'MTO.AX', 'KZA.AX', 'RCE.AX', 'EM2.AX', 'ONT.AX', 'PCG.AX', 'PBP.AX', 'RFG.AX', 'BBUS.AX', 'MYD.AX', 'EGN.AX', 'VEE.AX', 'WIC.AX', 'D2O.AX', 'BRI.AX', 'APZ.AX', 'SES.AX', 'EP1.AX', 'CNEW.AX', 'RBTZ.AX', 'FMS.AX', 'HVST.AX', 'LOT.AX', 'GMD.AX', 'IWLD.AX', 'CVV.AX', 'QUS.AX', 'EXP.AX', 'DNK.AX', 'PRL.AX', 'CYC.AX', 'A2B.AX', 'QIP.AX', 'AGY.AX', 'EVS.AX', 'NOV.AX', 'EMN.AX', 'RXM.AX', 'VBLD.AX', 'EAI.AX', 'GLL.AX', 'SFG.AX', 'PET.AX', 'POD.AX', 'AHI.AX', 'KSS.AX', 'MBH.AX', 'NSC.AX', 'PPG.AX', 'WVOL.AX', 'IOD.AX', 'GBND.AX', 'IKE.AX', 'GOW.AX', 'PEN.AX', 'VETH.AX', 'BNO.AX', 'DOC.AX', 'BSX.AX', 'SDV.AX', 'VVA.AX', 'SWP.AX', 'OBM.AX', 'IPD.AX', 'GNP.AX', 'ASO.AX', 'LGP.AX', 'RNU.AX', 'USD.AX', 'SEC.AX', 'EGH.AX', 'PAXX.AX', 'TGF.AX', 'MGT.AX', 'MIH.AX', 'BSA.AX', 'VRX.AX', 'MX1.AX', 'OZR.AX', 'VLC.AX', 'TBN.AX', 'DSE.AX', 'ERF.AX', 'OIL.AX', 'MCP.AX', 'UBI.AX', 'RZI.AX', 'EPY.AX', 'DTZ.AX', 'MVR.AX', 'WXHG.AX', 'GAP.AX', 'FSA.AX', 'TOY.AX', 'CYM.AX', 'NTD.AX', 'VMY.AX', 'MLG.AX', 'FAR.AX', 'TOT.AX', 'TTM.AX', 'CYG.AX', 'MYL.AX', 'IXI.AX', 'MRM.AX', 'LVT.AX', 'REX.AX', 'EEG.AX', 'FGR.AX', 'JRL.AX', 'SSG.AX', 'MXI.AX', 'ETPMAG.AX', 'ISO.AX', 'CPH.AX', 'URF.AX', 'DUG.AX', 'OZF.AX', 'QRE.AX', 'RCT.AX', 'CAM.AX', 'BKT.AX', 'BD1.AX', 'SXE.AX', 'CAA.AX', 'VISM.AX', 'AHX.AX', 'PTX.AX', 'ORN.AX', 'NWC.AX', 'FLC.AX', 'CII.AX', 'PIQ.AX', 'PSC.AX', 'MDR.AX', 'YFZ.AX', 'BCN.AX', 'OPY.AX', 'IHHY.AX', 'DW8.AX', 'HETH.AX', 'GGG.AX', 'AND.AX', 'DRE.AX', 'SVY.AX', 'IHOO.AX', 'LAU.AX', 'HZR.AX', 'RYD.AX', 'IZZ.AX', 'STG.AX', 'MDX.AX', 'TGN.AX', 'ANP.AX', 'CD3.AX', 'GWR.AX', 'RMY.AX', 'GDC.AX', 'ISU.AX', 'KIN.AX', 'IOU.AX', '5GG.AX', 'EER.AX', 'IGB.AX', 'UMAX.AX', 'CUP.AX', 'HYM.AX', 'BRL.AX', 'PX1.AX', 'SFX.AX', 'RDG.AX', 'G1A.AX', 'EVO.AX', 'DRUG.AX', 'ZNO.AX', 'BDC.AX', 'MSTR.AX', 'TGM.AX', 'LBY.AX', 'ZEO.AX', 'TOP.AX', 'SELF.AX', 'LIT.AX', 'TER.AX', 'SNC.AX', 'HCH.AX', 'PEX.AX', 'WEC.AX', 'LEX.AX', 'PKS.AX', 'ARA.AX', 'CSX.AX', 'LCK.AX', 'GDA.AX', 'RKN.AX', 'VMT.AX', 'IXU.AX', 'AMN.AX', 'BBX.AX', 'WAT.AX', 'SDI.AX', '5GN.AX', 'TIG.AX', 'TWD.AX', 'AASF.AX', 'BYE.AX', 'AVA.AX', 'LCL.AX', 'ACF.AX', 'AEG.AX', 'CE1.AX', 'ESPO.AX', 'BFC.AX', 'OCC.AX', 'LVH.AX', 'SHM.AX', 'COD.AX', 'DUR.AX', 'IKO.AX', 'ZYAU.AX', 'SOR.AX', 'MAM.AX', 'MYE.AX', 'ACQ.AX', 'LPD.AX', 'IDT.AX', 'AOP.AX', 'IXR.AX', 'CLU.AX', 'WWI.AX', 'IVR.AX', 'LCY.AX', 'AT1.AX', 'RTG.AX', 'TMH.AX', 'MXC.AX', 'WKT.AX', 'ANG.AX', 'FNP.AX', 'BRK.AX', 'FBR.AX', 'LBL.AX', 'SGH.AX', 'PTB.AX', 'ERTH.AX', 'REIT.AX', 'MSV.AX', 'PAB.AX', 'ZBT.AX', 'CKA.AX', 'FSG.AX', 'MWY.AX', 'KIS.AX', 'MVS.AX', 'CAP.AX', 'HIT.AX', 'GTN.AX', 'RGB.AX', 'MEA.AX', 'LER.AX', 'OZG.AX', 'MIO.AX', 'MCL.AX', 'MAET.AX', 'MZZ.AX', 'SEQ.AX', 'RVR.AX', 'PGC.AX', 'BRV.AX', 'TNG.AX', 'CVL.AX', 'NET.AX', 'SB2.AX', 'CSS.AX', 'RND.AX', 'CCR.AX', 'AGE.AX', 'HNDQ.AX', 'TAM.AX', 'TUL.AX', 'BBC.AX', 'AVC.AX', 'AUZ.AX', 'AR9.AX', '8IH.AX', 'SIO.AX', 'BDM.AX', 'TSI.AX', 'ESGI.AX', 'RCW.AX', 'MOGL.AX', 'BC8.AX', 'SWF.AX', 'AGH.AX', 'CWZ.AX', 'CTP.AX', 'DEV.AX', 'LPI.AX', 'BLU.AX', 'SPZ.AX', 'SND.AX', 'SWTZ.AX', 'XF1.AX', 'ATH.AX', 'EBND.AX', 'CD2.AX', 'TI1.AX', 'AGD.AX', 'GAS.AX', 'COB.AX', 'TIP.AX', 'CAN.AX', 'NCC.AX', 'IVZ.AX', 'COS.AX', 'BID.AX', 'APC.AX', 'WOA.AX', 'IBX.AX', 'GCY.AX', 'BNKS.AX', 'ESK.AX', 'GGUS.AX', 'AZS.AX', 'NUS.AX', 'MPP.AX', 'ADA.AX', 'PRT.AX', 'WAA.AX', 'SPY.AX', 'UBN.AX', 'BKY.AX', 'BCB.AX', 'WCG.AX', 'BOT.AX', 'SRK.AX', 'ASP.AX', 'ASH.AX', 'BOL.AX', 'VAN.AX', 'VR1.AX', 'JYC.AX', 'TZN.AX', 'EX1.AX', 'GTG.AX', 'KOV.AX', 'ZYUS.AX', 'AVL.AX', 'HMX.AX', 'TGA.AX', '99L.AX', 'CV1.AX', 'BRU.AX', 'CRW.AX', 'FFI.AX', 'MRC.AX', 'RFX.AX', 'IVX.AX', 'DRO.AX', 'COI.AX', 'ARV.AX', 'RHT.AX', 'VRC.AX', 'ATC.AX', 'EL8.AX', 'MGU.AX', 'AE1.AX', 'ARL.AX', 'LOM.AX', 'C6C.AX', 'CLX.AX', 'ATL.AX', 'QTM.AX', 'CYP.AX', 'RSM.AX', 'SUV.AX', 'SSL.AX', 'NAM.AX', 'MNRS.AX', 'ELT.AX', 'ZNC.AX', 'FEL.AX', 'NML.AX', 'CMP.AX', 'FME.AX', 'RXL.AX', 'SNS.AX', 'PCK.AX', 'TOE.AX', 'AMX.AX', 'LSX.AX', 'HJPN.AX', 'RHI.AX', 'SMN.AX', 'NZO.AX', 'MEC.AX', 'LRS.AX', 'CPV.AX', 'DEM.AX', 'CHM.AX', 'CDX.AX', 'XRF.AX', 'KPT.AX', 'DTS.AX', 'GRNV.AX', 'HRZ.AX', 'NUH.AX', 'CPN.AX', 'ASN.AX', 'AKL.AX', 'MDC.AX', 'IHR.AX', 'DGR.AX', 'OKU.AX', 'TNY.AX', 'TTT.AX', 'HAV.AX', 'CHZ.AX', 'MEI.AX', 'BML.AX', 'KSN.AX', '3DA.AX', 'IBC.AX', 'PTL.AX', 'SWK.AX', 'PEC.AX', 'SMLL.AX', 'DRX.AX', 'FSI.AX', 'ESTX.AX', 'SEN.AX', 'KKO.AX', 'PDZ.AX', 'TSO.AX', 'ICT.AX', 'AUC.AX', 'SEG.AX', 'ETT.AX', 'IIGF.AX', 'KME.AX', 'DBF.AX', 'AVR.AX', 'AOU.AX', 'VEFI.AX', 'ATS.AX', 'PTG.AX', 'BUD.AX', 'FFG.AX', 'TDL.AX', 'PYG.AX', 'CLNE.AX', 'RTE.AX', 'CAY.AX', 'ELS.AX', 'APW.AX', 'MSL.AX', 'DHHF.AX', 'PAL.AX', 'PUR.AX', 'BIS.AX', 'KLA.AX', 'VLS.AX', 'BEAR.AX', 'EMKT.AX', 'INES.AX', 'HRL.AX', 'GBZ.AX', 'CLB.AX', 'QFN.AX', 'STN.AX', 'MOZ.AX', 'AAR.AX', 'SMX.AX', 'BRB.AX', 'YRL.AX', 'EUR.AX', 'PH2.AX', 'ZLD.AX', 'FHS.AX', 'PAF.AX', 'OEC.AX', 'EDE.AX', 'TPD.AX', 'NAC.AX', 'TMT.AX', 'ATR.AX', 'ENR.AX', 'GEN.AX', 'ADS.AX', 'RINC.AX', 'TGH.AX', 'HLTH.AX', 'DME.AX', 'BBL.AX', 'QFE.AX', 'KAI.AX', 'FPC.AX', 'NGY.AX', 'E2M.AX', 'KTG.AX', 'WWG.AX', 'ACB.AX', 'GBE.AX', 'DVDY.AX', 'NWE.AX', 'VMX.AX', 'MAY.AX', 'TMZ.AX', 'REY.AX', 'AQI.AX', 'S66.AX', 'GROW.AX', 'S2R.AX', 'DGH.AX', 'AJQ.AX', 'ESR.AX', 'MSM.AX', 'KZR.AX', 'MEP.AX', 'RNO.AX', 'CNJ.AX', 'LCD.AX', 'DNA.AX', 'EDC.AX', 'CCZ.AX', 'OVT.AX', 'SKF.AX', 'IIND.AX', 'MEM.AX', 'AC8.AX', 'DCG.AX', 'ECL.AX', 'OEL.AX', 'CAD.AX', 'HWK.AX', 'CURE.AX', 'DXB.AX', 'CUE.AX', 'MEU.AX', 'BPH.AX', 'INIF.AX', 'COO.AX', 'CGA.AX', 'LSA.AX', 'RSH.AX', 'HGO.AX', 'EYE.AX', 'HEUR.AX', 'DKM.AX', 'CIW.AX', 'ODY.AX', 'REE.AX', 'FML.AX', 'IME.AX', 'FOOD.AX', 'IHEB.AX', 'LPGD.AX', 'BOND.AX', 'NSB.AX', 'AEI.AX', 'IXC.AX', 'KRR.AX', 'FCT.AX', 'FTZ.AX', 'GFN.AX', 'MTH.AX', 'MOQ.AX', 'CD1.AX', 'DDB.AX', 'AML.AX', '8CO.AX', 'VII.AX', 'PXS.AX', 'RNT.AX', 'RDH.AX', 'FTC.AX', 'BYI.AX', 'AFL.AX', 'RVS.AX', 'CLDD.AX', 'WRM.AX', 'GAL.AX', 'CNQ.AX', 'MKAX.AX', 'XAM.AX', 'BNL.AX', 'LRT.AX', 'AHC.AX', 'RFT.AX', 'HRN.AX', 'EPM.AX', 'TLM.AX', 'CZR.AX', 'VEN.AX', 'MNB.AX', 'ASW.AX', 'EAS.AX', 'LM8.AX', 'ICG.AX', 'SGQ.AX', 'AFA.AX', 'HNG.AX', 'NCL.AX', 'NAG.AX', 'PO3.AX', 'WHK.AX', 'CLE.AX', 'EQR.AX', 'BIT.AX', 'TFL.AX', 'WLD.AX', 'STK.AX', 'DCC.AX', 'CCA.AX', 'TPC.AX', 'CNB.AX', 'AME.AX', 'EME.AX', 'ROG.AX', 'OSL.AX', 'MTC.AX', 'HWH.AX', 'KRM.AX', 'INF.AX', 'QHL.AX', 'STM.AX', 'AUMF.AX', 'AV1.AX', 'DEL.AX', 'OSP.AX', 'PRO.AX', 'EBG.AX', 'ADR.AX', 'PLY.AX', 'WAK.AX', 'MAN.AX', 'AKM.AX', 'ARN.AX', 'SOV.AX', 'AJX.AX', 'KAT.AX', 'BHL.AX', 'LAW.AX', 'RPM.AX', 'WRLD.AX', 'TSL.AX', 'NYR.AX', 'DVN.AX', 'TD1.AX', 'CCE.AX', 'HMD.AX', 'RES.AX', 'EXL.AX', 'GC1.AX', 'KTD.AX', 'EM1.AX', 'RCL.AX', 'ICI.AX', 'FFR.AX', 'SIH.AX', 'VRS.AX', 'SKN.AX', 'MMI.AX', 'RLT.AX', 'JAT.AX', 'IMC.AX', 'TRT.AX', 'WNX.AX', 'VIP.AX', 'RAP.AX', 'CST.AX', 'K2F.AX', 'AR3.AX', 'BAT.AX', 'LKO.AX', 'CHL.AX', 'ACR.AX', 'HFY.AX', 'CAF.AX', 'AUR.AX', 'VBC.AX', 'PGM.AX', 'TON.AX', 'VBS.AX', 'TRY.AX', 'VLUE.AX', 'AVE.AX', 'JAL.AX', 'ERM.AX', 'NTI.AX', 'AON.AX', 'MRL.AX', 'AJL.AX', 'BDA.AX', 'NSX.AX', 'IGE.AX', 'KPO.AX', 'GML.AX', 'MYG.AX', 'DOU.AX', 'ISD.AX', 'MPX.AX', 'MFD.AX', 'OPN.AX', 'ECS.AX', 'HIL.AX', 'AIQ.AX', 'CLZ.AX', 'BWF.AX', 'HSC.AX', 'CTO.AX', 'DJWN.AX', 'HPP.AX', 'MSRD.AX', 'HT8.AX', 'CAE.AX', 'CBL.AX', 'RCP.AX', 'CLA.AX', 'AXI.AX', 'DTR.AX', 'AGS.AX', 'SHP.AX', 'BTN.AX', 'GBR.AX', 'LBT.AX', 'LNU.AX', 'PNC.AX', 'PPL.AX', 'SMG.AX', 'XTE.AX', 'VOL.AX', 'SOP.AX', 'SPA.AX', 'PYR.AX', 'JAY.AX', 'HXG.AX', 'BSR.AX', 'PGY.AX', 'BLY.AX', 'VYS.AX', 'EQX.AX', 'MAG.AX', 'MPA.AX', 'RDM.AX', 'EINC.AX', 'AKG.AX', 'MKR.AX', 'INV.AX', 'IPT.AX', 'MAAT.AX', 'ATU.AX', 'PVE.AX', 'AIV.AX', 'VGMF.AX', 'RDN.AX', 'ARR.AX', 'JNO.AX', 'SSO.AX', 'PFT.AX', 'COY.AX', 'PAA.AX', 'BNZ.AX', 'CG1.AX', 'MVOL.AX', 'BEX.AX', 'SKY.AX', 'MVL.AX', 'YBR.AX', 'EIGA.AX', 'PNX.AX', 'BLG.AX', 'VAL.AX', 'MKG.AX', 'HLX.AX', 'EPN.AX', 'OSX.AX', 'CNW.AX', 'GME.AX', 'AWN.AX', 'CGB.AX', 'GOVT.AX', 'ESS.AX', 'APH.AX', 'WTL.AX', 'VPR.AX', 'DEX.AX', 'GEV.AX', 'HHR.AX', 'EMD.AX', 'TIA.AX', 'HXL.AX', 'TTB.AX', 'FLX.AX', 'EQE.AX', 'BMH.AX', 'ECP.AX', 'EGL.AX', 'CRR.AX', 'WSI.AX', 'AWV.AX', 'CHK.AX', 'GMC.AX', 'TOU.AX', 'IP1.AX', 'TAR.AX', 'MIL.AX', 'CWX.AX', 'ANX.AX', 'TBA.AX', 'VMC.AX', 'PWN.AX', 'FOD.AX', 'ARD.AX', 'CLH.AX', 'FRB.AX', 'SCI.AX', 'AHF.AX', 'VN8.AX', 'VTI.AX', 'AD1.AX', 'PNL.AX', 'GSN.AX', 'GLE.AX', 'EMMG.AX', 'HVM.AX', 'MCT.AX', 'GFL.AX', 'ATX.AX', 'KNO.AX', 'OAR.AX', 'WLS.AX', 'HQLT.AX', 'RWD.AX', 'SKS.AX', 'SGC.AX', 'IBG.AX', 'HYD.AX', 'CLI.AX', '14D.AX', 'EMB.AX', 'CGO.AX', 'GL1.AX', 'INP.AX', 'YTMDO1.AX', 'MAT.AX', 'OKR.AX', 'GLH.AX', 'BGT.AX', 'NGE.AX', 'ACS.AX', 'UCM.AX', 'ASQ.AX', 'QMIX.AX', 'GMR.AX', 'RGS.AX', 'CETF.AX', '9SP.AX', 'MLM.AX', 'MAUCA.AX', 'BDX.AX', 'LMG.AX', 'AZI.AX', 'AGX1.AX', 'TNR.AX', 'EPX.AX', 'KAU.AX', 'TPP.AX', 'ODA.AX', 'SUD.AX', 'ICS.AX', 'SBW.AX', 'CCG.AX', 'AU1.AX', 'TTI.AX', 'ACU.AX', 'BEM.AX', 'MRD.AX', 'MPH.AX', 'SRZ.AX', 'OVN.AX', 'GTE.AX', 'VKA.AX', 'AIR.AX', 'VR8.AX', 'ADY.AX', 'PIL.AX', 'NXM.AX', 'AL3.AX', 'LEL.AX', 'AS1.AX', 'E200.AX', 'FFT.AX', 'SPN.AX', 'AUST.AX', 'ARE.AX', 'ESH.AX', 'PXX.AX', 'PFG.AX', 'PRX.AX', 'SUP.AX', 'TRU.AX', 'SHN.AX', 'IDA.AX', '1AD.AX', 'OLI.AX', 'TV2.AX', 'AUL.AX', 'NUC.AX', 'LIN.AX', 'BCT.AX', 'CGN.AX', 'MM8.AX', 'CI1.AX', 'TAS.AX', 'SPQ.AX', 'EGY.AX', 'FIN.AX', 'FPP.AX', 'FRM.AX', 'CTE.AX', 'AMT.AX', 'TZL.AX', 'GW1.AX', 'ZEU.AX', 'TCF.AX', 'WEMG.AX', 'ADX.AX', 'OEX.AX', 'DCL.AX', 'SCU.AX', 'BUY.AX', 'OLL.AX', 'BTC.AX', 'MGL.AX', 'NDIA.AX', 'LNY.AX', 'ICL.AX', 'JCS.AX', 'HRR.AX', 'KAM.AX', 'TMR.AX', 'CAZ.AX', 'EVE.AX', 'TIN.AX', 'ABX.AX', 'MXO.AX', 'CT1.AX', 'ECG.AX', 'RLG.AX', 'TKM.AX', 'DOR.AX', 'ARO.AX', 'KMT.AX', 'AXP.AX', 'INCM.AX', 'AAU.AX', 'MOB.AX', 'VAR.AX', 'CBE.AX', 'WNR.AX', 'ANL.AX', 'NRX.AX', 'BXN.AX', 'MCM.AX', 'SRJ.AX', 'BPP.AX', 'MMJ.AX', 'BCC.AX', 'UUL.AX', 'MHC.AX', 'YTMAZJ.AX', 'BMG.AX', 'A1G.AX', 'ADV.AX', 'CAV.AX', 'SHE.AX', 'GO2.AX', 'AQD.AX', 'JXT.AX', 'FRX.AX', 'AMO.AX', 'AQN.AX', 'CM8.AX', 'SHG.AX', 'BUX.AX', 'RAG.AX', 'ONX.AX', 'HIQ.AX', 'A1M.AX', 'PG1.AX', 'BOA.AX', 'OGA.AX', 'DDD.AX', 'TPO.AX', 'SCN.AX', 'CY5.AX', 'IMPQ.AX', 'YTMLL1.AX', 'AQX.AX', 'GOAT.AX', 'ENX.AX', 'ADD.AX', 'VIG.AX', 'HCT.AX', 'UCW.AX', 'SNG.AX', 'BIQ.AX', 'LSH.AX', 'OAU.AX', 'CR9.AX', 'ZGL.AX', 'SI6.AX', 'YTMQF3.AX', 'RFR.AX', 'KCC.AX', 'YTMAGL.AX', 'CXM.AX', 'HNR.AX', 'QEM.AX', 'PSL.AX', 'GTI.AX', 'AYI.AX', 'SRN.AX', 'JDR.AX', 'DMC.AX', 'BGD.AX', 'FZR.AX', 'IQ3.AX', 'KWR.AX', 'GMN.AX', 'A3D.AX', 'ELE.AX', 'QSML.AX', 'AUK.AX', 'RGL.AX', 'TYM.AX', 'MPR.AX', 'QML.AX', 'LPE.AX', 'NAE.AX', 'SCL.AX', 'SW1.AX', 'PF1.AX', 'EVZ.AX', 'CXX.AX', 'HAW.AX', 'SE1.AX', '2BE.AX', 'ABV.AX', 'GUL.AX', 'KYK.AX', 'SIX.AX', 'CIO.AX', 'CXZ.AX', 'FIJ.AX', 'ICOR.AX', 'AYM.AX', 'CAG.AX', 'SUH.AX', 'YTMQF2.AX', 'GLV.AX', 'GNM.AX', 'RIM.AX', 'ODM.AX', 'RIE.AX', 'MKL.AX', 'MEB.AX', 'AFR.AX', 'GRL.AX', 'WFL.AX', 'HGL.AX', 'NSM.AX', 'ECT.AX', 'KTA.AX', 'BEE.AX', 'EMU.AX', 'CLT.AX', 'TEG.AX', 'AL8.AX', 'TRN.AX', 'CRS.AX', 'SAU.AX', 'MRQ.AX', 'VMG.AX', 'NC6.AX', 'SHH.AX', 'WEL.AX', 'MCE.AX', 'KBC.AX', 'MSG.AX', 'CXU.AX', 'POU.AX', 'BMM.AX', 'LCE.AX', 'NPM.AX', 'FEI.AX', 'BAR.AX', 'MDI.AX', 'PGD.AX', 'PNN.AX', 'BTR.AX', 'ETPMPM.AX', 'CRL.AX', 'BHYB.AX', 'ZAG.AX', 'WBE.AX', 'KSM.AX', 'FFF.AX', 'AUH.AX', 'RGI.AX', 'TDO.AX', 'DTM.AX', '3MF.AX', 'REZ.AX', 'WC8.AX', 'PTR.AX', 'LLO.AX', 'LSR.AX', 'QGL.AX', 'PNM.AX', 'CNL.AX', 'SLZ.AX', 'DCX.AX', 'PVW.AX', 'AKO.AX', 'NGS.AX', 'ANW.AX', 'DXN.AX', 'GIB.AX', 'ILA.AX', 'AIY.AX', 'MEL.AX', 'SNAS.AX', 'AUDS.AX', 'CSE.AX', 'R3D.AX', 'LHM.AX', 'CRB.AX', 'TRL.AX', 'BPM.AX', 'CR1.AX', 'BYH.AX', 'SMI.AX', 'CVS.AX', 'GSM.AX', 'NNG.AX', 'LIO.AX', 'AGR.AX', 'WGR.AX', 'DM1.AX', 'EN1.AX', 'RMX.AX', 'SHO.AX', 'RML.AX', 'BUR.AX', 'WML.AX', 'VMIN.AX', 'SIV.AX', '1AG.AX', 'FDM.AX', 'PUA.AX', 'KGM.AX', 'CF1.AX', 'ALT.AX', 'SGI.AX', '92E.AX', 'ID8.AX', 'KFE.AX', 'AQC.AX', 'TCO.AX', 'NME.AX', 'CBY.AX', 'NTL.AX', 'SCT.AX', 'VIC.AX', 'ACP.AX', 'SER.AX', 'CFO.AX', 'IESG.AX', 'AMD.AX', 'IKW.AX', 'KGD.AX', 'GES.AX', 'GTR.AX', 'ERL.AX', 'AFW.AX', 'YTMDX1.AX', 'FG1.AX', 'CYQ.AX', 'XST.AX', 'BNR.AX', 'FNX.AX', 'MBK.AX', 'TSC.AX', 'LV1.AX', 'MRR.AX', 'ANR.AX', 'RCR.AX', 'MXR.AX', 'AGC.AX', 'EFE.AX', 'AJJ.AX', 'NKL.AX', 'BMO.AX', 'CDY.AX', 'ICE.AX', 'PSA.AX', 'ZMM.AX', 'TMS.AX', 'PVL.AX', 'PKO.AX', 'GGX.AX', 'OLH.AX', 'CAQ.AX', 'HPR.AX', 'YANK.AX', 'YPB.AX', 'CZL.AX', 'BDG.AX', 'AUQ.AX', 'SRI.AX', 'KP2.AX', 'ATP.AX', 'ERG.AX', 'YTMQF1.AX', 'AAP.AX', 'GOO.AX', 'GED.AX', 'YOW.AX', 'CDT.AX', 'AUN.AX', 'SP3.AX', 'ALY.AX', 'PPY.AX', 'AGN.AX', 'PHL.AX', 'BLZ.AX', 'KLO.AX', 'OOK.AX', 'ORM.AX', 'DC2.AX', 'DVL.AX', 'TMG.AX', 'EAX.AX', 'SRY.AX', 'PCL.AX', 'FGL.AX', 'ESE.AX', 'ICN.AX', 'EEU.AX', 'RXH.AX', '1ST.AX', 'MHK.AX', 'NWM.AX', 'FFC.AX', 'ZMI.AX', 'BEL.AX', 'CZN.AX', 'TOR.AX', 'DDT.AX', 'QXR.AX', 'RDS.AX', 'IYLD.AX', 'DAF.AX', 'SIS.AX', 'TMK.AX', 'MLS.AX', 'IS3.AX', 'MR1.AX', 'OPL.AX', 'SIT.AX', 'BAS.AX', 'PRM.AX', 'MRZ.AX', 'RBR.AX', 'FAU.AX', 'THR.AX', 'AKN.AX', 'PGO.AX', 'CUL.AX', 'LITCF.AX', 'AJY.AX', 'RAS.AX', 'DZZF.AX', 'SRH.AX', 'PAM.AX', 'M2R.AX', 'ENT.AX', 'RLC.AX', 'KOR.AX', 'BHD.AX', 'MRG.AX', 'FNT.AX', 'NVU.AX', 'NZS.AX', 'TG1.AX', 'TYX.AX', 'HHI.AX', 'KNM.AX', 'WOO.AX', 'SBR.AX', 'OZM.AX', 'CPT.AX', 'TKL.AX', 'AER.AX', 'EMT.AX', 'ENV.AX', 'LCT.AX', 'HHM.AX', 'AUA.AX', 'N1H.AX', 'TML.AX', 'ERW.AX', 'CL8.AX', 'IND.AX', 'WCN.AX', 'AHN.AX', 'YTMMG2.AX', 'CDR.AX', 'SVS.AX', 'PRS.AX', 'AQS.AX', 'MOH.AX', 'YTMGP1.AX', 'G88.AX', 'OXX.AX', 'AEV.AX', 'AVW.AX', 'BCA.AX', 'MSI.AX', 'M24.AX', 'MQR.AX', 'VIA.AX', 'DGGF.AX', 'AWJ.AX', 'ICR.AX', 'RNE.AX', 'IDZ.AX', 'CHR.AX', 'IGN.AX', 'PAK.AX', 'TMX.AX', '1VG.AX', 'DBBF.AX', 'EMP.AX', 'ROO.AX', 'AX8.AX', 'DLT.AX', 'DTI.AX', 'APG.AX', 'ETPMPT.AX', 'DET.AX', 'KFM.AX', 'NES.AX', 'YTMF11.AX', 'YTMVC1.AX', 'JTL.AX', 'HCD.AX', 'RNX.AX', 'AM7.AX', 'NCR.AX', 'RMG.AX', 'SFM.AX', 'XTC.AX', 'OEQ.AX', 'ETPMPD.AX', 'AUP.AX', 'DLC.AX', 'NMR.AX', 'TTA.AX', 'AS2.AX', 'IPB.AX', 'MAX.AX', 'JPR.AX', 'FGO.AX', 'IPC.AX', 'CML.AX', 'YTMMGR.AX', 'KEY.AX', 'POW.AX', 'CAU.AX', 'AAJ.AX', 'GLA.AX', 'MMG.AX', 'LDR.AX', 'SYT.AX', 'NXE.AX', 'AO1.AX', 'TEM.AX', 'POL.AX', 'VOR.AX', 'RBX.AX', 'M3M.AX', 'WSR.AX', 'SIL.AX', 'TPS.AX', 'HMI.AX', 'SAN.AX', 'FE8.AX', 'YTMSG2.AX', 'YTMAPA.AX', 'WMG.AX', 'YTMWE1.AX', 'LNAS.AX', 'DMG.AX', 'FTT.AX', 'EZZ.AX', 'YTMAP1.AX', 'LKY.AX', 'ARC.AX', 'TRM.AX', 'YTMDX2.AX', 'RAN.AX', 'MHI.AX', 'RMI.AX', 'A8G.AX', 'MTM.AX', 'GPS.AX', 'IMS.AX', 'RD1.AX', 'UUV.AX', 'MEG.AX', 'NOR.AX', 'CRM.AX', 'YTMAST.AX', 'CWL.AX', 'ALB.AX', 'APV.AX', 'LML.AX', 'WNB.AX', 'CMD.AX', 'OKJ.AX', 'MTB.AX', 'IEQ.AX', 'YTMTL1.AX', 'YTMSG1.AX', 'YTMVCX.AX', 'OZZ.AX', 'MTR.AX', 'M8S.AX', 'GGE.AX', 'PKD.AX', 'GGOV.AX', 'KLR.AX', 'YTMF15.AX', 'HHY.AX', 'KKL.AX', 'IEC.AX', 'NSE.AX', 'YTMTCL.AX', 'EXO.AX', 'YTMTL2.AX', 'YTMTLS.AX', 'OAK.AX', 'YTMNA1.AX', 'AOA.AX', 'T3D.AX', 'YTMQF4.AX', 'YTMORG.AX', 'HOR.AX', 'BIR.AX', 'YTMF10.AX', 'YTMAS2.AX', 'LVE.AX', 'AXT.AX', 'YTMF17.AX', 'MCX.AX', 'AGJ.AX', 'MMR.AX', 'FOS.AX', 'YTMMQ1.AX', 'YTMDX3.AX', 'ADEF.AX', 'NXG.AX', 'YTMALD.AX', 'RMT.AX', 'YTMF14.AX', 'GCR.AX', 'RPG.AX', 'TNP.AX', 'AHK.AX', 'YTMDO2.AX', 'YTMF07.AX', 'YTMBH1.AX', 'QUE.AX', 'YTMIP1.AX', 'TTL.AX', 'YTMF16.AX', 'ATM.AX', 'PBX.AX', 'CGM.AX', 'AIB.AX', 'YTMF13.AX', 'YTMWB1.AX', 'YTMANZ.AX', 'TOM.AX', 'YTMSG3.AX', 'E2E.AX', 'PCH.AX', 'LAM.AX', 'QTG.AX', 'EMUCA.AX', 'ABL.AX', 'REF.AX', 'CDH.AX', 'GMNR.AX', 'KNH.AX', 'CINPA.AX', 'YTMSCP.AX', 'GMER.AX', 'NESR.AX', 'SSLPA.AX', 'WHFPA.AX']
# 694  crypto stocks crypto-USD - execution time is 11min
#crypto_stocks=['BTC-USD', 'ETH-USD', 'ADA-USD', 'BNB-USD', 'USDT-USD', 'XRP-USD', 'SOL-USD', 'DOT-USD', 'DOGE-USD', 'USDC-USD', 'UNI-USD', 'LUNA-USD', 'AVAX-USD', 'LINK-USD', 'BUSD-USD', 'LTC-USD', 'BCH-USD', 'ALGO-USD', 'WBTC-USD', 'ICP-USD', 'MATIC-USD', 'FIL-USD', 'TRX-USD', 'ATOM-USD', 'FTT-USD', 'XLM-USD', 'ETC-USD', 'VET-USD', 'DAI-USD', 'THETA-USD', 'XTZ-USD', 'EGLD-USD', 'AAVE-USD', 'CAKE-USD', 'CRO-USD', 'EOS-USD', 'XMR-USD', 'XEC-USD', 'HBAR-USD', 'QNT-USD', 'MIOTA-USD', 'AXS-USD', 'BTCB-USD', 'GRT-USD', 'NEAR-USD', 'NEO-USD', 'SHIB-USD', 'KSM-USD', 'FTM-USD', 'KLAY-USD', 'WAVES-USD', 'BSV-USD', 'LEO-USD', 'MKR-USD', 'BTT-USD', 'UST-USD', 'HT-USD', 'COMP-USD', 'RUNE-USD', 'DASH-USD', 'AMP-USD', 'CHZ-USD', 'HNT-USD', 'DCR-USD', 'STX-USD', 'SUSHI-USD', 'AR-USD', 'ZEC-USD', 'ONE-USD', 'REV-USD', 'HOT-USD', 'XEM-USD', 'TFUEL-USD', 'SNX-USD', 'CELO-USD', 'XDC-USD', 'MANA-USD', 'TUSD-USD', 'ENJ-USD', 'MINA-USD', 'ICX-USD', 'ZIL-USD', 'CEL-USD', 'CRV-USD', 'IOST-USD', 'YFI-USD', 'QTUM-USD', 'OMG-USD', 'FLOW-USD', 'BTG-USD', 'ZEN-USD', 'AUDIO-USD', 'BAT-USD', 'OKB-USD', 'RVN-USD', 'MDX-USD', 'PERP-USD', 'TEL-USD', 'REN-USD', 'BNT-USD', 'KCS-USD', 'USDP-USD', 'NEXO-USD', 'ZRX-USD', 'SC-USD', 'RAY-USD', 'ONT-USD', 'DGB-USD', 'UMA-USD', 'NANO-USD', 'ANKR-USD', 'RENBTC-USD', 'SAND-USD', 'CHSB-USD', 'CELR-USD', 'FET-USD', 'IOTX-USD', 'LRC-USD', 'BAKE-USD', '1INCH-USD', 'KAVA-USD', 'ERG-USD', 'VGX-USD', 'RSR-USD', 'GLM-USD', 'SKL-USD', 'USDN-USD', 'OCEAN-USD', 'SXP-USD', 'SRM-USD', 'WAXP-USD', 'XDB-USD', 'DENT-USD', 'ALPHA-USD', 'HUSD-USD', 'UBT-USD', 'LSK-USD', 'NMR-USD', 'XYO-USD', 'STORJ-USD', 'FEI-USD', 'CKB-USD', 'ELF-USD', 'POLY-USD', 'GNO-USD', 'AGIX-USD', 'MED-USD', 'WIN-USD', 'XVG-USD', 'LPT-USD', 'BCD-USD', 'GT-USD', 'OGN-USD', 'VTHO-USD', 'ARDR-USD', 'WRX-USD', 'ROSE-USD', 'XVS-USD', 'INJ-USD', 'STRAX-USD', 'CVC-USD', 'DAG-USD', 'SNT-USD', 'ASD-USD', 'ALICE-USD', 'STMX-USD', 'BAND-USD', 'EWT-USD', 'COTI-USD', 'ORBS-USD', 'REEF-USD', 'RLC-USD', 'VLX-USD', 'WOO-USD', 'PAXG-USD', 'ONG-USD', 'PROM-USD', 'HIVE-USD', 'REP-USD', 'PHA-USD', 'NKN-USD', 'CTSI-USD', 'CFX-USD', 'OXT-USD', 'STEEM-USD', 'CSPR-USD', 'NOIA-USD', 'ARK-USD', 'MAID-USD', 'FUN-USD', 'ANT-USD', 'JST-USD', 'NU-USD', 'BTCST-USD', 'MTL-USD', 'MVL-USD', 'MLN-USD', 'REQ-USD', 'BADGER-USD', 'GUSD-USD', 'HEX-USD', 'BCHA-USD', 'STETH-USD', 'WBNB-USD', 'CTC-USD', 'HBTC-USD', 'CCXX-USD', 'EGR-USD', 'TTT-USD', 'YOUC-USD', 'SAFEMOON-USD', 'DYDX-USD', 'NXM-USD', 'INO-USD', 'DFI-USD', 'GALA-USD', 'OMI-USD', 'vBNB-USD', 'XYM-USD', 'XWC-USD', 'LUSD-USD', 'C98-USD', 'MOVR-USD', 'ARRR-USD', 'XPRT-USD', 'ETN-USD', 'YGG-USD', 'ANC-USD', 'AKT-USD', 'TWT-USD', 'PUNDIX-USD', 'BIT-USD', 'MBOX-USD', 'MNGO-USD', 'ORC-USD', 'ALT-USD', 'SDN-USD', 'TITAN-USD', 'ORN-USD', 'KNC-USD', 'RPL-USD', 'ILV-USD', 'XCH-USD', 'FRAX-USD', 'BEST-USD', 'HEDG-USD', 'KOK-USD', 'TRIBE-USD', 'ZLW-USD', 'LYXe-USD', 'FIDA-USD', 'CVX-USD', 'IDEX-USD', 'KEEP-USD', 'MIR-USD', 'ALBT-USD', 'BFC-USD', 'ATLAS-USD', 'KDA-USD', 'PEAK-USD', 'ACH-USD', 'DAWN-USD', 'TLOS-USD', 'TKO-USD', 'PLA-USD', 'AGLD-USD', 'PAC-USD', 'EPS-USD', 'RLY-USD', 'ATA-USD', 'WEMIX-USD', 'UOS-USD', 'TLM-USD', 'MASK-USD', 'DVPN-USD', 'vBTC-USD', 'TOMO-USD', 'SOLO-USD', 'LGCY-USD', 'LINA-USD', 'C20-USD', 'RAD-USD', 'BANANA-USD', 'BAL-USD', 'SAPP-USD', 'AVA-USD', 'SLIM-USD', 'SUN-USD', 'POWR-USD', 'SLP-USD', 'RIF-USD', 'POLIS-USD', 'SUSD-USD', 'RNDR-USD', 'DERO-USD', 'HTR-USD', 'YFII-USD', 'WAN-USD', 'UTK-USD', 'DDX-USD', 'STRK-USD', 'BORA-USD', 'CLV-USD', 'SYS-USD', 'MATH-USD', 'ALPACA-USD', 'API3-USD', 'DODO-USD', 'CVN-USD', 'IQ-USD', 'DKA-USD', 'NWC-USD', 'ERN-USD', 'QUICK-USD', 'KIN-USD', 'ZKS-USD', 'LOOM-USD', 'BTS-USD', 'IRIS-USD', 'VRA-USD', 'CORE-USD', 'MX-USD', 'vXVS-USD', 'QKC-USD', 'CHR-USD', 'RAMP-USD', 'KAI-USD', 'RKN-USD', 'ZB-USD', 'SWAP-USD', 'vETH-USD', 'META-USD', 'RGT-USD', 'TRAC-USD', 'TPT-USD', 'RARE-USD', 'POLS-USD', 'LDO-USD', 'SCRT-USD', 'KMD-USD', 'MOF-USD', 'KLV-USD', 'HXRO-USD', 'GTC-USD', 'TVK-USD', 'USDX-USD', 'UQC-USD', 'MCO-USD', 'SFP-USD', 'FARM-USD', 'HNS-USD', 'WOZX-USD', 'MFT-USD', 'OXY-USD', 'FORTH-USD', 'WNXM-USD', 'RVP-USD', 'TRB-USD', 'LIT-USD', 'ABBC-USD', 'SNL-USD', 'ROOK-USD', 'XNC-USD', 'PNK-USD', 'BLCT-USD', 'CTK-USD', 'BTM-USD', 'BOND-USD', 'EUM-USD', 'PPT-USD', 'RARI-USD', 'HEGIC-USD', 'DNT-USD', 'CREAM-USD', 'CFG-USD', 'MONA-USD', 'AMPL-USD', 'WHALE-USD', 'EURS-USD', 'DPR-USD', 'LON-USD', 'ANY-USD', 'BZRX-USD', 'ELA-USD', 'DVI-USD', 'GAS-USD', 'KAR-USD', 'UPP-USD', 'BEL-USD', 'TT-USD', 'WILD-USD', 'SURE-USD', 'BNANA-USD', 'STAKE-USD', 'NYE-USD', 'vUSDC-USD', 'CRE-USD', 'SUKU-USD', 'aEth-USD', 'DIVI-USD', 'DIVI-USD', 'RBTC-USD', 'MLK-USD', 'AKRO-USD', 'GHST-USD', 'VAI-USD', 'NFTX-USD', 'MRPH-USD', 'SDAO-USD', 'eRSDL-USD', 'PSG-USD', 'NRG-USD', 'WTC-USD', 'SHFT-USD', 'EXRD-USD', 'NRV-USD', 'ARPA-USD', 'VID-USD', 'ALCX-USD', 'XOR-USD', 'CHESS-USD', 'FLM-USD', 'AION-USD', 'FIRO-USD', 'XHV-USD', 'HUNT-USD', 'CENNZ-USD', 'HYDRA-USD', 'DAO-USD', 'LTO-USD', 'KP3R-USD', 'MXC-USD', 'DAD-USD', 'CRU-USD', 'FX-USD', 'AERGO-USD', 'RDD-USD', 'LTX-USD', 'DFA-USD', 'STPT-USD', 'FRONT-USD', 'DOCK-USD', 'REV-USD', 'XCP-USD', 'BURGER-USD', 'STRONG-USD', 'VRSC-USD', 'TROY-USD', 'RFR-USD', 'DMCH-USD', 'FIO-USD', 'DG-USD', 'MTV-USD', 'AQT-USD', 'QC-USD', 'CDT-USD', 'BASIC-USD', 'PCX-USD', 'ADX-USD', 'SBD-USD', 'FOR-USD', 'NSBT-USD', 'QI-USD', 'BEAM-USD', 'CITY-USD', 'AUCTION-USD', 'SHR-USD', 'DRGN-USD', 'APL-USD', 'MITH-USD', 'SPARTA-USD', 'UNFI-USD', 'NULS-USD', 'FRM-USD', 'MASS-USD', 'NXS-USD', 'MAPS-USD', 'IHF-USD', 'GLCH-USD', 'GXC-USD', 'ALEPH-USD', 'FO-USD', 'CVP-USD', 'FSN-USD', 'CUDOS-USD', 'IDIA-USD', 'EPK-USD', 'SOC-USD', 'DX-USD', 'REVV-USD', 'CET-USD', 'LQTY-USD', 'KYL-USD', 'PEPECASH-USD', 'AST-USD', 'PERL-USD', 'BOSON-USD', 'XPR-USD', 'ASK-USD', 'VIDT-USD', 'QQQ-USD', 'PLTC-USD', 'VSYS-USD', 'ULT-USD', 'LA-USD', 'AE-USD', 'VITE-USD', 'SLT-USD', 'DEXE-USD', 'HOGE-USD', 'AMO-USD', 'SPI-USD', 'SKEY-USD', 'DXL-USD', 'HIBS-USD', 'FWT-USD', 'CTXC-USD', 'BNK-USD', 'ASTA-USD', 'MBL-USD', 'VERI-USD', 'MUSD-USD', 'NEST-USD', 'KEY-USD', 'SAFE-USD', 'CELL-USD', 'HAI-USD', 'WING-USD', 'AHT-USD', 'STAX-USD', 'PUSH-USD', 'NAFT-USD', 'PNT-USD', 'FXF-USD', 'GO-USD', 'VEE-USD', 'KRT-USD', 'DSLA-USD', 'XSGD-USD', 'SRK-USD', 'XED-USD', 'STC-USD', 'KAN-USD', 'AIOZ-USD', 'RDN-USD', 'ID-USD', 'HC-USD', 'GET-USD', 'ANJ-USD', 'HPT-USD', 'CUMMIES-USD', 'VRT-USD', 'QSP-USD', 'MWC-USD', 'RING-USD', 'PHB-USD', 'NIM-USD', 'ARIA20-USD', 'GTO-USD', 'SLRS-USD', 'CGG-USD', 'SOLVE-USD', 'LOTTO-USD', 'BOA-USD', 'BMI-USD', 'BAX-USD', 'ACM-USD', 'WICC-USD', 'CND-USD', 'SNY-USD', 'CLT-USD', 'VTC-USD', 'GAL-USD', 'PAI-USD', 'ATM-USD', 'ZANO-USD', 'PKF-USD', 'SOCKS-USD', 'CARD-USD', 'LAT-USD', 'JGN-USD', 'VEGA-USD', 'VAL-USD', 'SPS-USD', 'ELON-USD', 'vUSDT-USD', 'RAI-USD', 'mNFLX-USD', 'mTWTR-USD', 'GOC-USD', 'DEP-USD', 'TON-USD', 'PPC-USD', 'BTSE-USD', 'PART-USD', 'mUSO-USD', 'DIGG-USD', 'FOAM-USD', 'NEX-USD', 'HEZ-USD', 'QASH-USD', 'MSB-USD', 'PPAY-USD', 'INSUR-USD', 'XCUR-USD', 'URUS-USD', 'MAKI-USD', 'LBC-USD', 'NEBL-USD', 'LABS-USD', 'QTCON-USD', 'LAMB-USD', 'DBC-USD', 'TEMCO-USD', 'UBX-USD', 'ENQ-USD', 'EL-USD', 'TONE-USD', 'SIGNA-USD', 'UPUNK-USD', 'PICKLE-USD', 'ESD-USD', 'mIAU-USD', 'BMON-USD', 'TMTG-USD', 'HERO-USD', 'DORA-USD', 'XSN-USD', 'WEST-USD', 'CLO-USD', 'ORAI-USD', 'XRT-USD', 'LITH-USD', 'SKILL-USD', 'VIDY-USD', 'MRX-USD', 'ZASH-USD', 'ONE-USD', 'RFUEL-USD', 'NCASH-USD', 'EVZ-USD', 'POOLZ-USD', 'ATT-USD', 'DEC-USD', 'FIS-USD', 'ASR-USD', 'TULIP-USD', 'ERC20-USD', 'vLINK-USD', 'ERC20-USD', 'vLINK-USD', 'CFi-USD', 'LAYER-USD', 'NXT-USD', 'ZEE-USD', 'ABT-USD', 'RSTR-USD', 'EUNO-USD', 'MPH-USD', 'DOV-USD', 'KDAG-USD', 'GHX-USD', 'SIX-USD', 'FB-USD', 'HAPI-USD', 'BOR-USD', 'MUSH-USD', 'DDIM-USD', 'mVIXY-USD', 'IDV-USD', 'KONO-USD', 'SWINGBY-USD', 'ARMOR-USD', 'ZAP-USD', 'CWV-USD', 'HYVE-USD', 'PLC-USD', 'DUCK-USD', 'ALY-USD', 'SPC-USD', 'EMC2-USD', 'EGT-USD', 'POA-USD', 'XFT-USD', 'PLR-USD', 'DLT-USD', 'DMD-USD', 'MTRG-USD', 'VPP-USD', 'MUSE-USD', 'LYM-USD', 'HELMET-USD', 'LBTC-USD', 'UIP-USD']
#don't use them 2626 ETFs - execution time is 52min
# don't use them #etf_stocks=['SPY', 'IVV', 'VTI', 'VOO', 'QQQ', 'VEA', 'IEFA', 'AGG', 'VUG', 'VTV', 'VWO', 'IEMG', 'BND', 'IWF', 'IJR', 'IWM', 'IJH', 'VIG', 'EFA', 'GLD', 'IWD', 'VO', 'VGT', 'VXUS', 'VB', 'VCIT', 'XLK', 'BNDX', 'VNQ', 'ITOT', 'LQD', 'XLF', 'VCSH', 'BSV', 'VYM', 'IVW', 'VEU', 'TIP', 'XLV', 'SCHX', 'IXUS', 'EEM', 'IWB', 'DIA', 'IWR', 'RSP', 'SCHF', 'IAU', 'USMV', 'SCHD', 'VV', 'IGSB', 'MBB', 'QUAL', 'VBR', 'VT', 'MUB', 'IVE', 'XLE', 'ESGU', 'SCHB', 'EMB', 'ARKK', 'VGK', 'MDY', 'DGRO', 'PFF', 'XLY', 'SCHP', 'SDY', 'HYG', 'SHY', 'DVY', 'JPST', 'XLI', 'VXF', 'TLT', 'ACWI', 'SCHA', 'SCHG', 'VBK', 'IWP', 'VHT', 'VLUE', 'VTIP', 'GOVT', 'XLC', 'SCZ', 'IWN', 'IUSB', 'EFV', 'VMBS', 'MTUM', 'BIV', 'VOE', 'SPYG', 'TQQQ', 'SHV', 'IWS', 'MINT', 'DFAC', 'VTEB', 'GSLC', 'XLU', 'IEF', 'GDX', 'VGSH', 'XLP', 'SLV', 'EWJ', 'EFG', 'IUSG', 'SPYV', 'MGK', 'SPLG', 'IWV', 'BIL', 'FVD', 'SPDW', 'IWO', 'IGIB', 'VOT', 'IEI', 'IBB', 'FDN', 'VFH', 'IUSV', 'VSS', 'SCHM', 'SCHV', 'BBJP', 'SCHE', 'JNK', 'SCHZ', 'SCHO', 'BBEU', 'NOBL', 'IYW', 'EFAV', 'IJJ', 'IHI', 'IJS', 'FTCS', 'OEF', 'EZU', 'SPLV', 'IJK', 'ARKG', 'USHY', 'XLB', 'VGIT', 'SPSB', 'KWEB', 'EWT', 'FPE', 'IYR', 'SOXX', 'SRLN', 'PGX', 'FNDX', 'VONG', 'HDV', 'XBI', 'ESGE', 'FNDF', 'HYLB', 'CWB', 'ESGD', 'LMBS', 'MOAT', 'FLOT', 'VCR', 'BKLN', 'VOOG', 'SPAB', 'STIP', 'SKYY', 'IDEV', 'FTEC', 'SCHH', 'DGRW', 'INDA', 'IJT', 'MCHI', 'VONV', 'SMH', 'PDBC', 'USIG', 'ICLN', 'BLV', 'ISTB', 'DFAT', 'SUB', 'IXN', 'SPEM', 'VTWO', 'EWY', 'SPIB', 'VDC', 'DFUS', 'BBCA', 'ICSH', 'GUNR', 'RDVY', 'VPL', 'ARKW', 'VCLT', 'SPTM', 'AAXJ', 'IGV', 'SHYG', 'QLD', 'IEUR', 'PRF', 'FIXD', 'VIS', 'ACWV', 'VNQI', 'ANGL', 'EWZ', 'AMLP', 'VPU', 'FNDE', 'VDE', 'FXI', 'ESGV', 'SJNK', 'SHM', 'CIBR', 'LIT', 'SPYD', 'NEAR', 'VOX', 'SPMD', 'FNDA', 'SSO', 'GLDM', 'ONEQ', 'XSOE', 'GDXJ', 'ACWX', 'PAVE', 'MGV', 'IDV', 'KRE', 'XLRE', 'SPTL', 'FTSM', 'BOND', 'QYLD', 'IWY', 'MGC', 'DBEF', 'EWC', 'SPSM', 'BBAX', 'XT', 'SPMB', 'DFAS', 'VIGI', 'IQLT', 'IAGG', 'SLYV', 'SUSL', 'SCHR', 'HYD', 'SCHC', 'QTEC', 'EEMV', 'USSG', 'VAW', 'IGM', 'SUSA', 'BBIN', 'SOXL', 'TFI', 'EMLC', 'ARKF', 'JEPI', 'EWU', 'IOO', 'SPTS', 'JETS', 'DSI', 'IXJ', 'FALN', 'RPG', 'REET', 'IVOL', 'SPHQ', 'TAN', 'SPTI', 'GSIE', 'FAS', 'KBE', 'DLN', 'IGF', 'TOTL', 'VWOB', 'IXG', 'IYH', 'HEFA', 'SPHD', 'GSY', 'XOP', 'SPIP', 'DON', 'FHLC', 'FEZ', 'BOTZ', 'EWG', 'KBWB', 'PCY', 'FNDC', 'UPRO', 'RYT', 'ITA', 'SPXL', 'FV', 'VNLA', 'NFRA', 'VYMI', 'ARKQ', 'FXL', 'TECL', 'COMT', 'FTSL', 'USO', 'IGLB', 'QCLN', 'AIA', 'ICF', 'VONE', 'RPV', 'SLQD', 'IYG', 'PZA', 'FLRN', 'EPP', 'VSGX', 'GVI', 'ASHR', 'HACK', 'DBC', 'VGLT', 'BSCM', 'JHMM', 'FMB', 'SGOL', 'PFFD', 'SLYG', 'VOOV', 'BAB', 'USRT', 'DGS', 'HYLS', 'AMJ', 'OIH', 'IYF', 'ITB', 'GNR', 'ILCG', 'XLG', 'IYE', 'JMST', 'PBUS', 'IEV', 'KOMP', 'HEDJ', 'BSCN', 'SCHK', 'EMLP', 'FBND', 'FPX', 'USMC', 'PHO', 'RODM', 'DEM', 'HYS', 'PRFZ', 'FREL', 'FXD', 'PTLC', 'VRP', 'AOR', 'ITM', 'ROBO', 'QQQM', 'GBIL', 'CMF', 'RWR', 'PULS', 'FBT', 'PDP', 'DXJ', 'CWI', 'PBW', 'XHB', 'GXC', 'PKW', 'ICVT', 'FNCL', 'PGF', 'FXR', 'DES', 'HYMB', 'XME', 'FTGC', 'AOM', 'TILT', 'VIOO', 'SLY', 'SQQQ', 'IYY', 'MDYG', 'RWO', 'OMFL', 'IYJ', 'TDIV', 'FDL', 'IBDO', 'FXH', 'BSCO', 'BBMC', 'SRVR', 'QDF', 'FDIS', 'JPHY', 'BSCL', 'FLCB', 'EUFN', 'EWL', 'PSC', 'RSX', 'IBDN', 'AVUV', 'IYT', 'URTH', 'TLH', 'DLS', 'CQQQ', 'PXH', 'AOA', 'EAGG', 'TBT', 'IXC', 'PSK', 'TNA', 'AVUS', 'MDYV', 'REM', 'EWA', 'IBDP', 'RPAR', 'IVOO', 'TDTT', 'SH', 'BBRE', 'XMLV', 'LCTU', 'GEM', 'IBDM', 'ILF', 'FXO', 'IYC', 'PEJ', 'FINX', 'EBND', 'HYEM', 'QQEW', 'CLOU', 'WCLD', 'EMQQ', 'VIOV', 'EDV', 'FIW', 'IMCG', 'FTC', 'FIVG', 'EMXC', 'VUSB', 'GSG', 'IWC', 'PTBD', 'FPXI', 'BLOK', 'IPAY', 'PXF', 'SPHB', 'XAR', 'LRGF', 'QLTA', 'SPYX', 'QQQJ', 'FEX', 'FLQL', 'IHF', 'IAT', 'PPLT', 'IWX', 'IGOV', 'LDUR', 'DIAL', 'DFAU', 'CGW', 'IBDQ', 'SDOG', 'MJ', 'IPAC', 'EWW', 'IVLU', 'SIL', 'FDVV', 'DRIV', 'MOO', 'XSLV', 'XSD', 'VTHR', 'NXTG', 'FUTY', 'UCO', 'IHDG', 'NULV', 'UVXY', 'PICK', 'FTXR', 'ESML', 'PNQI', 'USFR', 'JAGG', 'AGGY', 'AVDV', 'FTA', 'XRT', 'HTRB', 'UITB', 'BAR', 'HNDL', 'CRBN', 'STPZ', 'BSCP', 'REMX', 'SMLF', 'VTWV', 'FNX', 'RWL', 'PFXF', 'FLCO', 'ROM', 'NUSC', 'EWH', 'AVDE', 'IWL', 'CXSE', 'REGL', 'COPX', 'RYH', 'IYM', 'SUSB', 'BWX', 'IBUY', 'GLTR', 'VXX', 'QUS', 'FCOM', 'CFO', 'SIVR', 'SPLB', 'SDIV', 'IGHG', 'AOK', 'SECT', 'DTD', 'PCEF', 'MLPA', 'CDC', 'PEY', 'INTF', 'EPI', 'URA', 'ACES', 'RWX', 'ILCB', 'UDOW', 'XMMO', 'GTO', 'IVOG', 'FYX', 'BSJM', 'AGZ', 'KSA', 'TIPX', 'IAI', 'IMCB', 'ONLN', 'JPIN', 'EEMA', 'UYG', 'IMTM', 'LDEM', 'SWAN', 'AVEM', 'MXI', 'GWX', 'SMMV', 'DBA', 'FENY', 'JVAL', 'FIDU', 'NULG', 'IDU', 'GSEW', 'DVYE', 'PHB', 'REZ', 'FSTA', 'QEFA', 'CORP', 'PWB', 'SUSC', 'SILJ', 'SMDV', 'XHE', 'CMBS', 'QAI', 'HDEF', 'DHS', 'NUGT', 'PTNQ', 'IVOV', 'DRSK', 'BUG', 'GUSH', 'IGBH', 'KOKU', 'KRBN', 'TDSC', 'GIGB', 'QVML', 'KBA', 'COWZ', 'SGOV', 'DJP', 'JMBS', 'ILCV', 'EMGF', 'IBDR', 'EWQ', 'MSOS', 'SNPE', 'HYDW', 'JHML', 'EZM', 'BCI', 'LVHD', 'PWV', 'RCD', 'HEZU', 'MNA', 'VTC', 'INDY', 'JHEM', 'OUSA', 'VTWG', 'XNTK', 'IDLV', 'RDIV', 'CNYA', 'BBUS', 'ESPO', 'IYK', 'EWP', 'FLTR', 'LTPZ', 'JPUS', 'SPGP', 'CFA', 'MLPX', 'TLTD', 'PSI', 'IFRA', 'TDTF', 'PPA', 'CHIQ', 'ONEY', 'CLTL', 'MUNI', 'INFL', 'EWX', 'EQAL', 'BSJN', 'IHAK', 'DWX', 'PFM', 'LABU', 'OGIG', 'DIV', 'FLJP', 'DIVO', 'SCHJ', 'DWM', 'DBEU', 'GMF', 'EWS', 'KXI', 'IQDF', 'TBF', 'SDS', 'RWJ', 'IAUM', 'LCTD', 'SPXU', 'LGLV', 'EDOC', 'UCON', 'LQDH', 'EWD', 'DFAI', 'BBH', 'NUSI', 'PID', 'EPS', 'ERUS', 'NTSX', 'SIZE', 'URNM', 'EES', 'ARKX', 'XSW', 'PSQ', 'HEWJ', 'BSCQ', 'EWI', 'CATH', 'VIOG', 'BNDW', 'ONEV', 'SDG', 'SPGM', 'DMRL', 'VNM', 'FEP', 'AGQ', 'GRID', 'HERO', 'DTN', 'JNUG', 'SMMU', 'BSJL', 'NYF', 'LEMB', 'FEM', 'JHMD', 'FGD', 'TMFC', 'IPO', 'PTH', 'PRNT', 'PWZ', 'HAUZ', 'FMAT', 'IBDS', 'ERX', 'PSJ', 'PSCH', 'FM', 'XYLD', 'RING', 'OUNZ', 'KRMA', 'CSM', 'EMCR', 'PFFA', 'XTN', 'IG', 'SNSR', 'FDRR', 'FCTR', 'MMIN', 'CEMB', 'SPHY', 'GNMA', 'EMHY', 'GINN', 'HYGV', 'KIE', 'VIDI', 'SRET', 'FDLO', 'NANR', 'IQSU', 'MDIV', 'IEUS', 'YINN', 'ISCG', 'FTSD', 'ECH', 'BIZD', 'RHS', 'PSCT', 'RGI', 'DDM', 'EUSA', 'FNY', 'YYY', 'TZA', 'VRIG', 'KBWD', 'RTM', 'DPST', 'UUP', 'IMCV', 'FBCG', 'TECB', 'DWAS', 'DNL', 'FXZ', 'QDEF', 'EUSB', 'WGLD', 'PDN', 'GII', 'DBO', 'WIP', 'IRBO', 'EXI', 'IYZ', 'PJP', 'SOCL', 'BBSC', 'RXI', 'JHSC', 'IGE', 'IDRV', 'TPYP', 'SPXS', 'PTMC', 'GSUS', 'CALF', 'DBB', 'ULST', 'USXF', 'FPEI', 'FLGV', 'SPBO', 'GOVZ', 'GSSC', 'VUSE', 'SDOW', 'QQQE', 'FDT', 'EEMS', 'SHYD', 'VBND', 'PLW', 'CAPE', 'FVAL', 'ERTH', 'PBD', 'ILTB', 'GQRE', 'RYF', 'ZROZ', 'ROUS', 'FAN', 'ISCV', 'PREF', 'BETZ', 'MFEM', 'RFG', 'JQUA', 'FTLS', 'DUSA', 'AAAU', 'VFVA', 'TMF', 'IHE', 'THD', 'DWLD', 'RWK', 'SVXY', 'RAVI', 'DSTL', 'FNDB', 'IBMK', 'ULVM', 'URTY', 'NUMG', 'RYLD', 'PALL', 'CNRG', 'DOL', 'BSJO', 'UIVM', 'GSID', 'IDNA', 'FYC', 'NAIL', 'BKLC', 'FLHY', 'NUAG', 'DFE', 'BSCR', 'EIDO', 'XITK', 'FLGB', 'SCHI', 'KBWY', 'SMIN', 'DFAE', 'EELV', 'PAWZ', 'IXP', 'VSDA', 'XSVM', 'EFIV', 'TLTE', 'SMMD', 'VIXY', 'WDIV', 'EWN', 'HFXI', 'IBML', 'GSST', 'TAIL', 'PPH', 'PIO', 'JEMA', 'CLRG', 'ONEO', 'PJAN', 'SMB', 'MORT', 'SKOR', 'SFY', 'SPEU', 'WOOD', 'DFEN', 'BUFR', 'EDIV', 'SPD', 'ISDX', 'BIB', 'UNG', 'GBF', 'TFLO', 'IQDG', 'FCVT', 'SMOG', 'JPIB', 'FMHI', 'FDD', 'TDSB', 'PBE', 'DEF', 'TMV', 'BSJP', 'USVM', 'RWM', 'BIBL', 'GAL', 'PTF', 'QQH', 'IBDT', 'SYLD', 'SSUS', 'USD', 'TUR', 'MEAR', 'FLTB', 'GNOM', 'BLCN', 'IBMJ', 'FXE', 'EPOL', 'ACIO', 'PKB', 'FDHY', 'FEMB', 'SHE', 'CPER', 'DFEB', 'AMZA', 'FCOR', 'IFV', 'RZV', 'DINT', 'IEO', 'IZRL', 'USTB', 'AWAY', 'PSP', 'ADME', 'INDS', 'UWM', 'EZA', 'FXG', 'ROBT', 'KARS', 'LGH', 'XMHQ', 'IFGL', 'SLVP', 'HCRB', 'CWEB', 'NUBD', 'FFEB', 'EWM', 'TDSD', 'SLVO', 'FFTY', 'KNG', 'YOLO', 'JUST', 'PIZ', 'FLV', 'PSEP', 'FCG', 'PRN', 'NUMV', 'BNO', 'FXN', 'EFAX', 'VALQ', 'QGRO', 'UEVM', 'DMXF', 'FAD', 'SIXH', 'FXF', 'IQIN', 'DOG', 'IGRO', 'DFJ', 'UGL', 'HTEC', 'FLGE', 'REML', 'PAPR', 'ULTR', 'MLN', 'IYLD', 'VALT', 'DTEC', 'BGRN', 'ISCB', 'PGHY', 'CSB', 'CLSM', 'PMAY', 'IBMM', 'PIE', 'PGJ', 'PJUL', 'FLDR', 'YLD', 'FYT', 'JPME', 'CURE', 'PHDG', 'MILN', 'USCI', 'FDG', 'XPH', 'QID', 'FTXO', 'SPFF', 'BSCS', 'EPRF', 'DEED', 'CACG', 'AIRR', 'SGDM', 'GVIP', 'CDL', 'CZA', 'MLPB', 'GCOR', 'COMB', 'FVC', 'QVAL', 'TCHP', 'COM', 'RTH', 'JMOM', 'FLBR', 'DEUS', 'SMLV', 'DFNL', 'VLU', 'DMRI', 'QINT', 'AGZD', 'BATT', 'CCOR', 'BUZZ', 'IQSI', 'FQAL', 'BWZ', 'RYU', 'XMPT', 'TOK', 'EQL', 'KURE', 'SBIO', 'MMIT', 'JAAA', 'EBIZ', 'ADRE', 'MSTB', 'ISCF', 'DBJP', 'GHYB', 'STOT', 'KLDW', 'ITEQ', 'CSML', 'QVMM', 'IBD', 'GHYG', 'PYZ', 'FFTI', 'XHS', 'FLEE', 'FXY', 'HMOP', 'HEEM', 'SHAG', 'JSMD', 'OVL', 'ATMP', 'TTAC', 'DGRS', 'EDC', 'KGRN', 'AGOX', 'FRI', 'SDVY', 'GCC', 'RXL', 'TPLC', 'TIPZ', 'EMHC', 'XLSR', 'MFMS', 'FXU', 'HAIL', 'CLSC', 'IDOG', 'ESG', 'WFHY', 'SLX', 'VOTE', 'LDSF', 'ESGG', 'DTH', 'FLBL', 'IBND', 'RFDI', 'KCE', 'PAUG', 'AIQ', 'OPER', 'VCEB', 'EEMX', 'IUS', 'VSMV', 'ETHO', 'PFEB', 'FUMB', 'AUSF', 'DIG', 'BRZU', 'PBP', 'BJUL', 'FXC', 'IBMN', 'EMNT', 'LRGE', 'AIEQ', 'FLIA', 'XMVM', 'XSMO', 'JXI', 'CMDY', 'JCPB', 'DDWM', 'BUFD', 'MMLG', 'DUDE', 'BKAG', 'HYZD', 'ONOF', 'JPSE', 'CLSA', 'FEMS', 'ALTL', 'DJD', 'CTEC', 'EDEN', 'MVV', 'SOXS', 'JPEM', 'TAXF', 'IGEB', 'EIS', 'FAUG', 'HYDB', 'BKF', 'SIXA', 'FDM', 'BYLD', 'GREK', 'ECON', 'DRN', 'FBGX', 'RYE', 'PJUN', 'RFV', 'AWTM', 'QLV', 'FSMB', 'OUSM', 'MOON', 'BKSE', 'KORP', 'RVNU', 'DIM', 'BJAN', 'BTEC', 'QQXT', 'IVAL', 'VFMO', 'WTMF', 'QQQN', 'ESGA', 'DOO', 'EFAD', 'PPTY', 'BFOR', 'USL', 'DWAW', 'JSML', 'FXB', 'USMF', 'FAB', 'OVB', 'TDSE', 'NUDM', 'XES', 'RNRG', 'ENZL', 'RLY', 'SPVU', 'QLC', 'USDU', 'RJI', 'PTIN', 'GCOW', 'HLAL', 'BLES', 'OSCV', 'IETC', 'SRTY', 'RZG', 'GTIP', 'TPHD', 'IMTB', 'IMFL', 'RIGS', 'ENTR', 'DBAW', 'IBDU', 'RBIN', 'VRAI', 'FLLV', 'FNI', 'RYJ', 'PSR', 'OCIO', 'SIXL', 'ELD', 'FAPR', 'PMAR', 'HYLD', 'QTUM', 'EMBD', 'POTX', 'TOLZ', 'AFIF', 'HYGH', 'WBND', 'HSRT', 'FLMB', 'PWC', 'USOI', 'FLCH', 'XOUT', 'HYHG', 'URE', 'BJK', 'FNOV', 'CHAD', 'BAPR', 'RFDA', 'CVY', 'MUST', 'EWUS', 'FNK', 'DVOL', 'GVAL', 'RBUS', 'JSCP', 'HAWX', 'IPKW', 'OMFS', 'RJA', 'EPHE', 'ACWF', 'LEGR', 'RETL', 'FJAN', 'HYBB', 'FJUL', 'CIL', 'PIN', 'KFVG', 'UFO', 'EWMC', 'NETL', 'SVAL', 'KOLD', 'QABA', 'CHAU', 'BNDC', 'FDMO', 'FIBR', 'ISMD', 'HUSV', 'PZT', 'SGDJ', 'PSCI', 'FXA', 'THCX', 'CORN', 'GDMA', 'IBMO', 'LSAT', 'RFCI', 'CBON', 'PICB', 'MXDU', 'DBEM', 'HYXF', 'LOWC', 'EDOW', 'CNBS', 'SPDN', 'DBP', 'AESR', 'HIBL', 'BSJQ', 'PBS', 'POCT', 'DALI', 'WFH', 'HEGD', 'IHY', 'GXTG', 'IGN', 'FAZ', 'VIXM', 'IDHQ', 'DIVB', 'TTT', 'PDEC', 'FDNI', 'EPU', 'NUEM', 'FAAR', 'BSCT', 'LSAF', 'FJUN', 'KSTR', 'FSZ', 'GENY', 'FGM', 'FMAY', 'INKM', 'FCAL', 'SPBC', 'PSCE', 'MBSD', 'BKMC', 'SCHY', 'IAK', 'DMRM', 'TDV', 'EJAN', 'PSL', 'HSCZ', 'INDL', 'GAMR', 'VFQY', 'WWJD', 'BSEP', 'EWZS', 'EMTL', 'RISN', 'NJAN', 'PEZ', 'HTAB', 'MINC', 'FUNL', 'CUT', 'DBE', 'SPYC', 'INCO', 'XVV', 'GLDI', 'DAPR', 'NUHY', 'DYNF', 'SSPY', 'DGP', 'GOAU', 'EQWL', 'PFIX', 'DWUS', 'DXD', 'BTAL', 'PALC', 'KEMQ', 'GRNB', 'KJAN', 'UMI', 'IBDV', 'DGT', 'META', 'DAUG', 'MFDX', 'IEZ', 'DGRE', 'IIGD', 'RESP', 'TDVG', 'PBJ', 'JOET', 'FBCV', 'SQEW', 'UJAN', 'JPXN', 'SPUS', 'QPX', 'VFMF', 'FKU', 'BDRY', 'TWM', 'HKND', 'CHGX', 'TBX', 'BJUN', 'BICK', 'PFI', 'EWO', 'FISR', 'SCHQ', 'ECNS', 'MMTM', 'FRDM', 'MIDU', 'EWRE', 'JMUB', 'QMOM', 'JO', 'TPOR', 'SPCX', 'OWNS', 'HDMV', 'TPIF', 'XVOL', 'PHYL', 'QAT', 'DFHY', 'ISRA', 'KBWP', 'QLVD', 'BFEB', 'SCO', 'PFFR', 'WEBL', 'HAP', 'AADR', 'VEGI', 'DFNV', 'QEMM', 'SPMO', 'NFTY', 'JJC', 'MFUS', 'MFUS', 'MUSI', 'BMAY', 'IDME', 'XTL', 'EIRL', 'NURE', 'EYLD', 'WIZ', 'FILL', 'DNOV', 'FMAR', 'FIDI', 'FFIU', 'ACSI', 'PSET', 'KAPR', 'CEFS', 'PLRG', 'DWEQ', 'HOMZ', 'DUST', 'AMUB', 'LOUP', 'NERD', 'IMOM', 'GLIN', 'BAUG', 'WPS', 'SCJ', 'DEW', 'BOCT', 'PXE', 'SZNE', 'UYM', 'LQDB', 'CSD', 'QDEC', 'FTXL', 'DGL', 'SHYL', 'EWSC', 'QSY', 'IBTB', 'CLIX', 'UTRN', 'UGA', 'GURU', 'PFLD', 'LVHI', 'JPMB', 'IQDE', 'SENT', 'LABD', 'IBDD', 'BITQ', 'TMAT', 'HYXU', 'IQDY', 'MOTI', 'JDST', 'DUSL', 'AVIG', 'RUSL', 'DEEF', 'PDEV', 'WEAT', 'IBHC', 'KBWR', 'OILK', 'JSTC', 'FOCT', 'ZHDG', 'PY', 'GSPY', 'FDIV', 'IBMQ', 'DALT', 'PXI', 'EVX', 'FDEC', 'FLKR', 'ACTV', 'HIPS', 'BKIE', 'IBHB', 'KJUL', 'PXUS', 'UBT', 'GERM', 'TECS', 'EOPS', 'SDEM', 'DYLD', 'JHMT', 'BBSA', 'AFK', 'DMAR', 'CSF', 'PUTW', 'SOXQ', 'CARZ', 'ENFR', 'HEWG', 'WBIY', 'BDEC', 'AGNG', 'BMAR', 'BUFF', 'GSFP', 'VEGN', 'RDFI', 'DMAY', 'UDN', 'IBTD', 'HDGE', 'PSCD', 'FMF', 'PST', 'GMOM', 'IJAN', 'ISHG', 'JIG', 'PFFV', 'DRW', 'GRN', 'VPN', 'TTAI', 'IBMP', 'IVES', 'FMIL', 'XWEB', 'SIXS', 'MPRO', 'EUDG', 'TRND', 'LKOR', 'IIGV', 'SOYB', 'SJB', 'EBLU', 'DDEC', 'AZBJ', 'BOIL', 'DBMF', 'DRIP', 'JIGB', 'FCPI', 'PTEU', 'DJUL', 'UAPR', 'BDCZ', 'FLSP', 'NJUL', 'EUSC', 'CPI', 'IJUL', 'CHIX', 'GAA', 'FSMD', 'SIMS', 'EURL', 'UCIB', 'PNOV', 'FLMI', 'ANEW', 'JHMH', 'QWLD', 'WBII', 'EMCB', 'PWS', 'EET', 'BSMM', 'USEP', 'LQDI', 'DAPP', 'UJUL', 'TPSC', 'PFIG', 'ROOF', 'RFFC', 'DURA', 'VFLQ', 'ABEQ', 'IBBQ', 'WBIF', 'UOCT', 'XRLV', 'ARCM', 'FFTG', 'RFEM', 'FLQM', 'MRGR', 'SMHB', 'DMRE', 'UMDD', 'KLCD', 'DEEP', 'QVMS', 'PIFI', 'PVI', 'WFIG', 'TEQI', 'KORU', 'DJAN', 'UBOT', 'PSCF', 'VMOT', 'NOCT', 'BKHY', 'FEVR', 'DBLV', 'YANG', 'BCD', 'AMTR', 'VFMV', 'DJUN', 'EWJV', 'GOEX', 'FTHI', 'JOYY', 'EUO', 'WUGI', 'FFHG', 'ENOR', 'KBUY', 'AGOV', 'WBIG', 'PSCC', 'FLTW', 'FFSG', 'TRTY', 'PUI', 'DDLS', 'NORW', 'MBND', 'DAX', 'TGRW', 'SPDV', 'HDG', 'FJP', 'LEAD', 'SHUS', 'LEXI', 'FGRO', 'DVYA', 'GLRY', 'ROMO', 'PQIN', 'IBTA', 'BRF', 'ERSX', 'WBIL', 'EUCG', 'GXF', 'FID', 'ARMR', 'BSJR', 'PXQ', 'IBHA', 'CYB', 'ROAM', 'XCEM', 'SPAK', 'CNXT', 'FSEP', 'OVT', 'CNCR', 'AZAJ', 'NAPR', 'EWGS', 'AZBL', 'THNQ', 'DMRS', 'FMAG', 'IBHD', 'BFIT', 'EWCO', 'CIZ', 'BUYZ', 'SAA', 'TSJA', 'SNLN', 'SPXB', 'IHYF', 'IEIH', 'PBTP', 'GYLD', 'DIVZ', 'ASHS', 'PBSM', 'UAUG', 'OEUR', 'JDIV', 'MTGP', 'FLSW', 'HDRO', 'SFYX', 'DOCT', 'TCTL', 'LSST', 'SPUU', 'BSML', 'FTXN', 'SEIX', 'NUSA', 'ARGT', 'UMAY', 'THY', 'XDIV', 'RWVG', 'BKEM', 'EWK', 'ISWN', 'IBTE', 'EJUL', 'RORO', 'FIVA', 'IUSS', 'HOLD', 'LFEQ', 'JHMF', 'EAOK', 'RAYC', 'PAMC', 'DDIV', 'QARP', 'BSMP', 'GSEE', 'FFR', 'KOCT', 'XJH', 'WANT', 'FCEF', 'BSBE', 'BKSB', 'GXG', 'FYLD', 'BKCH', 'EUM', 'BBC', 'HYLV', 'DWMF', 'UTES', 'IBHE', 'FRTY', 'XSHQ', 'SPSK', 'RINF', 'CCRV', 'SPVM', 'FTRI', 'FOVL', 'MGMT', 'BSMO', 'WCBR', 'SFIG', 'BSMN', 'UMAR', 'VPC', 'PSFF', 'STNC', 'ZSL', 'ICOL', 'DFND', 'AVSF', 'LGOV', 'IEHS', 'QTAP', 'AZAL', 'GIGE', 'ASEA', 'PLTM', 'RESE', 'NACP', 'DBOC', 'CBTG', 'IDX', 'AZAO', 'QYLG', 'FLAX', 'HELX', 'RSXJ', 'DXJS', 'UPW', 'ALTY', 'QJUN', 'HJEN', 'BCM', 'FLIN', 'CHIK', 'AMOM', 'SVOL', 'KSCD', 'EAPR', 'UDEC', 'ALFA', 'OLD', 'DXGE', 'KVLE', 'CN', 'FLRT', 'UCC', 'WOMN', 'BSCE', 'NGE', 'TDSA', 'UXI', 'IDIV', 'TOKE', 'ASET', 'AZBO', 'IBCE', 'EFNL', 'ESEB', 'EDZ', 'KOIN', 'RBND', 'IAUF', 'GSIG', 'JIDA', 'MDEV', 'RDOG', 'CWS', 'FLCA', 'RNLC', 'ICOW', 'IGLD', 'GLCN', 'LRNZ', 'WBIT', 'NLR', 'ISEM', 'RNDM', 'ERY', 'CLDL', 'UFEB', 'KMLM', 'FLQD', 'DWSH', 'MAMB', 'ESGB', 'SPXE', 'TMDV', 'JUSA', 'UJB', 'AVMU', 'LCG', 'RFEU', 'BKUI', 'RECS', 'DBV', 'NULC', 'JCTR', 'HIBS', 'XYLG', 'SUBZ', 'EDOG', 'SGG', 'HTUS', 'PAB', 'BSCU', 'HYMU', 'MBOX', 'GLL', 'PSCU', 'MBCC', 'SMCP', 'FEUZ', 'PXJ', 'CANE', 'ISZE', 'DVLU', 'KALL', 'KEMX', 'DIVS', 'PSCM', 'DSEP', 'HDAW', 'SFYF', 'INMU', 'CSA', 'ACVF', 'HLGE', 'MSVX', 'TYO', 'JHMC', 'IPOS', 'FSMO', 'FLQE', 'EMSG', 'ROSC', 'XPP', 'RWGV', 'MLPO', 'TYD', 'JJN', 'FIHD', 'VXZ', 'FLAU', 'ESHY', 'UGCE', 'PAK', 'FPA', 'BFTR', 'FITE', 'SPMV', 'UTSL', 'DSTX', 'UAE', 'GSP', 'PBUG', 'PQDI', 'PILL', 'FORH', 'SOGU', 'BSDE', 'USAI', 'PBND', 'VAMO', 'WLDR', 'REIT', 'GRES', 'KOCG', 'AZBA', 'BSMQ', 'EINC', 'BBP', 'UJUN', 'DBS', 'IBTH', 'QPFF', 'IEDI', 'YCS', 'PEX', 'GSEU', 'EGPT', 'AEMB', 'EMXF', 'SNUG', 'SEPZ', 'EMDV', 'JHMS', 'EGIS', 'MEXX', 'TUSA', 'KDFI', 'FDEM', 'EMFM', 'ROKT', 'QDYN', 'TGIF', 'PSMB', 'CID', 'UST', 'XSHD', 'SSLY', 'RAFE', 'BNOV', 'BTEK', 'JHCB', 'JHCS', 'IBTF', 'CRAK', 'RNMC', 'EAOA', 'IBHF', 'NFLT', 'DBEH', 'DSOC', 'IAPR', 'JMIN', 'JHMB', 'JJG', 'EFIX', 'GOAT', 'WINC', 'FEUL', 'JPN', 'FLRU', 'TSPA', 'PYPE', 'PFFL', 'BLDG', 'COW', 'VEGA', 'NIB', 'EASG', 'XBAP', 'SPXZ', 'HYUP', 'MCEF', 'IBTI', 'RNDV', 'IDHD', 'QMN', 'JHMA', 'FLQS', 'TPLE', 'FXP', 'QMAR', 'KWT', 'FPRO', 'SPRE', 'IEME', 'YLDE', 'BSMS', 'CEY', 'AUGZ', 'FDEV', 'QCON', 'ECLN', 'QQQA', 'BSMR', 'PSMG', 'FTXH', 'DRV', 'IBTJ', 'CHIH', 'JHME', 'BOUT', 'JHMU', 'QRFT', 'LBJ', 'FLQH', 'VSPY', 'SYUS', 'PSMM', 'SQLV', 'FLEH', 'HEWC', 'KONG', 'EMAG', 'DWCR', 'TSOC', 'QLS', 'QED', 'JULZ', 'NTSI', 'IBTG', 'PLAT', 'PSMJ', 'FLHK', 'DUG', 'EFO', 'SXQG', 'FLQG', 'QLVE', 'YPS', 'ADFI', 'OPPX', 'GSJY', 'VABS', 'JHMI', 'EMIF', 'CHIS', 'XPND', 'CHNA', 'BSMT', 'LYFE', 'PGAL', 'DBEZ', 'AZAA', 'XJR', 'XBUY', 'XDQQ', 'VSLU', 'BSJS', 'WGRO', 'LCR', 'IQM', 'ASHX', 'ATFV', 'MINN', 'FLYT', 'TPHE', 'FMNY', 'MIG', 'RTAI', 'ISVL', 'BOSS', 'SFHY', 'IECS', 'FRAK', 'EQOP', 'HSMV', 'GK', 'PQLC', 'PQSG', 'YJUN', 'IMLP', 'RNSC', 'RFUN', 'UGE', 'KBND', 'MOTO', 'CLDS', 'TPAY', 'SRS', 'BZQ', 'UNL', 'KFYP', 'TWIO', 'FLGR', 'ASPY', 'XDSQ', 'FLJH', 'BOB', 'EFAS', 'DBJA', 'JJA', 'DBGR', 'PQSV', 'HEWU', 'EUDV', 'FLRG', 'BAL', 'MAGA', 'CHIC', 'YMAR', 'OBOR', 'CEW', 'CUBS', 'FIEE', 'FLFR', 'IBHG', 'CRUZ', 'VICE', 'INFR', 'SKF', 'JJE', 'PSMC', 'RAAX', 'AIIQ', 'FTXD', 'TERM', 'YDEC', 'SMDY', 'MYY', 'FCA', 'PBEE', 'DWPP', 'EKAR', 'FBZ', 'KHYB', 'OVLH', 'JJM', 'IBDW', 'ERM', 'JRE', 'FPXE', 'FLM', 'KNGS', 'CHIL', 'SDEI', 'OOTO', 'SDEF', 'UNOV', 'VNMC', 'MIDE', 'HIPR', 'PGRO', 'OVM', 'LOPP', 'SMLE', 'XBJL', 'REVS', 'HYIN', 'FIGB', 'JJT', 'MBBB', 'USLB', 'RIGZ', 'HEET', 'BILS', 'AAA', 'FLMX', 'FSEC', 'BSAE', 'SPUC', 'ECOZ', 'MARB', 'FDTS', 'VSL', 'ALTS', 'MRSK', 'DWMC', 'CBSE', 'PSY', 'QDIV', 'FLN', 'FTLB', 'TFJL', 'ECOW', 'AGT', 'NIFE', 'EFZ', 'PVAL', 'KESG', 'YXI', 'HYDR', 'HYTR', 'MVPS', 'FICS', 'PBDM', 'FFND', 'PFUT', 'SEF', 'ESNG', 'MVP', 'TADS', 'BNE', 'USI', 'IDAT', 'BEDZ', 'BGLD', 'AFTY', 'EWJE', 'HART', 'SPXT', 'INDF', 'OVF', 'TAGS', 'IWFH', 'PSMR', 'SDCI', 'RESD', 'SPXN', 'IDLB', 'XTJL', 'EDUT', 'EAOR', 'TEGS', 'ARB', 'ESCR', 'PSFM', 'EPV', 'VCLO', 'EQRR', 'EEMD', 'IBBJ', 'BSMU', 'AQWA', 'XDAP', 'RNEM', 'CBLS', 'IVLC', 'IDMO', 'VWID', 'PLDR', 'EEMO', 'STLV', 'VNSE', 'DZZ', 'JFWD', 'EMSH', 'ESGS', 'OVS', 'CHIM', 'BMED', 'EMBH', 'EMTY', 'BALT', 'REK', 'FAIL', 'EZJ', 'SULR', 'AVDR', 'PSFJ', 'CCON', 'QTJL', 'JJU', 'BIS', 'DSJA', 'TFIV', 'LSLT', 'IEFN', 'FPFD', 'FOMO', 'QDPL', 'JJP', 'LVOL', 'BLHY', 'KMED', 'WKLY', 'PLTL', 'FUT', 'HVAL', 'XTAP', 'NVQ', 'SLT', 'QQD', 'FTXG', 'EEV', 'MJUS', 'GRU', 'ESGY', 'RODE', 'BUL', 'UBR', 'NWLG', 'EAOM', 'LBAY', 'NDVG', 'NSCS', 'CHB', 'WWOW', 'ESGN', 'STLG', 'MIDF', 'MCRO', 'XDAT', 'RJZ', 'FTAG', 'SDGA', 'MARZ', 'FLIY', 'HDIV', 'SPAX', 'IXSE', 'LUXE', 'DMCY', 'APRZ', 'ADIV', 'LGBT', 'UPV', 'CHII', 'FWDB', 'PGM', 'EMMF', 'LOPX', 'BOAT', 'MAYZ', 'GAZ', 'FLZA', 'SMDD', 'TENG', 'QMJ', 'DEFN', 'SMIG', 'BECO', 'VIRS', 'DEMZ', 'KLNE', 'REC', 'FLUD', 'RSPY', 'JJS', 'RALS', 'GBLD', 'TRYP', 'EATZ', 'TFLT', 'EWEB', 'CROC', 'QQC', 'FLLA', 'SBB', 'OCTZ', 'JUNZ', 'XJUN', 'DYHG', 'REW', 'FSST', 'CHIE', 'SPXV', 'GLIF', 'CHIR', 'TAEQ', 'JOJO', 'GGRW', 'MAAX', 'DWAT', 'EWV', 'WIL', 'AFLG', 'WEBS', 'PSMD', 'RJN', 'AMER', 'KEJI', 'HJPX', 'DECZ', 'PSCJ', 'ULE', 'UCYB', 'JANZ', 'QPT', 'DIVA', 'CFCV', 'FEBZ', 'IBTK', 'LIV', 'FLSA', 'DGZ', 'HERD', 'KROP', 'ILDR', 'CEFA', 'TAAG', 'SDD', 'XDJL', 'VTRN', 'QRMI', 'NOVZ', 'SHLD', 'DDG', 'USEQ', 'DSPC', 'MRAD', 'SSG', 'QCLR', 'EURZ', 'PSCX', 'XTR', 'XCLR', 'XRMI', 'WDNA', 'BIGY', 'GBDV', 'RODI', 'AFSM', 'VFIN', 'YCL', 'ITAN', 'SMN', 'IBTL', 'QTR', 'GLDB', 'DMDV', 'TBJL', 'SKYU', 'AVDG', 'PSFD', 'JGLD', 'PEXL', 'EUFX', 'PSCW', 'FEDX', 'SHFT', 'EPRE', 'SPRX', 'SDP', 'TRPL', 'FDWM', 'KTEC', 'CHIU', 'NTSE', 'MZZ', 'IVRA', 'FATT', 'VCAR', 'SPQQ', 'VPOP', 'SBM', 'EEH', 'IVSG', 'FUE', 'EFU', 'VCLN', 'AFMC', 'SIJ', 'LTL', 'IVDG', 'GBLO', 'GBGR', 'DTOX', 'RXD', 'CLMA', 'SZK', 'AWYX', 'LD', 'SINV', 'TACE', 'SCC', 'MJXL', 'SILX', 'BNKD', 'BNKU', 'CHLD', 'CYA', 'DFAX', 'DFIV', 'EERN', 'FNGD', 'FNGO', 'FNGU', 'FNGZ', 'FRLG', 'GNAF', 'HOM', 'NRGD', 'NRGU', 'OIL', 'JIB', 'JRNY', 'JZRO', 'MINO', 'RAYS', 'SAVN', 'SCRD', 'STBL', 'SMI', 'SSPX', 'SUNY', 'SXUS', 'USVT', 'WLTH', 'WNDY', 'ZECP', 'HCOM', 'GTEK', 'PSIL', 'SIFI', 'SIHY', 'TOTAL']
# 4134 ETFs - execution time is ..min all from yahoo website -> execution time is 102min 
#etf_stocks=['STRX.SW','BNKD.SW', '1675.T', 'IGLB.MX', 'ECOM.SW', '1678.T', 'SC06.DE', 'ZPLA.SW', 'USSRF.MI', 'EL46.DE', 'IUKP.SW', 'PHPT.MI', 'XSEN.L', 'GFAA.SW', 'EURO.SW', 'PHPT.L', 'XMCH.SW', 'EXXU.F', 'IQQC.F', 'WRDUSY.SW', 'LCHI.F', 'ZCH.TO', 'XLYP.L', 'HZAR.MI', 'E908.F', 'EXV9.F', 'AMES.F', 'SPY5.SW', 'SRSA.MI', 'HEAL.MI', 'H4ZP.F', 'SC0R.DE', 'RDXS.L', 'XESP.F', 'XSCD.L', 'EXH8.F', 'EXXU.DE', 'IWM.MX', 'VT.MX', 'XESD.F', 'DRDR.L', 'EXV9.DE', 'MLPI.SW', 'DBX9.F', '1681.T', 'SC0R.F', 'EEA.MI', '2B78.DE', 'FLOT.MX', 'EXH8.DE', 'LQDH.SW', 'H4ZP.DE', 'SC05.DE', 'LCHI.DE', 'XMRD.L', 'ISPY.SW', 'HMCH.L', 'XCH.TO', 'XCS6.DE', 'CNY.PA', 'ICW5.DE', 'ICW5.F', 'XLYS.MI', 'XLY.MX', 'EL46.F', 'CNAA.PA', 'HEAL.L', 'E907.F', 'XESC.SW', 'HTWN.MI', 'DBX9.DE', 'E905.F', '1391.T', 'EMDV.SW', 'IQQ9.F', 'D5BK.F', 'CHIP.L', 'IYC.MX', 'EMAS.SW', '1389.T', 'SDJMID.MI', 'RQFI.MI', 'CINA.MI', 'XCS6.L', 'FXC.MI', 'XMME.SW', 'HMCD.L', '1394.T', 'CHIN.L', 'CNAA.DE', 'M62.SI', 'QCLN.MX', '1680.T', 'VTI.MX', '00657.TW', 'SMCX.SW', 'C024.DE', 'BIL.MX', 'LYPI.F', 'CNAA.SW', 'XDGM.F', 'GVI.MX', 'CHIN.MI', 'IQQC.DE', 'VECP.SW', 'LYSP5.SW', '1547.T', '00657K.TW', '1385.T', 'CASH.F', 'ACWI.SW', '0057.TW', 'XX2D.L', 'BIOT.L', '1364.T', '1674.T', 'CNAA.MI', 'SPYR.F', 'DX2J.F', 'FXC.AS', 'CS1.MI', 'BIGT.L', 'SHV.MX', 'ERNU.L', 'EXV1.DE', 'EXS3.MI', 'JNKE.SW', 'XNID.L', 'ETLI.DE', 'GENDED.MI', 'CB5.L', 'VGSH.MX', '1554.T', 'MSRUSB.MI', 'XCHA.MI', 'BIOT.AS', 'RTWO.MI', 'QDVK.F', 'VEVE.SW', 'BR50.MI', 'AH50.F', 'XDWC.MI', 'FTAD.SW', 'UE24.AS', 'GCVB.SW', 'ERNE.SW', 'SHY.MX', '1330.T', '1329.T', 'XCHA.DE', 'XS7W.MI', 'IQQF.F', 'ZPDD.F', 'SPXD.MI', 'ENAM.MI', '1578.T', 'RQFI.L', 'IDFX.L', 'XUHC.DE', 'NQSE.F', 'RQFI.DE', 'DXSG.F', 'SXLV.AS', '00636K.TW', '1677.T', 'CEBL.F', 'SXLY.MI', 'IQQ9.DE', 'ZPDH.DE', 'SPYA.F', 'HMXJ.MI', 'QDVG.DE', 'CI2G.L', 'XLVS.MI', 'FEX.L', 'ICDU.L', 'XX25.MI', 'UC96.L', 'XDGE.F', 'UHYG.L', '1348.T', 'AMES.DE', 'HMFE.MI', 'SXLV.MI', 'ASHR.L', 'R2SC.L', 'EXSD.F', 'XCHA.F', 'BIOT.MI', 'SP5EUY.MI', 'BBVAI.MC', 'LYSX.F', 'H411.F', '36BZ.F', 'XVTD.L', 'PHPM.MI', 'XLVP.L', '0051.TW', 'XSHC.L', 'QDVK.DE', 'DBXY.F', 'XAXJ.MI', 'CASH.MI', 'SC05.F', '1557.T', 'XSD.MX', 'SXLP.AS', 'SXRD.F', 'XRS2.MI', 'IHCU.L', 'AH50.DE', 'MIDD.L', 'MEM.PA', 'CEMT.F', 'BRIC.AS', 'VMID.F', '2B7D.DE', 'XUCD.DE', 'GLDM.PA', 'GDXJ.SW', 'WRDUSA.SW', 'DXS7.DE', 'SHYG.MX', 'XFVT.SW', 'DBRC.L', 'EMUSRI.MI', 'AJEUAS.MI', 'HMFE.L', '0052.TW', 'TNAE.MI', 'IQQY.F', 'IUS2.DE', 'ETLX.DE', 'CWEG.L', 'XFVT.MI', 'SXLP.MI', 'ZPDD.DE', 'EMMUSA.SW', 'RTWP.L', 'XRSG.L', 'XSGI.MI', 'H4ZI.DE', 'AAXJ.MX', 'EESM.MI', 'R2US.MI', 'C024.F', 'ZPDS.DE', 'USAEUY.MI', 'XUCS.DE', 'SXLY.AS', 'S500.MI', 'XUCD.L', 'XBAS.DE', 'CS1.PA', 'STWX.SW', 'EXH4.F', 'LASI.F', 'EUN0.F', 'EWN.MX', 'CD91.DE', 'SBIO.MI', '0056.TW', 'CEMG.DE', 'RQFI.F', 'XUHC.L', 'FDNE.AS', 'EROX.MI', 'IASH.L', 'XFVT.L', 'QTEC.MX', 'ELOVD.MI', 'IGEA.SW', 'BGU.TO', 'ZPRS.DE', 'REEU.MI', 'EACW.MI', 'XLVS.L', 'SPYT.DE', 'WOSC.SW', '1390.T', 'LUSA.MI', '36BZ.DE', 'IUHC.L', 'S6EW.MI', '1308.T', 'ROBO.SW', 'LQDG.L', 'EXH6.F', 'XLPS.MI', '1305.T', 'H4ZI.F', 'DXSL.F', 'SKYY.MX', 'IFFF.MI', 'XLYS.L', 'HMAF.L', 'ICSU.L', 'FLXE.MI', 'CNAL.L', 'EMLC.MI', 'ZPRI.DE', 'TDIV.MI', 'USAUSA.SW', 'CEMP.AS', 'IFFF.AS', 'HD9.SI', 'DXSF.F', 'CEBL.DE', 'HYEA.L', 'ZEM.TO', '00636.TW', 'TELE.L', '18M3.DE', 'CBMWOR.SW', 'IKOR.MI', 'IUS3.F', 'PFT.MI', 'CNAA.L', 'CHB.TO', '1306.T', 'USHY.PA', 'MGT.PA', 'FDNU.L', 'DXS5.F', 'JPNE.MI', 'IUS8.F', 'IQQU.F', 'FPX.L', 'DBX2.F', 'CAPE.MI', 'IHYU.MI', 'EMUEUA.MI', 'IUCS.L', 'WEAT.MI', 'XSCS.L', 'SDHY.AS', 'XDWC.DE', 'CANA.MI', 'LDCU.MI', '1679.T', '0053.TW', 'IS0E.DE', 'VDPA.L', 'UQLTE.MI', 'HMFD.L', 'MSRUSA.MI', 'CEMG.L', 'H411.DE', '0050.TW', 'CSWCHF.SW', 'EMCP.L', 'VUSA.SW', 'SBIO.AS', 'VUTA.L', 'RS2G.L', 'UEF7.DE', 'IQEG.MI', 'MAGI.SW', 'LYXIB.MC', 'JPJP.L', 'CSKR.MI', 'XRSU.L', 'GLDU.AS', 'RTWO.L', 'BND.MX', 'EPRA.MI', 'MVUS.MI', 'EMMEUA.MI', 'ETLI.F', 'LYFINW.SW', 'WHEA.AS', 'UBTS.L', 'ETLZ.DE', 'RTWO.AS', 'ZPRR.DE', '2B70.DE', 'DAXEX.SW', 'HLTW.PA', 'EMAE.MI', 'XRS2.DE', 'SC0K.DE', 'RS2K.DE', 'VMID.DE', 'GDXJ.MI', 'G2XJ.DE', 'PHAU.MI', 'CASH.DE', 'VETY.SW', 'SHEMB.MI', 'VJPN.SW', 'SR2000.MI', 'IS3L.F', 'CODW.PA', 'PQVM.MI', 'IBCX.SW', 'CSJP.L', 'UBUD.DE', '5HEE.MI', 'HMAD.L', 'EMV.L', 'QDVY.DE', 'XDWC.F', 'SPHC.MI', 'LYPA.DE', 'INAA.MI', 'TIP10D.MI', 'ISP6.L', 'CSUSS.MI', 'FYEM.DE', 'CSBGC3.SW', 'DBXI.F', 'MINT.MI', 'HYG.MX', 'SYBF.DE', 'HKOR.MI', 'ICLN.MX', 'XDWH.DE', 'CASE.L', 'WLDX.MI', 'XDER.MI', 'MTUM.MX', 'LYPE.DE', 'IUSU.F', 'EMH5.MI', 'M9SD.DE', 'SLQD.MX', 'WCOD.AS', 'DJE.MI', 'SYBF.F', 'SYBW.F', 'XDWH.MI', 'JPPA.DE', 'DXSZ.F', 'SXLF.MI', '1344.T', 'XFFE.MI', 'SUSC.MI', 'HLTW.L', 'YIEL.L', '1311.T', 'JPPS.DE', 'IUCD.L', 'SC06.F', 'CEMG.F', 'STHY.MI', 'XUHY.DE', 'ERND.AS', 'DXSZ.DE', 'APEX.MI', 'ASREUA.MI', 'DXS5.DE', 'MCEU.MI', 'IS3L.DE', 'LYPA.F', 'US1.MI', 'EMVEUA.MI', 'IBTS.AS', 'EXH6.DE', 'XDEB.MI', 'LQDH.AS', 'IEAC.SW', '1392.T', 'R2US.PA', 'VFEM.SW', 'IUSU.DE', 'XLV.MX', 'AGGH.MI', 'SUSC.L', 'FLTR.MI', 'VUCP.SW', 'VUTY.SW', 'PACEUA.MI', 'LASI.DE', 'XWTS.F', 'SDIG.AS', 'CS1.L', 'SYBW.DE', 'XLES.MI', 'UEFF.DE', 'HYFA.MI', 'SDHY.MI', 'LYY7.F', 'DBX1.F', 'UEFF.F', 'IBTS.MI', 'EMUAA.MI', 'D5BE.F', 'D5BE.DE', 'US13.PA', 'IUS3.DE', 'GBS.MI', 'VUSC.DE', 'IS3J.DE', 'UEFF.AS', 'XESC.MI', 'JA13.DE', 'ZPRR.F', 'IPRV.L', 'DFE.MI', 'XAXJ.L', 'IDFF.L', 'XMLD.DE', 'IS3K.F', 'SJNK.MI', 'GLUX.PA', 'XDWH.F', 'NRAM.MI', 'IS3K.DE', 'SSHY.L', 'IQQH.F', 'FLO5.L', 'XUCS.L', 'IS0R.DE', 'IQQL.F', 'IQQF.DE', 'EMAS.L', 'IQQK.DE', 'ZJG.TO', 'X023.DE', 'SEAA.DE', 'IS3J.F', 'AUCO.AS', 'MXFS.MI', 'XMVE.MI', 'SPYA.DE', 'CSEMAS.MI', 'IGLO.SW', 'LQD.MX', 'DBXY.DE', 'BTEC.L', 'JNKE.L', 'USDV.SW', 'MSRUSB.SW', 'ZPRC.DE', 'DBX8.DE', 'SHYU.L', 'IS0R.F', 'DEMR.MI', 'WING.MI', 'XZMU.MI', 'UKE.MI', 'LUXG.L', 'TSY3.L', 'DXS7.F', 'USHY.MI', 'QL2.SI', 'IBC7.DE', 'IS3F.DE', 'XLPP.L', 'STZX.SW', 'SXRJ.DE', 'VWRL.SW', 'CSBGU3.MI', 'FLXG.MI', 'U13G.L', 'TIP1D.MI', 'STTX.MI', 'VHVE.MI', 'ZPR5.DE', 'ESEH.MI', 'C40.MI', 'VETA.SW', 'SXRH.DE', 'ISUS.L', 'SYBR.DE', 'LCEU.MI', 'UT1EUA.MI', 'CBSUS.MI', 'XMEM.MI', 'HKOR.L', 'IGSD.L', 'INDO.MI', '5HEP.L', 'SXRF.DE', 'EMAE.PA', 'XMUS.MI', 'CASH.AS', 'XUHY.MI', 'HYFA.PA', 'CB5.MI', 'SVE.MI', 'EEMK.MI', 'XHY.TO', 'SDHG.L', 'MLPS.MI', 'MFDD.MI', 'GLUX.DE', 'ECOEUA.MI', 'JPX4.L', 'ZPR5.F', 'SPYM.F', 'EL4I.DE', 'LKOR.DE', 'C007.F', 'QDVP.DE', 'GCVB.L', '1345.T', 'TLT.MX', 'IXJ.MX', 'MEU.MI', 'JNKS.L', 'ISPY.MI', 'DXSG.DE', 'XMAS.MI', 'GFA.MI', 'IUSP.F', 'AGES.L', 'XLPE.MI', 'H4Z9.DE', 'EENG.MI', 'USVEUY.MI', 'AASU.L', 'SYBK.DE', 'ITWN.MI', 'HYLD.MI', 'IS3N.F', 'SXRH.F', 'IEEM.MI', 'EMHE.MI', 'EKUS.PA', 'R2US.L', 'CNYA.L', 'GJGB.L', 'UBBB.MI', 'WLDH.MI', 'DGSE.MI', 'QL3.SI', 'VLUE.MX', 'ALQD.DE', 'HMCX.PA', 'XBAS.F', 'UIQI.DE', 'XSFN.L', 'UE27.AS', 'SUAS.MI', 'IQQS.DE', 'AGG.MX', 'TP05.L', 'IQQL.DE', 'CPD.TO', 'IQQE.DE', 'DBX2.DE', 'VUSA.MI', 'XSPX.MI', 'DGRA.MI', 'IBC2.DE', 'SEMA.MI', 'VFEM.F', 'SPYT.F', 'STNX.MI', 'WCOS.AS', 'QDVS.F', 'XDWS.DE', 'VWCG.MI', 'CB5.PA', 'EUREUA.MI', 'SXRD.DE', 'FLOE.MI', 'EXSE.DE', 'SDJSML.MI', 'UC79.L', 'XDWL.SW', 'IAUP.SW', 'LFOD.DE', 'CBUS5.MI', '2B77.DE', 'C010.DE', 'COSW.PA', 'SMBS.L', 'LYPB.DE', 'SXLE.MI', 'KOR.MI', 'IBCI.DE', 'IPRV.AS', 'XWTS.MI', 'AMEA.DE', 'EUREUA.SW', 'EUNX.DE', 'XSFR.MI', 'XEIN.MI', 'EFRN.DE', '1698.T', 'UVAL.L', 'SMLD.F', 'IKRA.AS', 'CBU7.AS', 'IFSE.MI', 'ETLH.F', 'ETLH.DE', 'LESU.DE', 'SPP3.DE', 'M9SD.F', 'XGLU.DE', 'OM3M.DE', 'DX2E.DE', 'SMCX.MI', 'LASP.F', 'CAHEUA.MI', 'AGED.MI', 'TELW.PA', 'CSBGE3.MI', 'EMCR.MI', 'RISE.L', 'VCF.AX', 'INFL10.MI', 'CBEU5.MI', 'IUSA.MI', 'XSTR.MI', 'E903.F', 'IRCP.MI', 'UE33.AS', 'SUSD.L', 'SUUS.L', 'IQQ6.F', 'FAHY.F', 'FAHY.DE', 'FRNE.DE', 'IDP6.L', 'IWSZ.MI', 'EXH3.F', 'GBSS.L', 'VXUS.MX', 'LMMV.L', 'JPSA.L', 'XMKO.MI', 'UEF7.F', 'X023.F', 'SXLE.AS', 'DJE.PA', 'IS0Q.DE', 'SEUC.MI', 'UIFS.L', 'SC03.DE', 'DTM.AS', 'IEGE.MI', 'CGB.DE', 'JE13.MI', 'STHY.L', 'HYEM.MI', 'SPY5.MI', 'AFIN.MI', 'IQQT.F', 'MXUS.MI', 'XLFQ.L', 'FEMD.L', 'IS0Q.F', 'EXVM.MI', 'QDVF.DE', 'UIMP.DE', 'DIA.MX', 'XGLF.DE', 'UC81.L', 'ECOM.AS', 'XSU.TO', 'H4ZL.F', 'UC46.L', 'WSRUS.MI', 'CSKR.L', 'DBX5.F', 'XPH.MX', 'SUSE.MI', 'FLOT.MI', 'AFRN.MI', 'CAPU.MI', 'QDVR.DE', 'ISFE.L', 'LYQ7.DE', 'IGLO.L', 'XQUA.MI', 'C3M.MI', 'EXI3.DE', 'DJAM.DE', 'SEUC.L', 'JU13.MI', 'XRSM.F', 'SMSJPN.MI', 'ZPDE.DE', 'SUSM.MI', 'XDWS.MI', 'PSRF.L', 'EX01.VI', 'UIMP.AS', 'IEMM.AS', 'LYPI.DE', 'XWTS.DE', 'IQQS.F', 'DBX1.DE', 'ERNE.MI', 'QDVP.F', 'H410.DE', 'XYLD.DE', 'LYM7.DE', 'AASG.L', 'RS2U.L', 'XYP1.MI', 'EMGU.L', 'UIQL.DE', 'JPST.L', 'XMME.DE', 'TIP.MX', 'EL4L.F', 'CUSS.L', 'STQX.SW', 'EMRG.SW', 'XME.MX', 'XDN0.SW', 'EWT.MX', 'CAPU.SW', 'IHYG.SW', 'XSGI.SW', 'EUFN.MX', 'EDV.MX', 'UQLTD.SW', 'VMID.SW', 'WSRUS.SW', 'EWS.MX', 'OIH.MX', 'AUCO.SW', 'EPP.MX', 'EL4W.F', 'SIL.MX', 'CSCA.SW', 'GDX.MX', 'VOX.MX', 'EWJ.MX', 'SXRU.DE', 'AEEM.MI', 'IBB.MX', 'SPYV.MX', '1349.T', 'AAA35.MI', 'E127.MI', 'TAN.MX', 'VUG.MX', 'EMAD.L', 'XSB.TO', 'CSBGC7.SW', 'VSCA.SW', 'CBMEM.SW', 'SPY4.SW', 'FEP.MX', 'RSX.MX', 'ACWX.MX', 'IBCI.SW', 'IEML.SW', 'CBMEUR.SW', 'LYSEL.SW', 'UEF7.AS', 'XUTD.SW', 'VNRT.SW', 'EMLV.SW', 'UBUX.F', 'SCZ.MX', 'FEZ.MX', 'BLV.MX', 'UBU5.DE', 'XDAX.SW', 'AUSAUW.SW', 'DFE.L', 'GBRE.SW', 'VHT.MX', 'XRT.MX', 'EWC.MX', 'LYCEC.SW', 'FOO.MI', 'CBUS5E.MI', 'IUCB.MI', 'MOAT.MI', 'FXI.MX', 'IHYU.SW', 'WEAT.L', 'C3M.PA', 'EL4C.DE', 'RXE.TO', 'ISDU.L', 'RSM.AX', 'CBNKY.SW', 'XHB.MX', 'MXI.MX', 'FVD.MX', 'HMEU.SW', 'GLRA.SW', 'HYEM.SW', 'MIDD.SW', 'IGSB.MX', 'UE25.AS', 'CBCHN.SW', 'SDIG.SW', '100D.SW', 'R2US.SW', 'IGOV.MX', 'ITB.MX', 'IM2A.DE', 'HMEF.L', 'NK4L.DE', 'VDE.MX', 'ITOT.MX', 'DIG.MX', 'BKF.MX', 'VTIP.MX', 'ROAI.SW', 'IDVY.SW', 'TSWE.SW', 'FYEQ.DE', 'VPL.MX', 'MGT.MI', 'IJS.MX', 'VNM.MX', 'STSX.SW', 'IMEA.SW', 'G1N.SI', 'ZFS.TO', 'RUSB.TO', 'XUSD.L', 'CMR.TO', 'UBUS.AS', 'HUF.TO', 'I98.SI', 'HTB.TO', 'HEA.TO', 'UNCA.MI', 'VUSC.SW', 'XZEU.SW', 'WOOD.MX', 'SPYG.MX', 'HYS.MX', 'XNIF.SW', 'IMBA.SW', 'LYINC.SW', 'VWOB.MX', 'EFA.MX', 'EUNE.SW', '1313.T', 'IMEU.SW', 'CLIM.SW', 'IBTA.SW', 'CB1TX.SW', 'SDIA.SW', '1388.T', 'SPLV.SW', 'TRSY.SW', 'CB1MDX.SW', 'TRET.SW', 'EWP.MX', 'URTH.MX', 'STPZ.MX', 'QUAL.MX', 'SXLF.AS', 'THD.MX', 'IVE.MX', 'IHI.MX', 'GLDV.SW', 'GSG.MX', 'FDN.MX', 'UWM.MX', 'VEU.MX', 'GOVS.MI', 'EWL.MX', 'HDV.MX', 'IYW.MX', 'XLBS.MI', 'GDIG.SW', 'XOP.MX', 'XSLI.SW', 'XESX.SW', 'OEF.MX', 'IJR.MX', 'IBGS.SW', 'STTX.SW', 'XAXD.SW', 'MOAT.SW', 'VCPA.SW', 'XD5E.SW', 'UEF6.AS', 'XSPX.SW', 'XB4F.SW', 'GIN.L', 'PHO.MX', 'DBC.MX', 'CSJP.SW', 'IYR.MX', 'IEMG.MX', 'IEO.MX', 'IEV.MX', 'EMKX.DE', 'VTV.MX', 'DDM.MX', 'REMX.MX', 'IYF.MX', 'XLP.MX', 'EVOE.MI', 'VB.MX', 'BYJ.SI', 'LYHLTW.SW', 'DJSC.SW', 'WXOZ.AX', 'L8I3.DE', 'DBXT.DE', 'DX22.DE', 'DXS1.DE', 'VUCP.DE', 'IS0Y.DE', 'EUNM.DE', 'GOVS.PA', 'IS3M.DE', 'AMEM.DE', 'JEST.DE', 'IDKO.L', '18M1.DE', 'ERND.L', 'PEU.PA', 'VUSA.F', 'CAB3.DE', 'VUCP.AS', 'SUAG.L', 'IUS7.DE', 'GLCB.L', 'UEF8.AS', 'SEUC.PA', 'D5BC.DE', 'PJEU.DE', 'EL48.F', 'IBCD.DE', 'EL4W.DE', 'IS15.L', 'LEONIA.MI', 'JE13.DE', 'JEST.L', 'EL4T.F', 'EL4L.DE', 'IBCA.DE', 'DGTL.MI', 'ERN1.L', 'XEON.MI', 'C13.PA', 'DBX8.F', 'EXHB.DE', 'XZMU.DE', 'SPYM.DE', 'CSH.PA', 'IEMA.AS', 'SBUY.L', 'IGHY.L', 'VUAA.MI', 'GDXJ.L', '18MX.DE', 'ERNE.L', 'C003.F', 'ZPDH.F', 'DGIT.L', 'IDPE.L', 'CE31.L', 'LYS4.DE', 'CI3.MI', 'DBXK.DE', 'EMSM.DE', 'SYBD.F', 'IBC9.DE', 'G2XJ.F', 'IBCA.F', 'X026.F', 'C13.MI', 'EEAA.DE', 'H410.F', 'ITPS.MI', 'XD9U.MI', 'EL4T.DE', 'US13.L', 'UBUS.DE', 'DXSW.DE', 'SYB5.DE', 'ERNE.AS', 'PJS1.MI', 'LYQ2.DE', 'EUN6.DE', 'CEMR.F', 'PHGP.L', 'IBGS.AS', 'VCEU.MI', 'HMJP.SW', 'CBU3.L', 'WTEL.AS', 'ELOW.MI', 'CSNKY.MI', 'VUCE.DE', 'USAUSW.MI', 'BBCK.DE', 'EXVM.DE', 'IQQE.F', 'SXRG.DE', 'DBXP.DE', 'WOSC.L', 'EL48.DE', 'IGLS.L', 'UEF8.DE', 'EUNA.DE', 'IJR.AX', '18MX.F', 'EUNT.DE', 'IE15.L', 'LQDA.AS', 'VDCA.L', 'MI13.PA', 'ZPDF.DE', 'EL4M.F', 'EUN6.F', 'UEF5.DE', 'TRS3.L', 'VUCP.L', 'AAA13.MI', 'IRCP.AS', 'LYS5.DE', 'VJPE.F', 'LYWAT.SW', 'EU35.MI', 'EMKT.MI', 'ES3.SI', 'JU13.L', 'TIPS.MI', 'EL4S.F', 'SDIG.L', 'IBCI.MI', 'CU9.MI', 'QDVH.DE', 'VCPA.L', 'X020.DE', 'X13G.DE', 'STHE.MI', 'AMEM.F', 'SMSEUR.MI', 'VUTY.AS', 'IDBT.L', 'GLAG.MI', 'XMAD.L', 'L8I3.F', 'SUOE.MI', 'EBBB.MI', 'CUKS.L', 'SYB3.F', 'CEMA.L', 'SC0F.DE', '18MY.DE', 'C33.PA', 'EXHC.DE', 'IQEC.MI', 'FLOT.L', 'MTA.PA', 'EUNX.F', 'UC48.L', 'IS0Y.F', 'XMME.MI', 'LYQ3.DE', 'IEMB.MI', 'XUFN.DE', 'EXS2.F', 'TCBT.MI', 'VDUC.L', 'LMWE.F', 'IBCN.DE', 'SYBY.DE', 'AEMD.F', 'XSKR.L', 'EL4S.DE', '18MY.F', 'QDVL.F', 'EXHC.F', 'ESEE.MI', 'PFT.PA', 'HPRD.MI', 'H4ZF.DE', 'SE15.MI', 'LASP.DE', 'IBGX.MI', 'IUST.DE', 'XUEN.DE', 'SXRP.DE', 'KRW.L', 'EM57.MI', 'IEBB.MI', 'SE15.L', 'LDCE.MI', 'EL4M.DE', 'HSPX.L', 'DBXQ.DE', 'X35E.MI', 'ELFD.F', 'E50EUA.MI', 'LEM.PA', 'XBTR.SW', 'RCB.AX', 'TIPU.MI', 'CI3.PA', 'ECOM.MI', 'EUCO.MI', 'H4ZT.DE', 'TPSA.AS', 'EMRG.MI', 'SYB4.F', 'EXH7.DE', 'XUT3.L', 'MWRD.L', 'INFL1.MI', 'SPX.MI', '18M1.F', 'JMBA.MI', 'IAF.AX', 'QDVQ.F', 'ISPY.L', 'IUKP.MI', 'CBO.TO', 'IWRD.MI', 'X13E.MI', 'LESW.DE', 'XUTD.DE', 'H4ZD.DE', 'EROX.SW', 'XDGE.MI', 'LBNK.DE', 'SYBU.DE', 'USTY.L', 'EMIM.AS', 'FLXX.MI', 'XHYG.MI', 'WTEU.DE', 'XGLE.MI', 'JPNJPA.SW', 'IUMF.L', 'TRSX.MI', 'IBGS.MI', 'LYXI.DE', 'IBGX.AS', 'CBE7.AS', 'JPEE.L', 'REAL.F', 'PUIG.DE', 'XYP1.F', 'DBXU.DE', 'USO.MX', 'XBCD.F', 'SYBT.DE', 'TSYE.PA', 'AEJ.MI', 'WTD9.DE', 'EL40.DE', 'DBXT.F', 'LYQ7.F', 'FUSA.DE', 'IRCP.L', 'EL4Z.DE', 'VNQ.MX', 'XG7S.MI', 'IBCN.F', 'SXR4.DE', 'TIUP.DE', 'EESM.DE', 'JNKE.PA', 'LYBK.DE', 'MTB.PA', 'UC07.L', 'MWRD.MI', 'HYBB.MI', 'VEMT.AS', 'EUNU.DE', 'IEAC.MI', 'LYYB.DE', 'EUNT.F', 'LY12.VI', 'FLES.MI', 'X57E.MI', 'IHYG.MI', 'C33.MI', 'UBXX.L', 'FUSD.DE', 'IS0X.DE', 'X03B.F', 'SYBK.F', 'UIM6.DE', 'AUEG.L', 'SPXS.MI', 'IQQK.F', 'MTC.PA', 'BUYB.MI', 'EMGEAS.MI', 'D500.DE', 'SXRG.F', 'PSRW.MI', 'LCUS.DE', 'DBXQ.F', 'IBCI.L', 'BOND.AX', 'FUQA.L', 'CEMS.F', 'SXR8.DE', 'C53.PA', 'SPY4.MI', 'PJSR.F', 'SPY5.DE', 'ACU2.DE', 'UBU3.AS', 'UBIF.L', 'EMIM.L', 'LEEU.F', 'MTI.PA', 'VUAG.L', 'EXH3.DE', 'IBGS.L', 'VUSA.L', 'ZPDW.F', 'SS1EUA.MI', 'XMMS.L', 'HMYD.MI', 'XD9U.DE', 'P500.DE', 'SYBZ.DE', 'CSUS.MI', 'UIMI.DE', 'VUTY.L', 'IBC3.DE', 'SC0H.DE', '6TVM.DE', 'LGWU.DE', 'DJSC.AS', 'SEMA.L', 'UEF5.AS', 'DBX7.F', 'SYBT.F', 'JPST.MI', 'IUSA.AS', 'LESU.F', 'EMRG.PA', 'OM3F.DE', 'ZPRC.F', 'DHS.L', 'VNRT.DE', 'CBBB.MI', 'VFEM.DE', 'SEMB.L', 'IS3M.F', 'IEAG.MI', 'XQUA.DE', 'VHYL.SW', 'SPYJ.F', 'IHYG.L', 'SPXE.MI', 'SUSS.L', 'HWWA.MI', 'UBU9.DE', 'CEU.MI', 'USA.PA', 'SYBQ.DE', '18MZ.DE', 'VIF.AX', 'N6M.SI', 'ISPY.AS', 'IS3N.DE', 'IUSA.DE', 'IHYU.L', 'EFQ2.F', 'IBCK.DE', 'EUNH.F', 'EUN9.DE', 'RSGL.L', 'XGSH.MI', 'VUCP.MI', 'UKRE.L', 'INRG.MI', 'EAGG.PA', 'EXHB.F', 'XDUS.L', 'SPY5.PA', 'SPXS.AS', 'CSPX.AS', 'UIMI.F', 'ESEE.DE', 'QDVQ.DE', 'MUS.PA', 'EXHA.DE', 'EL4R.DE', 'EL4R.F', 'IBC5.F', 'VUAA.DE', 'LYM7.F', 'LCVB.DE', 'SDJ600.MI', 'CSSPX.MI', 'AGED.L', 'TCBT.DE', 'SC04.DE', 'TIP5.L', 'EL49.F', 'BNKE.MI', 'IS31.DE', 'LSPX.L', 'EIMI.MI', 'XMIB.MI', 'LYXC.DE', 'HMEM.L', 'PSRUSA.SW', 'XSFR.L', 'IBGX.L', 'D5BC.F', 'XRE.TO', 'VUSA.DE', 'FUSI.L', 'BUYB.L', 'EXI5.F', '1393.T', 'EXHA.F', 'C53.MI', 'SPXP.L', 'ENOA.DE', '1386.T', 'IBGY.MI', 'DXSQ.DE', 'EUNZ.DE', 'JNKE.MI', 'DXSW.F', 'XYPD.DE', 'WSRUSA.SW', 'ZCS.TO', 'CAPU.L', 'HHH.PA', 'AUHEUA.MI', 'VNRT.L', 'VJPA.MI', 'GFEA.DE', 'JPEA.SW', 'ACWI.MI', 'EUNW.DE', 'FLXU.L', 'XY4P.MI', 'HYEM.L', 'VWRL.MI', 'ICOV.MI', 'CSEMUS.MI', 'IBGE.L', 'VNRA.DE', 'IUS4.DE', 'SJNK.L', 'OSXJ.DE', 'CE71.L', 'EXHF.DE', 'VETY.MI', 'IBCI.AS', '6PSA.DE', 'UEFS.DE', 'EL4U.F', 'TMX.AS', 'CORP.MI', 'ELOW.SW', 'IQQN.DE', 'X013.DE', 'EEE.PA', 'USPY.DE', 'SPX5.L', 'TCC4.DE', 'TIPS.L', 'EMAAA.MI', 'VECP.DE', 'IBCX.AS', 'IBCX.MI', '18MZ.F', '1566.T', 'XSPX.L', 'GGOV.MI', 'EL4N.F', 'FEMI.L', 'EUN5.DE', 'IS0M.DE', 'USCP.DE', 'XGLU.F', 'UEFI.AS', 'DBXR.DE', 'JPBM.L', 'UTIP.L', 'SYBC.F', 'EUCO.L', 'CRPS.L', 'VNRT.AS', 'CC4.MI', 'UINC.L', 'BUYB.PA', 'HSPD.MI', 'EL4U.DE', 'SUES.L', 'SDHY.L', 'GMVM.DE', 'ZPRV.DE', 'TIPG.L', 'LYQY.DE', 'EUNZ.F', 'UEFI.DE', 'XB4F.MI', 'CRPE.MI', 'VLUS.DE', 'WTES.DE', 'EUNW.F', 'EUEUA.MI', 'IS0S.DE', 'EXHE.MI', 'IPRV.SW', 'IUS6.DE', '1577.T', 'XUEM.DE', 'HY.MI', 'SP5L.L', 'EGOV.MI', 'OSXJ.F', 'VUSA.AS', 'EJAH.MI', 'EXXT.DE', 'CMB1.L', 'E500.MI', 'LYX7.DE', 'SPP7.DE', 'LTCM.DE', 'EL4N.DE', 'JPBM.DE', 'VFEA.MI', 'VFEA.F', 'DBXU.F', 'PFF.MX', 'IBCS.F', 'UEFR.AS', 'IUSA.L', 'XJSE.DE', 'UBUT.F', 'PQVG.L', 'EUN3.DE', 'IUS6.F', 'XUEB.DE', 'D5BG.DE', 'ECBD.MI', '1343.T', 'EUCO.PA', 'BTMA.AS', 'HMAF.MI', 'LDCE.F', 'XLF.MX', 'EUN5.F', 'IUS4.F', 'DBXP.F', 'TGBT.DE', 'JPN.MI', 'H4ZT.F', 'EXS3.F', 'VGB.AX', 'IUSM.DE', 'LYMS.DE', 'XMK9.F', 'SC0Q.DE', 'STRX.MI', 'EUNR.F', 'EM710.MI', 'USUE.DE', 'FEXU.L', 'XUTE.MI', 'IUVF.L', 'MDAXEX.SW', 'VFEM.AS', 'VFEM.MI', 'DJSC.MI', 'IBCY.F', 'LQDS.L', 'UPVLD.MI', 'IEI.MX', 'TSWE.MI', 'XDEP.DE', 'MOGB.L', 'X010.F', 'H4Z9.F', 'XTXC.MI', 'IEAC.AS', 'XGLE.L', 'XLFS.L', 'GBS.L', 'X03F.F', 'EGRA.MI', 'SMSWLD.MI', 'LYQ2.F', 'XRES.MI', 'EXHE.DE', 'UIMC.F', 'NXTG.L', 'XDEP.MI', 'MIVU.DE', 'EMBE.MI', 'LYEB.DE', 'CONV.MI', 'US7.MI', 'WTD7.DE', 'IEAC.L', 'GLAD.L', 'VLUD.DE', 'OSXF.DE', 'XDGU.DE', 'ZSIL.SW', 'LUXU.PA', 'XMJP.MI', 'EUNM.F', 'LQDE.MI', 'XGVD.MI', 'VEMT.L', 'VECP.MI', 'XU61.F', 'PJS1.F', 'IBGZ.MI', 'VEMT.MI', 'PHAU.L', 'JBEM.MI', 'XCAN.SW', 'UC98.L', 'C73.MI', 'IITB.MI', 'IBC5.DE', 'XRSM.MI', 'MVUS.L', 'SNAZ.F', 'CSBGU7.MI', 'UC86.L', 'CM9.MI', 'ZPRU.DE', 'ZPS.TO', 'X03C.F', 'XMCX.L', '18MG.DE', 'XBAE.MI', 'JBEM.DE', 'WLD.MI', 'SPY2.DE', 'JBEM.F', 'CSUS.AS', 'EU13.L', 'XIT.TO', 'JPSRE.MI', 'SHYG.L', 'UST.MI', 'DBXN.DE', 'EXHD.DE', 'KX1G.DE', 'EMLP.L', 'CB3G.DE', 'HWWA.L', 'XLPE.L', 'LYPS.F', 'WSREUA.MI', 'EWI.MX', 'MIVU.PA', 'SXR5.F', 'TRSY.MI', 'D5BM.DE', '1387.T', 'WTDM.DE', 'QDVD.DE', 'IEXF.MI', 'JMBE.MI', 'SXRL.DE', 'SRECHA.SW', 'D5BL.F', 'XHY1.MI', 'ROAI.DE', 'EXXT.F', 'HIDR.L', 'SP5.PA', '2B79.DE', 'SMRE.F', 'UIMC.DE', '00668K.TW', 'SEAB.DE', 'CIND.L', 'PLUS.AX', 'C73.PA', 'IUS8.DE', 'DBXR.F', 'IS0Z.DE', 'QDVI.DE', 'INAA.AS', 'VEMA.L', 'IBC3.F', 'CSUS.L', 'CBUG.L', 'LYBF.DE', 'QDVS.DE', 'MVOL.SW', 'SHEME.MI', 'UKDV.SW', 'UIMB.F', 'ECRP.MI', 'EUN4.DE', 'TIP1E.MI', 'EMWE.MI', 'XDWF.MI', 'IBGM.AS', 'EUN9.F', 'SPYX.F', 'XBAG.L', 'UIMI.AS', 'CGB.F', 'XMAW.F', 'A35.SI', 'DIA.AS', 'LYQ1.DE', 'IS06.F', 'LYXD.DE', 'IBCM.DE', 'CSNDX.MI', 'CM9.PA', 'LYPE.F', 'IBCS.DE', 'DBX3.F', 'EUNS.F', 'X7PS.MI', 'CBSUSE.MI', 'VDTE.F', '00668.TW', 'EMOM.MI', 'EMV.MI', 'EXHD.F', 'EMRD.L', 'SMLP.DE', 'QDVC.F', 'BYBG.L', 'XBAG.DE', 'IBCG.F', 'EKLD.PA', 'MXFS.L', 'IESZ.MI', 'CNDX.AS', 'DX2D.DE', 'SXRR.F', 'IFRB.AS', 'ECBD.F', 'DEM.MI', 'XD9U.L', 'MVOL.MI', 'IBCD.F', 'RGB.AX', 'XLKS.MI', 'DGTL.L', 'EL4P.F', 'FEXD.L', 'TIUP.F', 'XDND.DE', 'IS0M.F', 'XUFN.L', 'LGOV.MI', 'IBCX.L', 'IBC2.F', 'GDX.SW', 'IS0P.F', 'CBEF.MI', 'IBGM.MI', 'ATIP.MI', 'EL4K.DE', 'EL4K.F', 'AHYE.DE', 'XLEP.L', 'EUN4.F', 'DBXB.DE', 'XDJP.DE', 'SGEA.L', 'UBU3.DE', 'VFEM.L', 'ECOM.L', 'UB0A.L', 'EGV3.F', 'EXV2.DE', 'IESU.L', 'AFIN.DE', 'IBTM.L', 'UB30.L', 'BYI.SI', 'ALQD.F', 'LCUJ.DE', 'VECP.L', 'XZMU.L', '18M0.DE', 'EXHF.F', 'CBSEU.MI', 'LEER.F', 'SEGA.MI', 'ZPRS.F', 'EMMUSC.MI', 'SXRV.DE', 'GGOV.L', 'IBC9.F', 'MTX.PA', 'EL4P.DE', 'DE5A.DE', 'SGLO.L', 'J1GR.DE', 'UIM5.F', 'EIMI.L', 'IBTM.MI', 'SC04.F', 'D5BB.DE', 'UEFD.AS', 'LKOR.F', 'CE8G.DE', 'IUSP.AS', 'IEBC.L', 'UIMM.F', 'VCSH.MX', 'XGVD.F', 'VAF.AX', 'IS02.DE', 'HDLV.PA', 'SUAS.L', 'FUSA.L', 'LTAM.MI', 'ECRP.L', 'SYBR.F', 'IS0L.F', 'VETY.L', 'SEGA.L', 'XDJE.F', 'IBCI.F', 'CBU7.L', 'DBZB.F', 'LYXA.DE', 'MAA.PA', 'LYQS.DE', 'MCHI.MX', 'SXRQ.DE', 'XBLC.MI', 'IDNA.L', 'CB3G.F', 'GLRE.MI', 'IUES.L', '10AL.F', 'XDGU.MI', 'SXRV.F', 'XMJP.SW', 'GFA.L', 'VUTY.MI', 'XMWO.MI', 'IS3F.F', 'SMLD.DE', 'IEGA.AS', 'IS3C.DE', 'FUSD.L', 'XBAE.DE', 'KLMT.DE', 'VWCE.MI', 'MI10.PA', 'SXR4.F', 'XDJP.MI', 'CSHD.L', 'USFMD.MI', 'VWRL.L', 'SYBY.F', 'STZX.MI', 'UEF6.F', 'KRE.MX', 'SAAA.L', 'EXI2.DE', 'GGRA.MI', 'TRS5.MI', 'EMKTB.MI', 'UBUR.AS', 'UBUR.DE', 'CSBGE7.MI', 'JMBA.DE', 'SP5H.PA', 'DBXN.F', 'VGEA.F', 'SPYC.DE', 'LTWN.F', 'UETW.DE', 'EMKX.F', 'QDVB.F', 'IUST.F', 'SPY1.DE', 'XDUK.F', 'VFEG.L', '18M3.F', 'MMS.PA', 'XMUD.L', 'U71G.L', 'DXSQ.F', 'VAPX.SW', 'DBXX.F', 'UEEH.DE', 'G2X.DE', 'UQLTD.MI', 'DJSC.L', 'GOVT.AX', 'LWCR.DE', 'RUSG.L', 'ISJP.MI', 'XLIQ.F', 'ETLZ.F', 'VECA.L', 'FTGU.DE', 'UCAP.L', 'FVUI.DE', 'XLFS.MI', 'IQQH.DE', 'SYBU.F', 'IUSF.L', 'PQVM.PA', 'CGB.MI', 'VDTA.L', 'GRC.MI', 'XMKA.DE', 'C10.PA', 'XY4P.F', 'XGLF.F', 'USIG.MI', 'GOVY.MI', 'CLF.TO', 'COVR.F', 'X03G.F', 'EQLTD.MI', 'DGRG.L', 'PSRW.L', 'EGV5.F', '18MW.DE', 'LCUD.L', 'UET1.DE', 'XUTD.MI', 'XMME.L', 'LWCR.MI', 'LYQ6.DE', 'IUSA.SW', 'LYQ6.F', 'JPNH.F', 'SEAA.F', 'LUXU.L', 'X026.DE', 'EMSM.F', 'GLAB.L', 'EL45.DE', 'JE13.F', 'BEL.BR', 'HMUD.L', 'LEMD.L', 'XQUA.F', 'IQQ7.F', 'USPY.L', 'CNKY.L', 'EUNN.DE', '540J.F', 'EXVM.F', 'VNRA.L', 'UKGBPB.MI', 'JPMB.MI', 'XDEM.MI', 'LQDH.L', 'X710.MI', 'UETE.DE', 'HSPX.SW', 'RUSL.L', 'ESAP.DE', 'XIG.TO', 'VWRL.AS', 'FLXU.DE', 'UBUW.DE', 'SBEM.L', 'REWLD.MI', '2B76.DE', 'MAGB.SW', 'IQQ0.DE', 'MTE.PA', 'XU6C.F', 'EMSM.L', 'IBGM.L', 'IUKP.L', 'SXRQ.F', 'DX22.F', 'XEMB.MI', 'IFSU.MI', 'VJPN.DE', 'WTDY.DE', 'GLAE.MI', 'EXX1.DE', 'IUS7.F', 'TRS3.MI', 'CW8.MI', 'PUIG.MI', 'CU1.MI', 'XMIN.MI', 'XZMJ.DE', 'HMWD.MI', '18M0.F', 'GDX.L', 'QDVG.F', 'VEVE.MI', 'QDVA.DE', 'SPYD.DE', 'SE15.SW', 'RBTX.L', 'EXSE.F', 'IQQ7.DE', 'WLD.PA', 'VDTY.L', 'XMLP.DE', 'XDNY.DE', 'EVAE.MI', 'F701.F', 'SXR6.DE', 'DHSA.L', 'ZPRA.F', 'SC0K.F', 'AHYE.MI', 'USVL.L', 'XY1D.F', 'HDIQ.L', 'DBZB.DE', 'SPXS.L', 'HDLV.DE', '0054.TW', 'TRSY.L', 'LCRP.L', 'VDNR.L', 'SPP7.F', 'IDEM.L', 'DBX0.DE', 'EMLB.L', 'XBAI.F', 'XDWD.DE', 'IBC4.DE', 'VGWL.F', 'XMAW.DE', 'IUSN.DE', 'CSPX.L', 'AEMD.L', 'XSPU.L', 'LYQ1.F', '1319.T', 'IM2A.F', 'IS3B.F', 'HSPD.L', 'EIMU.L', 'SC0J.DE', 'XUTD.F', 'LYXD.F', 'XXSC.MI', 'IUSQ.DE', 'LSPU.L', 'VUAA.L', 'PQVM.L', 'SPYI.DE', 'IEF.MX', 'XDWD.MI', 'LUSC.MI', 'IBCM.F', 'JPEH.L', 'UB69.L', 'EUHI.MI', 'ZHY.TO', 'XTR.TO', 'WFIN.AS', 'XDEW.F', 'CES1.L', 'ISXF.L', 'EISR.MI', 'TIPU.L', 'IUSP.MI', 'MXFP.L', 'ESEA.DE', 'SPXD.L', 'LYY0.DE', 'P5P.SI', '1575.T', 'AUCO.L', 'ILB.AX', 'OM3M.F', 'EFQ8.F', 'IBB1.F', 'EXX5.DE', 'SDEU.L', 'IUSM.F', 'JPNH.MI', 'LCUW.DE', 'RBOT.MI', 'U500.AS', 'DBXM.DE', 'NTM.AS', 'JPNA.MI', 'VGWL.DE', 'XYLD.MI', 'XZW0.MI', 'HKDE.AS', 'ZPDS.F', 'EL40.F', 'SXLK.MI', 'QVMP.DE', 'AMEW.DE', 'XDEB.L', 'SPY5.F', 'H4ZC.DE', 'IUSP.DE', 'UEF5.F', 'ENG.PA', 'UEFD.F', 'NASD.L', 'EGV7.F', 'DBXB.F', 'JPEA.L', 'XIDD.L', 'IUSP.L', 'X010.DE', 'XDEB.DE', '3SUR.F', 'LYXA.F', 'UBU7.DE', 'SC0U.DE', 'BSUS.L', 'PRUS.L', 'VUSD.L', 'JPN.PA', 'IDTP.L', 'XNIF.MI', 'EJAH.DE', 'EURO.MI', 'WTED.DE', 'IBGL.AS', 'DECR.F', 'US3.MI', 'TRET.MI', 'GLUX.F', 'EUNL.DE', 'CP9.MI', 'AM3A.MI', 'UIMM.AS', 'MOAT.L', 'LYYA.DE', 'HDLV.MI', 'MD4X.F', 'SXRZ.DE', 'SXRZ.F', 'LYDAX.SW', 'DBXW.DE', 'SWDA.MI', 'IUFS.L', 'CEBB.DE', 'OSXM.DE', 'XREA.F', 'E127.DE', 'D5BB.F', 'SYBS.DE', 'IUAG.L', 'SUSW.MI', 'IS0Z.F', 'VDET.L', 'CRPX.L', 'XTXC.SW', 'SMLW.F', 'UEQD.DE', 'DXS1.F', 'LYY4.DE', 'AGEB.MI', 'ZCM.TO', 'XZW0.DE', 'IBCG.DE', 'IEMA.L', 'CLIM.MI', 'JPNE.F', 'UBUW.AS', 'VGVF.DE', 'WDSC.L', 'DBXK.F', 'XDEW.DE', 'LQDE.SW', 'IMIE.MI', 'XHYA.F', 'GAGU.AS', 'EJAP.DE', 'IMIE.PA', 'EM1C.DE', 'DBXJ.F', 'UC97.L', 'XRS2.F', 'EXS2.DE', 'EXX7.DE', 'XDWT.MI', 'DBXJ.DE', 'SC0I.DE', 'ACWL.L', 'XDWL.DE', 'XD5E.MI', 'SC0Q.F', 'EDEU.DE', 'IBTM.SW', 'CSJP.MI', 'SJPA.MI', 'MIBX.L', 'IJPN.MI', 'UIM5.DE', 'ZPRI.F', 'SWDA.L', '18MW.F', 'EXHE.F', 'X15E.MI', 'ESEH.DE', 'XDWF.DE', 'XSTC.L', 'VDCP.L', 'EL44.DE', 'EL44.DE', 'SPYR.DE', 'JPJY.PA', 'EVOU.MI', 'LYTNOW.SW', 'SPY5.L', 'STNX.SW', 'INFR.AS', 'IQQI.DE', 'IDUS.L', 'JPNH.DE', 'UBU7.AS', 'XMK9.DE', 'VEVE.AS', 'SSAC.L', 'CWF.PA', 'FLXU.F', 'IEMB.L', 'VWRP.L', 'WRD.PA', 'DBXF.DE', 'XCS2.MI', 'SPYY.DE', 'SYB5.F', 'IBCL.DE', 'UEFR.F', 'WDFI.DE', 'XDCC.DE', 'SUSM.L', 'XMAW.L', 'UIM7.F', 'IQQJ.DE', 'O9P.SI', 'VWCE.DE', 'VJPA.F', 'LOWV.MI', 'NAMU.AS', 'XNKY.DE', 'VHVG.L', 'G3B.SI', 'IWRD.AS', 'IQQW.DE', 'SXRP.F', 'HY3M.DE', 'WRDEUA.MI', 'UC99.L', 'SXR5.DE', 'USIH.MI', 'LCWD.PA', 'MINV.L', '2B7J.DE', 'QDVC.DE', 'XDJP.L', 'UC44.L', 'B500.DE', 'XDEW.L', 'ZPRV.F', 'EMGB.L', 'UIMM.DE', 'XUS.TO', 'MTF.PA', 'EUNN.F', 'UIMB.DE', 'ACWI.L', 'DXSU.DE', 'USDV.L', 'X022.F', 'IS0X.F', 'XJSE.MI', 'IEMI.L', 'ZSRL.DE', 'ACWE.PA', 'XMJP.L', 'MJP.PA', 'JMBA.L', 'VERE.MI', 'IWRD.L', 'IJPE.MI', 'SXRM.DE', 'USDV.MI', '2B7F.DE', 'XMRC.L', 'SYBM.F', 'UCAP.SW', 'DJMC.MI', 'VDEA.L', 'ZPDJ.DE', 'IDTM.L', 'ZPDJ.F', 'XRSS.L', 'LYNRGW.SW', 'VWCE.F', 'SEAC.DE', 'HTWN.L', 'XEN.TO', 'LYXI.F', 'CBU0.L', 'DXSK.DE', 'IUVL.L', 'VUSC.MI', 'XLES.L', 'IJPE.AS', 'IVV.MX', 'HMWO.L', 'USLV.L', 'IBGL.L', 'EISR.PA', 'VDEM.L', 'XZMJ.MI', 'XMD.TO', 'SJPA.L', 'XUTC.DE', 'N400.MI', 'XBAG.MI', 'XGRO.TO', 'SBEG.L', 'IJPA.AS', 'LGWU.F', 'SMLW.DE', 'CANCDA.SW', 'EFIW.MI', 'SYBB.F', 'IBGL.MI', 'B500.F', 'XUTE.F', 'LYY4.F', 'IJPN.AS', 'IQJP.MI', 'STSX.MI', 'VYM.MX', 'UIM5.AS', 'MTDD.F', 'XQUE.MI', 'IQQJ.F', 'FLXG.DE', 'UIQI.F', 'MXWS.L', 'IJPN.L', 'XDNY.F', 'IGEA.L', 'VJPA.DE', 'EL41.DE', 'XQB.TO', 'EMWE.DE', 'EMLI.MI', 'FSUS.L', 'IQQW.F', 'IUS5.DE', 'EMLD.PA', 'EXV1.F', 'US71.L', 'C10.MI', 'AGGG.L', 'IWDA.AS', 'VEVE.L', 'XEUM.L', 'SMLN.DE', 'SMLN.F', 'IUQF.L', 'ZDJ.TO', 'XDWU.F', 'WEMG.AX', 'CSJP.AS', 'IWDP.AS', 'QDVA.F', 'LCWL.L', 'FIG.TO', 'UBUT.AS', 'IMBS.L', 'HYLE.F', 'IS05.F', 'ZPRG.DE', 'EMCR.L', 'VJPB.L', 'VLUU.DE', 'MAGI.L', 'LYPD.DE', 'LQDE.L', 'XCB.TO', 'COW.TO', 'WSML.L', 'EZU.MX', 'L6EW.L', 'XWEH.MI', 'IAAA.L', 'UIM7.DE', 'LYPG.F', 'XGIU.L', 'XWLD.L', 'LYXF.DE', 'SPY4.PA', 'XRSM.DE', 'SM8T.DE', 'XGIU.MI', 'ISJP.L', 'SGIL.L', 'D5BG.F', 'VEUR.SW', 'IUSZ.L', 'BNKE.L', 'DX2Z.DE', 'JPMB.L', 'QDVB.DE', 'X022.DE', '36B7.F', 'QQQ.MX', 'H41J.DE', 'EL4J.DE', 'SMRT.MI', 'JPXY.AS', 'XDWI.F', 'UBUT.DE', 'CDIS.L', 'H4ZJ.DE', 'ZAG.TO', 'JPEH.MI', 'IQQM.DE', 'SXRJ.F', 'XBAL.TO', 'XS7W.F', 'GAGG.MI', 'GLDV.MI', 'XBAT.F', 'VECA.F', 'DBXH.DE', 'GGOU.AS', 'EXX5.MI', 'IS0S.F', 'IWDP.MI', 'SYBG.DE', 'EEP.DE', 'XNIF.L', 'DHSD.L', 'VWO', 'ENOA.F', 'XUTD.L', 'IBCL.F', 'VOO.MX', 'EM15.MI', 'HPRO.L', 'DBXF.F', 'FGEQ.DE', 'IS0D.DE', 'IGLT.L', 'H4ZJ.F', 'XGID.L', 'SXRF.F', 'KLMH.F', 'DFEA.L', 'XMTD.L', 'C010.F', 'X7PP.L', 'EMSD.L', 'USAU.L', 'QDVE.DE', 'SLXX.L', 'NADB.F', 'WTEI.DE', 'SEML.MI', 'SPY4.DE', 'H4ZU.F', 'IS3T.DE', 'XDNE.F', 'EL4Q.F', 'CNDX.L', 'DJEU.L', 'JMBE.DE', 'DGRW.L', 'XLKQ.L', 'TWN.MI', 'TRET.DE', 'IUMO.L', 'CSBGC0.SW', 'IS3C.F', 'XLPS.L', 'IQQ6.DE', 'UEFI.F', '10AH.F', 'EUN3.F', 'XBB.TO', 'LYPG.DE', 'GBRE.L', 'SYBQ.F', 'SUJA.L', 'GENE.L', 'UBUV.DE', 'VJPN.L', 'HDLG.L', 'IS3V.F', 'SUJP.MI', 'LUTR.MI', 'EL4Q.DE', 'EGRW.L', 'PAF.PA', 'RARI.AX', '2B7K.DE', 'SBEM.MI', 'CE01.L', 'GILS.PA', 'VHYL.MI', 'DBXG.DE', 'IUSQ.F', 'FGQD.L', 'XQUI.MI', 'ZFM.TO', 'XUTC.L', 'VLUD.F', 'IITU.L', 'H4ZL.DE', 'IWDE.AS', 'NS4E.F', 'XMRC.MI', 'GENDEE.MI', 'VLUS.F', 'EXI3.F', 'ZPRA.DE', 'SPY4.F', 'DBXG.F', 'ULOVE.MI', 'VGOV.DE', 'UBU9.AS', 'VDJP.L', 'DGRA.L', 'PSWD.DE', 'IWDE.MI', 'C020.F', '2B7A.DE', 'SPYX.DE', 'XDWT.DE', 'EMDL.L', 'PACUSA.SW', 'DGSE.L', 'VAPX.MI', 'WTED.F', 'GENG.L', 'ETLX.F', 'GRE.PA', 'WTEM.DE', 'H4ZQ.DE', 'DX2J.DE', 'HRUB.L', 'EXX6.F', 'MVA.AX', 'ZPDU.DE', 'WTD9.F', 'INDB.F', 'DJAM.F', 'CSRU.AS', 'SEML.L', 'EXX6.DE', 'MLPI.MI', 'WESG.L', 'SPOG.L', 'X020.F', 'SXRU.F', '540H.F', 'IWDA.L', 'HTWD.L', 'EFIE.L', 'FLXU.MI', 'IUSA.F', 'LRUS.DE', 'VWRA.L', 'QDVW.DE', 'IBC7.F', 'UEEA.DE', 'CSRU.MI', 'SXLU.AS', 'IWFV.L', 'XDWD.F', 'SPYJ.DE', 'C020.DE', 'XG7S.F', 'TGET.MI', 'SP5C.L', 'IGLT.MI', 'XGB.TO', 'IROB.F', 'SPMV.L', 'SYBJ.F', 'VAPX.AS', 'ZPDT.DE', 'WTDM.F', 'GWT.PA', 'IS0E.F', 'VWRD.L', 'EUNL.F', 'SUWU.AS', 'GBDV.L', 'SYBV.F', 'RUSL.DE', 'GGUE.DE', 'IBCH.DE', 'MLPP.L', 'SYBN.DE', 'HDLV.L', 'EMDE.MI', 'EUPE.DE', 'UIMP.F', 'TOF.AS', 'FINW.L', 'EJAP.F', 'SGWS.L', 'EPRA.L', 'BBCK.F', 'XS3R.L', 'DEM.L', 'DWCR', 'VETA.L', 'IDJP.L', 'VFEA.L', 'DX2Z.F', 'DBXV.DE', 'XGD.TO', 'SPYZ.DE', 'CWFU.PA', 'VOOM.DE', 'GGRG.L', 'UBUV.AS', 'UIMY.AS', 'EXX7.F', 'VJPN.AS', 'IWFM.L', 'SPFA.DE', 'UBU3.F', 'IYH.MX', 'ZYUS.AX', 'IUS5.F', 'VFEA.DE', 'SPPX.DE', 'XDEM.L', 'LMWE.DE', 'UC65.L', 'UEFS.F', 'IJPA.L', 'INFR.MI', 'EL4V.F', 'JPNEUA.MI', 'PSRW.PA', 'MIVA.DE', 'IS05.DE', 'LEMV.L', 'GLAG.L', 'H4ZM.DE', 'XDEM.DE', 'XDWY.DE', 'KFTK.DE', 'CBUE.F', 'IQQT.DE', 'SPPD.F', 'IFSW.MI', 'XD9U.F', 'UBU5.F', 'EXI5.DE', 'DJAD.DE', '100GBA.SW', 'IWFS.L', 'HXS.TO', 'LUSC.L', 'FRCK.DE', 'SYBM.DE', 'XDW0.MI', 'IDWR.L', 'DXSI.F', 'COUK.PA', 'WTEU.F', 'VWO.MX', 'SC0G.DE', 'VGK.MX', 'VHVE.L', 'GDX.MI', 'WTCH.AS', 'EL4V.DE', 'DX2D.F', 'CJ1U.L', 'UIMT.F', 'XZMJ.L', 'EMLD.MI', 'UIMT.DE', 'X25E.MI', 'EWRD.DE', 'PEMD.L', 'WRDU.AS', 'ZPDF.F', 'MTIX.L', 'XDJP.F', 'AUCP.L', 'UIM6.F', 'IS04.DE', 'XDWI.MI', 'EWRD.PA', 'IBCY.DE', '10AK.F', 'EXH9.F', 'H4ZC.F', 'EXH7.F', 'SXLK.AS', 'XZW0.L', 'SXR6.F', 'IS3R.DE', 'D5BM.F', 'VGUE.F', 'VNRA.F', 'VGWE.DE', 'IBCQ.F', 'XDNY.L', 'ZPRX.F', 'XMJD.L', 'VDEV.L', '1560.T', 'CI2.MI', 'QDVE.F', 'IWQU.MI', 'XREA.DE', 'EL4D.DE', 'LOWV.L', 'UEFY.DE', 'WLDD.L', 'ISAC.L', 'US10.MI', 'JSRI.DE', 'ELOW.PA', 'DFEP.L', 'WTD8.F', 'QDIV.L', 'LYYB.F', 'ZGI.TO', 'QDVD.F', 'XHY1.F', 'HZAR.PA', 'WING.L', 'EL4I.F', '18MM.DE', 'AUCO.MI', 'VGWD.DE', 'LCWD.L', 'H4ZD.F', 'EXV2.F', 'DBX5.DE', 'VJPA.L', 'XDWD.L', 'IWVG.L', 'MXWO.L', 'LHTC.DE', 'ACWD.L', 'H4ZU.DE', 'X014.F', 'LEMB.L', 'VUKE.MI', 'XLKS.L', 'SC0H.F', 'VJPN.MI', 'VTS.AX', 'SPY.AX', 'IWMO.MI', 'PSREUA.MI', 'IDWP.L', 'SMLP.F', 'LEEU.DE', 'HMJD.L', 'ISFR.L', 'QDVH.F', 'ESRI.DE', 'PHPM.L', 'X013.F', 'INDA.F', 'HMWD.L', 'EXS3.DE', 'STKX.SW', 'IEDY.SW', 'XDEQ.MI', 'IUSL.DE', 'EXSD.DE', 'IBTL.L', 'ELLE.PA', 'UIMT.AS', 'EUNI.DE', 'AHYE.F', 'UDVD.L', 'DJMC.AS', 'IGSG.AS', 'U1FB.DE', 'XGII.MI', 'ROBO.MI', 'UBUS.F', 'CIF.TO', 'PEF.MI', 'LTWN.DE', 'XDEQ.DE', 'IEFA.MX', 'EFIW.L', 'GDGB.L', 'IWVL.MI', 'IS3S.DE', 'TSWE.DE', 'EHLT.DE', 'ZPRU.F', 'E15G.F', 'DX2E.F', 'IEQU.MI', 'XDEV.DE', 'IUQA.L', 'IASP.AS', 'IS3Q.DE', 'X014.DE', 'HPRD.L', '1325.T', 'LCJD.L', 'IS04.F', 'IEML.L', 'SC0T.DE', 'H41J.F', 'FRCJ.F', 'ZPAL.SW', '6PSA.F', 'FTAL.SW', '006205.TW', 'JPBM.F', 'IQQ4.DE', 'VHYL.AS', 'DBX7.DE', 'IDUP.L', 'TNOW.PA', 'HXDM.TO', 'XRMU.L', 'REAL.DE', 'PSRM.L', 'SBEME.MI', 'SC03.F', 'MLPD.MI', 'UBUX.DE', 'DBXW.F', 'XCG.TO', 'CDZ.TO', 'CSRU.L', 'VLED.DE', 'ROBG.L', 'ISWD.L', 'WTIM.DE', 'XSMI.SW', 'IAA.AX', 'WTD7.F', 'PADV.MI', 'IS3R.F', 'FRCJ.DE', 'IQQN.F', 'EL4Z.F', 'JPNU.L', 'DVY.MX', 'BYBU.PA', 'VUKE.SW', 'DJMC.L', 'SUJP.L', 'NRGW.PA', 'DNRA.F', 'ZCN.TO', 'H4ZF.F', 'HXQ.TO', 'WTD8.DE', 'XMVE.DE', 'XGIN.MI', 'BYBE.PA', 'XASX.L', 'VLEU.DE', 'XDEQ.L', 'CWE.PA', 'CSSMIM.SW', 'JPSR.AS', 'T10G.L', 'JPSR.L', 'QDVI.F', 'SPGP.L', 'DXSK.F', 'FLUC.L', 'XSDR.L', 'GGRP.L', 'IWRD.SW', 'IQQ0.F', '18M6.DE', 'IS3T.F', 'IXN.MX', 'XBAG.SW', 'UIMY.F', 'FGQI.L', 'H4ZV.F', 'DEMD.L', 'XXSC.L', 'QR9.SI', 'LGWT.DE', 'LYMS.F', 'ZPRL.F', 'SPYD.F', 'RDV.AX', 'AYEP.DE', 'ESEE.F', 'DXSE.DE', 'UBU9.F', 'WTDY.F', 'IRSA.L', 'GLRA.L', 'LQQ.PA', 'XDWU.MI', 'XDEV.MI', 'UBUX.AS', 'SPYV.DE', 'SPYY.F', 'SC0J.F', 'IUSL.F', 'S6EW.PA', 'WTES.F', 'QDVR.F', 'XIC.TO', 'LYPB.F', 'PADV.L', 'SXR8.F', 'TRET.L', 'XDW0.DE', 'TNOW.L', 'XMWD.L', 'UKSR.AS', 'HRUD.L', 'UB45.L', 'DBX0.F', 'FTGG.DE', 'IASP.MI', 'LGQM.DE', 'SPY.MX', 'GLDV.L', 'IEER.AS', 'WQDV.L', 'ITKY.MI', 'RUS.MI', 'CH5.MI', 'P500.F', 'IWMO.L', 'U1FA.AS', 'ZUQ.TO', 'EPRU.AS', 'XJSE.F', 'CJPU.L', 'DGSD.L', 'UBU7.F', 'IWFQ.L', 'ZPR6.F', 'EMUX.DE', 'EHDV.DE', 'EUHD.PA', 'SPYC.F', 'IGIL.L', 'MLPX.L', 'VHYG.L', 'ISDW.L', 'EL44.F', 'MLPI.L', 'DX2I.DE', 'IJPU.L', 'TNAE.L', 'XCS3.F', 'SC0F.F', 'VEA.MX', 'WNRG.AS', 'IDIN.L', 'OSX6.F', 'VLED.PA', 'IFSU.L', 'PEH.MI', 'IGSG.L', 'IEMS.L', 'EMDD.L', 'IISU.L', 'IOGP.L', 'IROB.DE', 'H4ZK.DE', 'HXT.TO', 'CEMT.DE', 'C029.DE', 'STAW.L', 'EPVLD.MI', 'QK9.SI', 'WQDS.L', 'SPYV.F', 'CH5.PA', 'SMEA.MI', 'EXSA.MI', 'LYPQ.DE', 'GLRE.L', 'EL45.F', 'LYMH.DE', 'LCEU.DE', 'LYPD.F', 'EUMV.MI', 'EXV5.F', 'SPYH.DE', 'SXLU.MI', 'WUTI.AS', 'VDPG.L', 'WDFI.F', 'EL4Y.DE', 'MIVO.MI', '3SUD.F', '3SUD.F', 'EJAH.F', 'HRUB.MI', 'HYLA.L', 'ISDE.L', 'IUSP.SW', 'LCPE.L', 'XDWU.DE', 'XDWF.F', 'XDWL.F', 'WTEI.F', 'VHYL.L', 'CF1.PA', 'EL4J.F', 'INRU.L', 'EL41.F', 'JPSR.MI', 'IJH.AX', 'UEFY.F', 'XIU.TO', 'OSX4.F', 'IVV.AX', 'IBCK.F', 'SC0I.F', 'IGSU.L', 'CORP.L', 'RBOT.L', 'EMDV.MI', 'FLXG.L', 'TSWE.L', 'CSPXJ.MI', 'SC0U.F', 'ZLC.TO', 'XDGU.F', 'IMID.L', 'EMMV.L', 'IQQM.F', 'EL43.DE', 'LYEB.F', 'SMRE.DE', 'EXSH.MI', 'ITWN.AS', 'XQUE.F', 'SYBL.DE', 'EUHD.MI', 'QVMP.F', 'GGRA.L', 'DXSC.F', 'UBUM.AS', 'IDTW.L', 'LYYA.F', 'EXV4.DE', 'EUNK.DE', 'XUHY.F', 'IQQR.DE', 'HTR.PA', 'IBCZ.DE', 'FSWD.L', 'ZDM.TO', 'XSFD.L', 'ZPRP.F', 'VGEK.DE', 'G2X.F', 'MVS.AX', 'ROBO.AS', 'VAPX.L', 'X025.DE', 'DXS6.F', 'MVED.L', 'X025.F', 'XDEV.L', 'SPYF.DE', 'XGSD.SW', 'ROBO.L', 'EMB.MX', 'EPEJ.MI', 'XZEU.MI', 'VGS.AX', 'IUIT.L', 'MSE.SW', 'UBUM.DE', 'LYQY.F', 'XLB.TO', 'UIMF.DE', 'XGII.F', 'LMVF.DE', 'EMU.MI', 'DBXZ.DE', 'E500.F', 'UIM3.DE', 'UIQN.DE', 'VVSM.DE', 'UIMA.F', 'MLPD.L', 'IWSZ.L', 'XDER.L', 'FLXD.F', 'IAUP.L', 'IQQG.DE', 'CGR.TO', 'PEMD.MI', 'MVA.AX', 'CPXJ.AS', 'SXRY.DE', 'IFSD.L', 'EXSI.MI', 'IEUX.L', 'INDW.PA', 'XMEU.MI', 'FLXE.DE', 'VAPU.L', 'IS3H.F', 'D100.DE', 'O87.SI', 'VHYA.L', 'SXR0.F', 'EWU.MX', 'PSRU.L', 'XCS.TO', 'VWCG.L', 'DXSA.DE', 'XLIP.L', 'IUUS.L', 'HTRY.L', 'XD9E.F', 'XWEH.F', 'ASDV.L', 'IUSU.L', 'DBXV.F', 'EUN1.DE', 'QUEU.DE', 'AUEM.L', 'IWVU.L', 'ETSA.DE', 'LGQI.DE', 'VALU.DE', 'C006.F', 'LEGR.L', 'STWX.MI', 'IEFS.L', 'MGTU.L', 'DBXA.F', 'XSGI.L', 'TDEX.BK', 'WIND.AS', 'HLTH.L', 'BYBU.L', 'UIMD.AS', 'C051.DE', 'HYLD.L', 'FGBL.PA', 'PEF.PA', 'XMEA.MI', 'XSX6.MI', 'SMH.L', 'CEU2.MI', 'LYPF.DE', 'FNCL.L', 'XBAG.F', 'PEH.PA', 'XDEM.F', 'XDWI.DE', 'EXSA.DE', 'EESM.F', 'GLDVD.MI', 'EEUX.DE', 'EX16.VI', 'UIM9.DE', 'VDPX.L', 'CN1.MI', 'IFSW.L', 'EL4B.DE', 'SPXJ.L', 'GILI.PA', 'FEQD.L', 'EEXU.DE', 'SPYF.F', 'LYP6.DE', 'INXG.L', 'SELD.DE', '18M6.F', 'MEU.PA', 'H4ZB.DE', 'INDI.MI', '6PSK.DE', 'ZEB.TO', 'GINC.L', 'MOED.DE', 'ETSZ.DE', 'IQQA.DE', 'CSEMU.MI', 'UIMA.AS', 'IOO.AX', 'VALD.DE', 'AME6.DE', 'UIM4.DE', 'DBXX.DE', 'PAXJ.PA', 'EDVD.L', 'EXX1.F', 'FLXD.MI', 'XIEE.DE', 'EGRA.L', 'HUKX.SW', 'XDWT.F', 'SXRW.DE', 'DFEE.L', 'HIDD.L', 'CEMU.AS', 'EXSI.DE', 'PHSP.L', 'C5E.PA', 'HUKX.L', 'SPPE.F', 'SMRE.MI', 'EUEA.AS', 'IBCH.F', 'WDIV.AX', 'IEUX.AS', 'D5BH.DE', 'DBXM.F', 'EUNI.F', 'AFIN.F', 'GC40.DE', 'EUNA.AS', 'IQQ4.F', 'HMXJ.L', 'SXR2.DE', 'FXRL.ME', 'HAL.TO', 'H4ZR.DE', '2B7C.DE', 'XDWY.L', 'CAC.PA', 'AYEP.F', 'CH5.L', 'IQQU.DE', 'IMEU.MI', 'MSED.MI', 'IMV.L', 'EXXV.DE', 'DXSA.F', 'SXLI.AS', 'EX13.VI', 'IMAE.AS', 'VAP.AX', 'EUN.MI', 'MOEU.DE', 'ESREUA.MI', 'VUKE.DE', 'DX2X.DE', 'CUKX.L', 'VALD.PA', 'FMI.PA', 'DX2G.DE', 'QUED.DE', 'ZPDI.DE', 'SPXJ.MI', 'MVEU.MI', 'HYLD.SW', 'IMEU.AS', 'EEMU.DE', 'EXW3.DE', 'CSCA.AS', 'CSSX5E.MI', 'LYY5.DE', 'HCAN.PA', 'QUAL.AX', 'XESX.MI', 'EUE.MI', 'IDVY.AS', 'INDA.MX', 'H4ZM.F', 'SPYE.DE', '540G.DE', 'IEUX.MI', 'EWG.MX', 'HCAN.L', 'XD3E.MI', 'EXW1.F', 'VEU.AX', 'UEQD.F', 'UIM9.AS', 'SPYH.F', 'LGWS.DE', 'XMMD.L', 'BBVAE.MC', 'EUDV.MI', 'IQQY.DE', 'CSSMI.SW', 'SYBG.F', 'XDEQ.F', 'EXX5.F', 'HCAD.L', 'SPYN.DE', 'GDX.AX', 'IZZ.AX', 'IS3Q.F', 'MXUK.DE', 'H4ZV.DE', 'CEUG.DE', 'MTDB.DE', 'PSRE.L', 'X011.DE', 'PAC.F', 'IVE.AX', 'MSE.PA', 'SPYU.DE', 'XS7R.L', 'EL4D.F', 'DJRE.AX', 'CSCA.L', 'IBC0.DE', 'DBXI.DE', 'ACWU.L', 'AE50.DE', 'LGQK.DE', 'EXW1.DE', 'CSMIB.MI', 'EUN0.DE', 'UIME.DE', '6PSC.DE', 'DX2S.F', 'XLIS.MI', 'LYMD.F', 'XSXE.F', 'ETFMIB.MI', 'SPYW.F', 'SC0E.DE', 'C060.DE', 'XZEU.DE', 'UIMR.F', 'SPAG.L', 'EMHD.L', 'AMEQ.DE', 'EXSG.DE', 'UB20.L', 'UC64.L', 'DBX4.DE', 'EMLC.L', 'EUE.L', 'FT1K.L', 'UKX.PA', 'EXSI.F', 'EXSC.DE', 'DXSE.F', 'CPXJ.L', 'VERX.L', 'H4ZE.DE', 'INR.PA', 'LYSX.DE', 'XD3E.L', 'UIM2.AS', 'LYMD.DE', 'FRGD.L', 'CU1.PA', 'AMED.DE', 'CMU.MI', 'H4ZA.DE', 'H4ZH.F', 'XSP.TO', 'SXRT.DE', 'CSX5.AS', 'UIMR.AS', 'MOED.PA', 'EUN2.DE', 'IUIS.L', 'DXSB.DE', 'SC0D.DE', 'EXI2.F', 'XDUK.DE', 'LG9.SI', 'DBXD.DE', 'XIN.TO', 'IS3S.F', 'DBXE.DE', 'IBCZ.F', 'QDV5.DE', '10AJ.F', 'AUST.MI', 'MIB.PA', 'S6X0.DE', 'VGEK.F', 'EL4E.DE', 'EL4H.DE', '1672.T', 'VGOV.F', 'EXSH.DE', 'VGWE.F', 'EEI.MI', 'EHF1.DE', 'QDVX.DE', 'LRUS.F', 'EMHD.MI', 'DXET.DE', 'XGIU.F', 'C060.F', 'LGQG.F', 'LYPQ.F', 'MVEU.L', 'UIM4.F', 'IBC6.F', 'SC0S.DE', 'QS0.SI', 'EMUX.F', 'SYBN.F', 'XEOU.L', 'SC0Z.DE', 'IQQ5.DE', 'EXSG.F', 'CEMS.DE', '6PSK.F', 'TWND.L', 'UIME.F', 'IQQA.F', 'C051.F', 'EL4A.DE', 'C001.DE', 'MSED.DE', 'HMLA.MI', 'VAL.PA', '50E.PA', '18M2.DE', 'XRB.TO', 'LYP6.F', '540J.DE', 'IS3G.F', 'EL4X.DE', 'IQQR.F', 'XCV.TO', 'VDCE.F', 'SC0G.F', 'CG1.MI', 'HWWD.L', 'ZPRE.F', 'IS31.F', 'CN1G.DE', 'QUED.PA', 'EXS1.DE', 'SMICHA.SW', '18MK.F', 'XGSD.MI', 'ZPDT.F', 'IDVY.L', 'XCS5.DE', 'DBXD.F', 'EST.MI', 'ISAG.L', 'HTRD.L', 'SLF.AX', 'EUN.L', 'EUFM.L', 'DX2X.F', 'FTAD.L', 'SXLI.MI', '18MK.DE', 'DBXZ.F', 'CG1.PA', 'SC0X.DE', 'EXH4.DE', 'EXH9.DE', 'DBXA.DE', 'IUSK.F', 'VAE.AX', 'DXSU.F', 'IDEE.L', 'PADV.SW', 'ZSRI.DE', 'XDEV.F', 'SC0V.DE', 'OIGS.DE', 'IPXJ.L', 'ILC.AX', 'L100.PA', 'CLMU.L', 'IDTL.L', 'VERX.DE', 'XCS2.F', '10AI.F', 'QCEU.MI', 'UEFZ.F', 'CD9.PA', 'SFY.AX', 'CG1G.DE', 'EL43.F', 'SGQL.L', 'DBXS.DE', 'FRXD.L', 'ZEO.TO', 'CEU1.L', 'DXSI.DE', 'WTIM.F', 'VLC.AX', 'PHAG.L', '540H.DE', 'CU9.PA', 'IDJG.L', 'IMIB.L', 'SEL.MI', 'ZUE.TO', 'PAXG.L', 'MEUD.L', 'X011.F', 'VWCG.F', 'DEMR.L', 'UBUV.F', 'PSWD.F', 'XLI.MX', 'EXS1.F', 'XFN.TO', 'IUKD.MI', 'EGRG.L', 'EL4F.DE', 'SPPX.F', 'XCS4.F', 'ZQQ.TO', 'IH2O.MI', 'ISPA.F', 'XLE.MX', 'LUTL.DE', 'IEVL.MI', 'EMHD.PA', 'UIM2.F', 'EL42.DE', 'OBXD.OL', 'UIMD.F', 'VEUR.MI', 'EXXX.DE', 'INDW.L', 'LUTI.DE', 'IQQX.DE', 'IQQG.F', 'XDND.F', 'HMYR.L', 'LYY5.F', 'CSTP.L', 'SYBS.F', 'EHDV.F', 'IUSK.DE', 'DAX.PA', 'ISPA.DE', 'FXDE.ME', 'EWY.MX', 'MXUK.L', 'VHYD.L', 'AEXK.L', 'SC02.DE', 'SXRY.F', 'TDT.AS', 'EUDV.PA', 'SMIEX.SW', 'XD5E.L', 'SSO.AX', 'XGDD.L', 'XIEE.F', 'C030.DE', 'XDAX.MI', 'GGRW.L', 'XSX6.L', 'US10.L', 'EWH.MX', '0055.TW', 'IS07.F', 'LGWS.F', 'EXXV.F', 'EXH5.F', 'EXH5.DE', 'DAXX.MI', 'WXHG.AX', 'CCAU.L', 'UTI.MI', 'EUNK.F', 'SXR3.DE', 'UB39.L', 'XDV.TO', 'C001.F', 'EL4Y.F', 'XAUS.L', 'WOOD.L', 'LYM9.F', 'SC0Y.DE', 'LMVF.F', 'CACX.L', 'STQX.MI', 'CE2D.L', 'CEMQ.DE', 'LYMH.F', 'IEUX.SW', 'LYM9.DE', 'ENER.MI', 'IAEX.AS', 'IEM.AX', 'XMXD.L', '6PSC.F', 'LOGS.DE', 'VGWD.F', '540K.DE', 'ENGY.BK', 'IEMO.MI', 'LGQI.F', 'IQQD.DE', 'VEUD.L', 'SPYE.F', 'XLIS.L', 'HMEU.L', 'SMEA.L', 'XDN0.F', 'SAUS.MI', 'UCEU.AS', 'ZPDU.F', 'DJSXE.SW', 'IESG.L', 'ZYAU.AX', 'VGT.MX', 'EXSC.F', '1695.T', 'IBCJ.F', 'NRJ.PA', 'EQDS.L', 'AMEE.DE', 'QQQ', 'IS3U.F', 'SC02.F', 'XCS4.L', 'ETSZ.F', 'DBXE.F', 'HDEM.L', 'UB17.L', 'EHDL.DE', 'NDIA.L', 'SXRW.F', 'IH2O.L', 'KFTK.F', 'SC0C.F', 'DXSD.DE', 'STUX.MI', 'CD8.PA', 'EXSH.F', 'IQQQ.DE', 'DXET.F', 'EXXW.F', 'ZPDI.F', 'IUKD.L', 'SPYQ.DE', 'E40.PA', 'SGQD.L', 'MSE.MI', 'EUDV.L', 'EHDL.F', 'CEW.TO', 'XCS5.L', 'WTEE.DE', 'H4ZB.F', 'XAUS.MI', 'EXH1.DE', 'UIM3.F', 'XS6R.L', 'UTIL.L', 'CSWG.L', 'LYPF.F', 'DBX3.DE', 'SPYQ.F', 'EXW3.F', 'EXS1.MI', 'SXRT.F', 'ERO.L', 'STW.AX', 'SC0E.F', 'XCS4.DE', 'FEM.L', 'ITKY.AS', 'UIM1.F', 'OSXM.F', 'UB23.L', 'FTGG.F', 'UIMZ.AS', 'DX2S.DE', 'AU2.PA', 'SPYU.F', 'EL42.F', 'EUN2.F', 'XDDX.F', 'MIVO.L', 'VALU.F', '1322.T', 'DBXS.F', 'EUNY.F', 'IAU.MX', 'CMU.L', 'CFA.SI', 'XESX.L', 'SXR1.F', 'E950.F', 'VERE.L', 'CG1.L', 'QOZ.AX', 'UB03.L', 'HACK.MX', 'SLICHA.SW', 'H50E.L', 'SLICHA.SW', 'H50E.L', 'PHPD.L', 'H4ZE.F', 'EL4G.F', 'EUN1.F', 'IBC6.DE', 'UIMZ.F', 'CSSLI.SW', 'CSUK.MI', 'HYFA.L', 'GLD.MX', 'ISEU.L', 'XKSD.L', 'EXSB.DE', 'XESC.L', 'UD02.L', 'AUAD.L', 'EL4H.F', 'SX5S.L', 'WAT.MI', 'MSED.L', 'VLED.F', 'XUKX.L', 'IAPD.MI', 'IEFQ.L', 'IAPD.AS', 'IEVL.L', 'DXSL.DE', 'IEU.AX', 'VLEU.F', 'FSEU.L', 'IHD.AX', 'S27.SI', 'IAEX.L', 'SPOL.L', 'MJMT.DE', 'ELF0.F', 'EL4A.F', 'SC0X.F', '00643.TW', 'IBCJ.DE', 'EXI1.DE', 'IH2O.SW', 'XSMI.MI', 'EL4X.F', 'XCS3.L', 'EEUX.F', 'AE50.F', 'EL4B.F', 'CSWU.L', 'EGRP.L', 'MLPS.L', 'FEUI.L', 'DXS0.DE', 'WATL.L', 'SMLU.F', 'MSED.F', 'DXSB.F', 'CG1G.F', 'DAXX.L', 'EXH1.F', 'EXV3.F', 'ELF5.F', '18M2.F', 'CN1.L', 'FEMU.L', 'IQQD.F', 'EX14.VI', 'C030.F', 'CYH.TO', 'VALD.F', 'XCS3.DE', 'CSUK.L', 'XDDX.L', 'SW2CHB.MI', 'EXSB.F', 'TNO.MI', '540K.F', 'EL4F.F', 'VGAD.AX', 'IBC0.F', 'XDAX.L', 'VEQ.AX', 'EESG.L', 'H4ZR.F', 'VHY.AX', 'OMXS.L', 'EXH2.DE', 'AUGA.L', 'CEMR.DE', 'EXXW.DE', 'QDVX.F', 'UIM9.F', 'UE28.AS', 'NDUS.L', 'EVAL.L', 'IEFV.L', 'D5BH.F', 'SC0D.F', 'XMED.L', 'SC0Y.F', 'XUEN.L', 'S6X0.F', 'SAUS.L', 'SC0Z.F', 'SXR2.F', 'MFDD.L', 'STKX.MI', 'EL4E.F', 'EEIE.L', 'DXSH.DE', 'SYI.AX', 'EXH2.F', 'WAT.PA', 'CEMQ.F', 'VGE.AX', 'LAUU.L', 'LTUG.DE', 'IHVV.AX', 'TGET.L', 'DH2O.L', 'H4ZA.F', 'XDN0.L', 'EMSV.F', 'SC0S.F', 'EDEU.F', 'AUSAUW.MI', 'UB06.L', 'EEI.L', 'PHPP.L', 'NRJU.L', 'IPOL.L', 'IQQX.F', 'EXV3.DE', 'DXS0.F', 'SXR3.F', 'SPYK.DE', 'XSER.L', 'CE9G.L', 'ELFA.F', 'IEMD.L', 'EXV6.F', 'ELFB.F', 'DBX4.F', 'SC01.DE', 'FGD.MX', 'WTEE.F', 'SPYK.F', 'ELFC.F', 'EXV5.DE', 'ISO.AX', 'EUNY.DE', 'IDAP.L', 'SC0V.F', 'FGBL.L', 'DXSH.F', '008201.TW', 'PHPD.MI', 'EXV8.F', 'XSNR.L', 'IAUS.L', 'IQQQ.F', 'ZPDE.F', 'EXI1.F', 'IEFM.L', 'MOEU.F', 'QUEU.F', 'ITEC.L', 'SXLB.MI', 'EEXU.F', 'XPXD.L', 'QDVF.F', 'MOED.F', 'XPXJ.L', 'QUED.F', 'HKOD.L', 'TDIV.L', 'SC0P.DE', 'SEDY.L', '2B7B.DE', 'XS8R.L', 'ES5R.F', 'LTMU.L', 'ZPDM.DE', 'SXLB.AS', 'H4ZQ.F', 'IUSC.DE', 'QLD.MX', 'LATAM.MI', 'SC01.F', 'USMV.MX', 'EXV8.DE', 'SYBL.F', 'XAXD.L', 'IMSU.L', 'ACWI.MX', 'MJMT.F', 'SC0P.F', '10AM.F', 'NRGW.L', 'USPG.L', 'DGRO.MX', 'U127.L', 'LVE.PA', 'LYNRJ.SW', 'VSO.AX', 'LYMZ.DE', 'IEDY.L', 'XLBS.L', 'LTAM.L', 'XEG.TO', 'IS0D.F', 'RUSU.L', 'LVDX.DE', '1584.T', 'IUMS.L', 'LYLVD.SW', 'MVE.AX', 'LLAM.DE', 'DJLEV.MI', 'HMLA.L', 'LYY8.DE', 'AMEL.DE', 'EXV7.DE', 'IHOO.AX', 'XB4A.F', 'HMLA.PA', 'XDW0.F', 'WDNR.F', 'DLTM.L', 'LVD.PA', 'XDWM.DE', 'LYPH.DE', 'WMAT.AS', 'HVST.AX', 'H4ZW.DE', 'ALAG.L', 'IQQ5.F', 'SC00.DE', 'LTAM.AS', 'EXXX.F', 'DAXLEV.MI', 'LYPC.F', 'ENGY.L', 'S600.L', 'LYMATW.SW', 'ALAU.L', 'MATW.PA', 'XLBP.L', 'VAW.MX', 'ANRJ.L', 'SC00.F', 'HMXD.L', 'FEME.L', 'ELLE.L', 'LYMZ.F', '1673.T', 'CBGOLD.SW', 'PAXJ.L', 'XDWM.MI', 'WMIN.DE', 'MVW.AX', 'LTUR.F', 'LYY8.F', 'XLB.MX', 'IBZL.MI', 'H4ZK.F', 'DXSC.DE', 'ZMT.TO', 'IDTK.L', 'XSPR.L', 'IVW.MX', 'LYASC.SW', 'IQQB.DE', 'EXV7.F', 'GDIG.MI', 'ZPDM.F', 'HZAR.L', 'IUKD.SW', 'DXSD.F', 'LBRA.DE', 'DBX6.DE', 'GEAR.AX', 'GDIG.L', 'HBZ.PA', 'SPYP.DE', 'H4ZG.DE', 'IBZL.AS', 'SPYN.F', 'STPX.MI', 'XMBR.MI', 'IUSC.F', '1676.T', 'IDBZ.L', 'HMLD.L', '540F.DE', 'BRZ.PA', 'H4ZG.F', 'STPX.SW', 'HBRL.L', 'XMBD.L', 'BRZ.MI', 'MTRL.L', 'HMBR.L', 'SRSA.L', 'XMLD.L', 'RIOU.L', 'AMEE.F', 'CECD.L', 'TURU.L', 'H4ZW.F', 'CC1G.L', 'ILF.MX', 'EWZ.MX', 'XDWM.F', 'HZAD.L', 'UBUD.F', 'LYPH.F', 'IQQB.F', 'BRZ.L', 'LBRE.DE', 'SC0W.DE', 'GGMUSY.SW', 'EXV6.DE', 'SPYP.F', 'E6BR.DE', 'SC0W.F', 'DBX6.F', 'MATW.L', 'LBRA.F', 'SLV.MX', 'GOLB.L', 'CC1U.L', 'SC0C.DE', 'LGQG.DE', 'SXR7.F', 'HDLV.F', 'EMUE.PA', 'SDJE50.MI', 'UIMA.DE', 'LTUR.DE', 'EUHD.L', 'FRUE.L', 'SPYI.F', 'FGEU.F', 'STXH.DE', 'L8I7.DE', 'UEFZ.DE', 'IDJG.AS', 'IDVY.MI', 'DX2I.F', 'UIM1.AS', 'LEER.DE', 'CWEU.PA', 'CEUR.L', 'UBUM.F', 'MXJ.PA', 'VERE.F', 'SXR7.DE', 'LESW.F', 'CSCA.MI', 'UIM4.AS', 'STUX.SW', 'MVOL.L', 'UTLW.PA', 'SPYZ.F', 'XZEU.L', 'EEP.F', 'UIM1.DE', 'UEEH.F', 'EXSA.F', 'CEBB.F', 'XEF.TO', 'PEMD.MI', 'PHAG.MI', 'SC0T.F', 'IESE.MI', 'XDWS.F', 'XPXJ.MI', 'DXSF.DE', 'SPYG.F', 'SPYG.DE']
# 37 all commodities future according to yahoo-> execution time 6min
#commodities_future_stocks=['ES=F', 'YM=F', 'NQ=F', 'RTY=F', 'ZB=F', 'ZN=F', 'ZF=F', 'ZT=F', 'GC=F', 'MGC=F', 'SI=F', 'SIL=F', 'PL=F', 'HG=F', 'PA=F', 'CL=F', 'HO=F', 'NG=F', 'RB=F', 'BZ=F', 'B0=F', 'ZC=F', 'ZO=F', 'KE=F', 'ZR=F', 'ZM=F', 'ZL=F', 'ZS=F', 'GF=F', 'HE=F', 'LE=F', 'CC=F', 'KC=F', 'CT=F', 'LBS=F', 'OJ=F', 'SB=F']
#4316 best mutual funds according to yahoo-> funds, index, etf out of ~61000 funds -> search criteria was YR return rate more than 21% -> execution time is 79min
#best_mutual_funds=['0P00014M5R.BO', 'SCVNX', 'JVAIX', '0P0001AH1L.TO', 'JVASX', '0P0001BAGK.BO', '0P0000K9VN.BO', 'JVARX', '0P00009PUT.BO', 'SVFKX', 'SVFDX', '0P0001IT7R.TO', '0P0001BBKT.BO', '0P0001BB9X.BO', '0P00005WFQ.BO', '0P00005WFR.BO', '0P00011IKQ.TO', 'QLSCX', 'QISCX', '0P0000XVJR.BO', '0P0001AAME.TO', '0P0001BB6X.BO', '0P0000XVJU.BO', 'JVAAX', '0P0001FKO4.TO', 'FIDAX', 'SUVAX', '0P0001BAV3.BO', '0P00009PUH.BO', '0P0001IT7S.TO', 'EUGAX', 'SEQUX', '0P00005WFF.BO', '0P00005WFE.BO', '0P0001BB6Y.BO', '0P000071B7.TO', '0P00011NTE.TO', 'JVACX', 'SVFYX', 'EUGDX', '0P0001AAMD.TO', 'EICCX', '0P000070JZ.TO', '0P0001BBEJ.BO', '0P0000XVPP.BO', '0P000127NP.TO', 'NBREX', 'HWSIX', 'HWSCX', 'BRSVX', 'MVSSX', 'RYOFX', 'ASVNX', '0P0001B9SJ.BO', '0P00009Q9J.BO', '0P0000XVBR.BO', '0P0001BB08.BO', 'HWSAX', 'SCVAX', 'VSVIX', '0P00006AD0.TW', 'BMPEX', 'SSVRX', 'BPSCX', '0P0000YPYD.TO', 'QCSCX', '0P000071L4.TO', '0P0000XV9L.BO', 'LBWIX', 'LBISX', '0P0000XVZV.BO', 'LBWAX', '0P0001BAXP.BO', '0P0000XV9M.BO', 'MCVSX', '0P00016VT8.TO', 'SCVFX', '0P000174LP.TO', 'LBDRX', '0P00005WW4.BO', '0P0001BAXQ.BO', '0P0001B9SI.BO', '0P0000XVZU.BO', '0P00005WW5.BO', 'LBWCX', '0P0000723Q.TO', '0P00005V76.BO', 'QASCX', 'SSCVX', 'BPSIX', 'LMBEX', '0P00014GLS.BO', '0P0001BBDE.BO', '0P0000XVPJ.BO', '0P0001BB09.BO', '0P00005WWB.BO', 'CSSZX', 'SCVIX', 'MRVSX', '0P0000XVBY.BO', 'LSVVX', '0P00014GLT.BO', '0P00005UX3.BO', '0P0001BBDF.BO', '0P0000XUY5.BO', '0P0001BADT.BO', '0P00005WWG.BO', 'LVAVX', '0P0000XWAB.BO', 'WPGTX', 'CSSYX', 'PCFAX', '0P0001BADU.BO', '0P00009PUP.BO', '0P00014CQD.TO', '0P00005WZZ.BO', 'LPEIX', '0P00009QCW.BO', 'IPFPX', 'PFPFX', '0P0000XUY2.BO', '0P0001BAHB.BO', '0P0000XWAA.BO', 'GWSCX', '0P0000ZR49.L', 'NBRVX', 'DHMYX', 'NBRTX', 'GWSIX', 'NBRAX', 'DHMIX', '0P0001BAHC.BO', '0P00005WZY.BO', '0P0000XW55.BO', '0P0000XW54.BO', '0P0001BA41.BO', 'SUVCX', 'EICVX', 'SUVZX', 'NBRCX', 'ACVIX', '0P0001BA42.BO', '0P0000KRBI.BO', 'LPEFX', 'LCMIX', 'LPERX', 'DHMAX', 'WVALX', 'CNREX', 'DGOYX', 'OFAFX', 'LVAEX', 'ASVIX', 'RYMVX', '0P0000XVU5.BO', '0P0000XVU0.BO', '0P0001BBJ8.BO', 'PCFEX', 'RYAVX', 'RPFCX', 'WVAIX', '0P0001BBJ9.BO', '0P00005UZP.BO', '0P00005UZO.BO', 'PUFCX', '0P0000XW75.BO', '0P0001BAP8.BO', '0P000093SU.BO', '0P0001BA71.BO', '0P0000XW74.BO', 'RYMMX', 'GWSAX', '0P00005WLX.BO', '0P0001BAP7.BO', '0P0000XVGM.BO', 'PFSZX', 'DGOCX', '0P0000747J.TO', '0P0000A2MV.TO', '0P0001BA72.BO', '0P00005WLW.BO', '0P0000XVGR.BO', '0P00012BS3.TO', 'GWSVX', '0P000070QL.TO', 'DCSYX', 'OFALX', 'CBBIX', '0P0001B9PD.BO', '0P0000XVY5.BO', '0P0000XVY6.BO', 'DCSCX', 'NEFOX', 'NECOX', '0P00009J37.BO', '0P0001B9PE.BO', '0P00009J3I.BO', 'MLPRX', 'TFIFX', 'PRISX', '0P0001BAR4.BO', '0P0001551D.BO', '0P0000XV3R.BO', '0P0001BAR3.BO', '0P0000XV3U.BO', '0P00013TXG.BO', 'CBBYX', '0P0001BAR5.BO', '0P0001551E.BO', '0P0001551H.BO', '0P0001BAR6.BO', '0P0001551F.BO', '0P0001551C.BO', '0P0001551B.BO', '0P00014B47.BO', '0P0001BAR2.BO', 'LMBGX', '0P0001BARA.BO', '0P0001551M.BO', '0P00005WR9.BO', '0P0001551N.BO', '0P0001BAR9.BO', '0P0001BAR8.BO', '0P0001551I.BO', '0P0001BAR1.BO', '0P00014B46.BO', '0P0001BAR7.BO', '0P00005WR8.BO', '0P0001551K.BO', '0P0001551G.BO', '0P0001551J.BO', '0P0001551L.BO', 'PFSAX', 'LSVEX', '0P00017CAS.BO', '0P0001BAB4.BO', '0P0001BA5P.BO', '0P0000XW5G.BO', 'PSSRX', '0P0000XW5H.BO', '0P00019ZC4.F', '0P00005VDA.BO', '0P00005VD9.BO', '0P0001BA5Q.BO', '0P0000XVYO.BO', '0P0000XVYN.BO', '0P0001B9Q1.BO', '0P0000XVOU.BO', 'PFPWX', '0P0001BA79.BO', '0P0000XW76.BO', '0P0000XVON.BO', '0P0001BBD1.BO', '0P0000XW77.BO', 'PARWX', '0P00005WLZ.BO', '0P00005WLY.BO', '0P0001BA7A.BO', '0P00005X10.BO', 'CBBKX', 'ABASX', '0P00005WIA.BO', '0P0001BBD2.BO', '0P0001B9Q2.BO', '0P00005V30.BO', 'BLCRX', '0P0001BAB8.BO', '0P00005WZH.BO', 'MLVIX', 'BALVX', 'ABSIX', '0P00014D1K.BO', '0P0001BAB7.BO', 'ABSZX', 'TGIGX', '0P0001BA0K.BO', '0P0000XW2S.BO', 'PXTIX', '0P0000SN87.F', '0P0001BB7X.BO', '0P0000XVK1.BO', '0P0000XW2T.BO', '0P0000XVK5.BO', '0P00008T5J.BO', '0P0001BA0L.BO', '0P0000W9SR.L', 'NEOYX', '0P0001BB7Y.BO', '0P00005UR7.BO', '0P00005UR8.BO', '0P00000LZF.F', '0P0001BAB6.BO', '0P0000XWA1.BO', '0P00008TMV.BO', '0P0000UD9O.L', '0P0001BAB5.BO', '0P00014B45.BO', '0P0001BA98.BO', '0P0000XW8Y.BO', '0P0000XW8Z.BO', 'PIXPX', 'MRRFX', 'GOODX', '0P0000GB47.BO', '0P0001BBBP.BO', '0P0000XVNS.BO', '0P0001BBML.BO', '0P0000XVNO.BO', '0P0001BA99.BO', '0P00005WNA.BO', '0P0000741L.TO', '0P00005WZI.BO', '0P00005WNB.BO', 'TGDFX', '0P0000XWA2.BO', '0P0001BBBQ.BO', '0P0001BBMM.BO', '0P00005WGI.BO', '0P00005WGJ.BO', 'MARFX', 'ABYSX', 'ABSRX', 'CVQZX', 'COLYX', '0P00017BNM.BO', '0P0001BAB2.BO', '0P0000PTRS.TO', 'KCMTX', '0P0000JO4F.TO', '0P0001BAPT.BO', '0P0000XVH9.BO', '0P0000AD35.TO', '0P0000XW9A.BO', '0P0001BA9R.BO', '0P0000XW99.BO', 'HFCSX', 'ABMAX', 'HFCIX', '0P00005WNT.BO', '0P0001BA9S.BO', '0P00005WNR.BO', '0P0000ADK4.BO', '0P0001BAPU.BO', '0P00005X3K.BO', '0P0001B9SP.BO', '0P0000XW02.BO', '0P0000XVOC.BO', 'PCPCX', '0P0000XVO5.BO', '0P0001BBCC.BO', '0P0001BBCD.BO', '0P0000XVO8.BO', '0P0001BBCF.BO', '0P0000TZC6.BO', '0P0001BBCE.BO', '0P00005WGN.BO', '0P00005WGO.BO', '0P00005V7E.BO', '0P0000XVCP.BO', '0P0001BB17.BO', '0P0000XVCU.BO', '0P0001B9SO.BO', '0P0000XW01.BO', 'DHPYX', '0P00005WYF.BO', 'LZUSX', '0P00005WYD.BO', '0P0001BB18.BO', '0P0000ADWR.BO', 'PBFDX', 'BAWAX', 'TEFAX', 'MSMLX', 'MISMX', 'DHPAX', '0P00016BM9.BO', '0P0001BARG.BO', '0P0000XV3X.BO', '0P0001BARH.BO', '0P0000XV40.BO', '0P0001BARI.BO', '0P00016BM8.BO', '0P0001BARJ.BO', '0P00016BM7.BO', '0P0001BARK.BO', '0P00016BMB.BO', 'DODGX', 'ABSKX', 'BIAWX', '0P00016BMA.BO', '0P0001BARN.BO', 'RDCCX', '0P00016BMC.BO', '0P0001BARF.BO', '0P0001BARL.BO', '0P00005WRG.BO', '0P00005WRH.BO', '0P00016BM6.BO', '0P0001BARM.BO', '0P0001BARO.BO', '0P00016BM5.BO', 'CIPIX', '0P0000XVH6.BO', 'MDRFX', 'DHLTX', 'HIMDX', '0P0001B9SR.BO', '0P00005V7F.BO', '0P00000G0K.F', 'HLRRX', '0P0000XVG6.BO', '0P0000XVG3.BO', '0P0000XVG2.BO', '0P0001BB5S.BO', 'JICCX', 'JICAX', '0P0000XVFT.BO', '0P0001BB5G.BO', '0P0000XVFP.BO', '0P00009JAO.BO', '0P00009JAQ.BO', '0P00009JAP.BO', '0P0001BB5T.BO', 'BAFWX', 'EWMCX', '0P0000XV6W.BO', '0P0001BB5H.BO', '0P0000S4C4.BO', '0P0001BAUN.BO', '0P0000XV6X.BO', 'GIFFX', '0P0001BAUO.BO', '0P00005VCI.BO', '0P00005VCN.BO', 'HLPPX', '0P0001B9SQ.BO', '0P0000XW03.BO', 'JOPPX', '0P00000S58.F', '0P0000XVTS.BO', '0P0001BBIM.BO', '0P0000XVTN.BO', 'JIISX', 'BADIX', '0P00005UZG.BO', '0P0001BBIN.BO', '0P0000XW04.BO', '0P0000K1D1.BO', 'CIPMX', 'COMIX', '0P0000Z2XS.F', 'PWDAX', 'FBSAX', 'PWDIX', 'FMFVX', 'FBSIX', 'TLVIX', 'FFBFX', 'PWDCX', 'ISTAX', 'TFSIX', '0P0000XV8V.BO', '0P0001BAWQ.BO', '0P0000XV8W.BO', '0P0000VT6X.F', 'AAUTX', 'DCGVX', 'HFMDX', '0P0001BAWR.BO', '0P00005WUY.BO', '0P00005WV0.BO', '0P0000V5JE.TO', 'DVZRX', 'DRGYX', 'FCBSX', 'DEVLX', '0P0000IUYN.TO', 'FCVCX', '0P0000PTRW.TO', 'CMCAX', 'PCLIX', 'HSSIX', '0P00005WID.BO', 'DAGVX', '0P0000XVEL.BO', '0P0001BB4J.BO', '0P0000XVEI.BO', 'ADKSX', '0P00008TO5.BO', '0P0001BB4K.BO', '0P00008TGU.BO', '0P0001BA4J.BO', '0P0000XW58.BO', 'DHTYX', '0P0000XW59.BO', 'POGSX', '0P0000XVCO.BO', 'HSSCX', 'TGFRX', '0P0001BB15.BO', '0P0000XVCH.BO', '0P00005VD0.BO', '0P00005VD1.BO', '0P0001BA4K.BO', 'HSSAX', '0P0000GB2V.BO', 'SFDYX', '0P0000XVQD.BO', '0P00005WY1.BO', 'IOLZX', 'LZUOX', 'RLUSX', 'FBSRX', 'FSLBX', '0P0000XVQA.BO', '0P0001BBF0.BO', '0P0000XVTM.BO', '0P0001BBIG.BO', '0P0000XVTG.BO', 'GGEFX', '0P0000XW4C.BO', '0P0001BA38.BO', '0P0000XW4B.BO', 'HULEX', 'DHTAX', '0P0001AM3O.F', '0P0001BADW.BO', '0P00005UN1.BO', '0P00005V00.BO', '0P0001BBIH.BO', '0P00005UZZ.BO', 'DRGVX', 'NRBAX', 'CEYIX', '0P0000XVQB.BO', '0P00005WY0.BO', '0P0001BB16.BO', '0P0000XVQ8.BO', '0P0001BBEY.BO', '0P00005VC4.BO', '0P0001BA3A.BO', '0P00005WIE.BO', '0P00005VC5.BO', '0P0000JWUV.BO', '0P0001BBEZ.BO', 'THPMX', 'PCLAX', '0P00006AHG.TW', 'FTHSX', 'ABVYX', 'MNNYX', 'BAFFX', 'BIAFX', '0P0000XW00.BO', 'BAFAX', 'LSLTX', '0P0001B9SM.BO', '0P0000XVZZ.BO', 'CGRYX', '0P0000XVNY.BO', '0P0001BBA8.BO', '0P0001BBL4.BO', '0P0000XVO1.BO', '0P00005UUN.BO', 'FCVIX', 'FCPVX', '0P0001BBA9.BO', '0P0001BBL5.BO', '0P00005UUM.BO', 'OGRIX', 'MDIVX', '0P00005X3H.BO', '0P0001B9SN.BO', 'SEMCX', 'FMIUX', '0P00005V77.BO', 'SIPIX', 'FMIMX', 'MNNCX', 'EILGX', '0P00005UN4.BO', 'MNNAX', '0P0000W36G.L', 'BBISX', '0P0001JG3Z.L', 'EGFIX', '0P00000CCO.L', 'MFMIX', 'MSRFX', 'QSVIX', 'CAEEX', 'EAPCX', 'HWCCX', 'NGDRX', 'NBGUX', 'MFMPX', 'YASLX', '0P0000XUY7.BO', 'GOWLX', 'FCVAX', 'BBTGX', 'EAALX', 'CLOFX', 'IMIDX', 'VSEQX', 'CAECX', 'PVFAX', 'CGRWX', 'HULIX', 'EGFFX', 'CAEZX', '0P0001AH1S.TO', '0P0000XVSM.BO', '0P0001BBGH.BO', '0P0000XVSK.BO', 'RYFNX', '0P00005UYF.BO', '0P0001BBGI.BO', '0P00005UYE.BO', 'NGDCX', 'RYFAX', '0P0001BEM1.BO', '0P0000XVV5.BO', '0P0000XUY4.BO', '0P0001BADV.BO', '0P0000XVM6.BO', '0P0000XVM0.BO', '0P0001BBAA.BO', '0P0001BBL6.BO', 'MLPDX', 'NEFSX', 'RYFCX', '0P00008TON.BO', '0P00008TGX.BO', '0P0001BBL7.BO', '0P0001BBAB.BO', 'RYFIX', 'QUSVX', 'CMIDX', 'JAMEX', 'MAVFX', 'PIXCX', 'EAGCX', '0P0000XVV6.BO', 'MSFEX', '0P00005X3A.BO', '0P0000XVGS.BO', 'NGDLX', 'NGUAX', '0P00009J43.BO', 'NBGTX', 'HWMCX', 'NGDAX', 'SFLNX', '0P0001BEM0.BO', '0P00005V6U.BO', 'BISRX', 'HWGIX', 'BCVCX', 'HWGAX', '0P00009J3Y.BO', '0P0001BAPS.BO', 'SBHAX', 'NESYX', 'HWMIX', '0P0000XVGX.BO', '0P0001BAPR.BO', 'HWCIX', 'ACSDX', 'ACSTX', 'ACSHX', 'BISAX', '0P0000XVP2.BO', '0P0001BBDG.BO', '0P0000XVP5.BO', 'JVLAX', '0P00005WI4.BO', '0P00000XGU.F', '0P00005WI3.BO', '0P0001BBDH.BO', 'SPVZX', 'FSCRX', 'PMVQX', '0P0001BBBG.BO', '0P0000XVNH.BO', '0P0001BBMC.BO', '0P0000XVNE.BO', 'HWMAX', 'SDVRX', 'ARTLX', 'NCBVX', '0P0001BBMD.BO', '0P0001BBBH.BO', '0P00005UU5.BO', '0P00005UU6.BO', 'UBVSX', 'APDLX', 'VWNAX', '0P0000K003.BO', '0P0001BB1U.BO', 'SPRAX', '0P00011IK6.TO', 'HCMAX', 'UBVRX', '0P0001AH1G.TO', 'HWLCX', 'ICPAX', '0P000172DE.TO', 'VWNFX', 'UBVLX', '0P00005WDG.BO', '0P000072NT.TO', '0P0001AH1F.TO', 'ARCIX', 'OISVX', 'ICWIX', 'ICPUX', '0P0001A3FA.BO', '0P0001A3F9.BO', 'JDVVX', '0P0001BB1P.BO', '0P00005WDF.BO', 'HWLIX', 'AMPAX', '0P0000XVQR.BO', '0P0001BBF1.BO', '0P0000XVQS.BO', 'JVLIX', 'BINCX', '0P000071SO.TO', '0P0001A3F6.BO', '0P0001BB1Q.BO', '0P00005WIX.BO', '0P00011NT6.TO', '0P0001BBF2.BO', '0P00005WIW.BO', 'UBVAX', 'ICSFX', 'ACSYX', 'HWLAX', '0P00011IK9.TO', 'MNRMX', '0P0001A3F7.BO', 'PZIMX', 'THPGX', '0P00013MJD.F', '0P00007W68.L', '0P0001DYGJ.F', '0P0000XW1Y.BO', '0P0001B9ZS.BO', '0P0000XW1Z.BO', 'URISX', '0P00005VAC.BO', '0P0000MOHH.TO', '0P0001AH18.TO', 'MVEIX', '0P00005VAB.BO', '0P0001B9ZT.BO', '0P0000XV6I.BO', '0P0000XV6H.BO', '0P0001C5W6.BO', 'ACMYX', '0P00005WUG.BO', '0P0001BATV.BO', '0P00005WUH.BO', 'RYMBX', 'NRBIX', 'JFAIX', 'BVEIX', 'PCLPX', '0P00005V3V.BO', '0P0001B9MX.BO', 'VADFX', '0P0000XVVK.BO', '0P0001B9MW.BO', 'NWJEX', 'BVEFX', 'VADDX', '0P0000XVVL.BO', '0P0001BJFA.BO', '0P0000XV5P.BO', 'LMUSX', '0P0000XV5Q.BO', '0P00005X1R.BO', 'BCIFX', '0P0000XW9L.BO', 'RYMJX', 'AUUYX', 'TAREX', '0P0001BASW.BO', '0P00005WSR.BO', '0P0000XVCW.BO', '0P0001BB19.BO', 'AMCSX', '0P00005V18.BO', '0P0001BAA7.BO', '0P00005V17.BO', '0P0000XVCR.BO', '0P0001BBBX.BO', '0P0001BBMT.BO', '0P0000XVNZ.BO', '0P0000VHED.BO', '0P0001BBBZ.BO', '0P0000VHEC.BO', '0P0001BBMV.BO', '0P0000XVNW.BO', '0P00005WSS.BO', 'TVRVX', 'BISMX', 'CNRVX', '0P00005UUL.BO', 'FSPCX', '0P00005UUK.BO', '0P0001BBMU.BO', '0P0001BBBY.BO', '0P00005VV7.F', 'FSEIX', 'CNRWX', 'FACSX', 'MPGFX', 'JFACX', '0P00005WYJ.BO', 'FASEX', '0P0001BB1A.BO', '0P0001IUPN.BO', '0P00005WYK.BO', 'DNLYX', 'VADRX', 'VADCX', 'JFCAX', '0P0000XV3W.BO', '0P0000XV3T.BO', '0P0001BARB.BO', 'MIDIX', 'HRMVX', '0P0001BARC.BO', '0P00009PUE.BO', '0P00005WRA.BO', 'MIDUX', 'MIDQX', '0P0000XW5N.BO', '0P0000XW5M.BO', '0P0001BA67.BO', 'FTVFX', 'OASVX', '0P00005VDF.BO', '0P0001BA68.BO', '0P00005VDG.BO', 'FSLSX', 'FBMPX', '0P0000XVL9.BO', '0P0001BF1Q.BO', '0P0000XVL3.BO', 'NELAX', 'TFFYX', 'HAMVX', 'MCVIX', 'HNMVX', '0P00009J48.BO', '0P0001BB8P.BO', '0P00005USL.BO', '0P0000XW85.BO', 'IMCVX', '0P00005V0K.BO', '0P00005V0J.BO', '0P0001BA87.BO', '0P0001BA86.BO', '0P0000XW84.BO', 'FVLZX', 'FVIFX', 'FVLKX', 'FCVFX', 'NELCX', 'FDVLX', '0P0001BBHP.BO', '0P0000XVSW.BO', '0P0000XVT2.BO', 'NELIX', 'BOPAX', '0P00005UZX.BO', '0P00005UZV.BO', '0P0001BBHQ.BO', 'JDESX', 'TFOAX', 'TFFIX', 'FVCSX', 'BOPIX', 'EIPCX', 'CLSAX', '0P0000XVDF.BO', '0P0000XVDD.BO', '0P0000XVDK.BO', '0P0001BB2J.BO', 'FAVFX', '0P00005WDS.BO', '0P00005WDQ.BO', 'TRPIX', '0P00005WDR.BO', '0P0001BB2K.BO', 'FVSKX', '0P0000XVG7.BO', '0P0001BB5W.BO', '0P0000XVG5.BO', '0P0000XVG4.BO', 'TFFCX', 'TRLGX', '0P0000XVV3.BO', '0P00005UQP.BO', '0P0001BB5X.BO', '0P00005UQO.BO', 'BIREX', '0P00015I1U.BO', '0P00012B07.BO', 'QGIAX', 'BOPCX', 'RYAWX', 'PREQX', 'LYRIX', 'GURIX', 'FASPX', '0P00005X39.BO', 'LYRBX', '0P0001BAKM.BO', '0P00005WFJ.BO', '0P0000XW2G.BO', '0P0000XW2F.BO', '0P0001BA06.BO', 'RYGRX', 'USBOX', '0P0001BA07.BO', '0P00005V9X.BO', '0P00005V9W.BO', '0P00011R49.BO', '0P00015H6K.BO', 'RYREX', 'PAVLX', 'RYHRX', 'BOPRX', 'PZFVX', 'TRVLX', 'GSRAX', '0P0000TZYK.TO', '0P0001AH1E.TO', '0P0001CB0K.TO', '0P00008XKQ.TO', 'RYCRX', '0P00008XKP.TO', 'VSMCX', 'QNTIX', '0P00011NT9.TO', 'FLICX', '0P0000XZ1C.TO', 'HIMVX', '0P00008XKR.TO', '0P00011NT8.TO', '0P00008XKS.TO', '0P00011IK8.TO', 'GMUEX', 'JCNAX', 'CGERX', 'VSCAX', 'JCNIX', '0P0001AH1A.TO', 'GQIRX', '0P0000XV0O.BO', '0P0001BAKN.BO', 'QRCRX', 'CRWRX', '0P00005WFI.BO', 'GSRLX', 'GMCQX', 'SENCX', '0P0000XV0P.BO', 'GSRIX', 'SICWX', '0P0000N9PY.L', '0P0000MOHF.TO', 'PXGAX', 'STLYX', 'FLCEX', 'GCTSX', '0P00019PZB.TO', 'NOLCX', 'SMAPX', 'GURAX', 'QNTAX', 'GCTAX', 'MUETX', 'SMFPX', 'SMRPX', 'SMLPX', 'SEECX', 'FLCGX', 'TISHX', 'ARCNX', 'PWJZX', 'HILFX', 'JCONX', 'MUEVX', 'JACNX', 'LIMIX', 'JSVAX', 'PRILX', 'PTMAX', 'MUSBX', '0P0000XVUG.BO', '0P0000XVUI.BO', '0P0001BBJR.BO', 'GVMCX', '0P00005WL3.BO', '0P0001BBJS.BO', '0P00005WL4.BO', 'HLFNX', 'FGSKX', 'BAREX', 'INFIX', 'SEEKX', 'CRCRX', 'VSMIX', 'FGSAX', 'PWJAX', 'JACCX', 'EFCAX', 'DLCEX', 'PMPRX', 'MLPZX', 'DLCIX', 'JFRNX', 'FGSCX', 'FGSIX', 'PXWGX', 'JDCAX', 'EGOIX', 'CLACX', 'GSRCX', 'NLACX', 'PTMCX', 'JCAPX', 'PWJQX', 'PTEZX', 'EGOHX', 'TAVFX', 'PWGIX', 'FNIAX', 'SOAAX', 'CRARX', 'PFSLX', 'EGOAX', 'BUFEX', 'SMCPX', 'HWAIX', 'GETGX', 'HWAAX', 'BVSIX', 'JDCRX', 'JARTX', 'VEVIX', 'CRSCX', 'URTCX', 'IARAX', 'RMBJX', 'IARYX', 'MLRRX', 'PREAX', 'FZANX', 'REINX', 'MLAAX', 'FINSX', 'FRESX', '0P0000XVAF.BO', '0P0001BA88.BO', 'SACRX', '0P00005WW8.BO', '0P0001BA89.BO', 'JPINX', '0P0000XVAE.BO', '0P0000XV57.BO', 'URTLX', 'IARCX', 'NLCIX', 'NLCDX', 'GSRRX', '0P0000XV56.BO', '0P0001BA1X.BO', 'NLCFX', '0P0000JCBY.BO', 'MNRIX', 'PLASX', '0P00009J3U.BO', '0P0001BA1Y.BO', 'RMBHX', 'CLARX', '0P00009J3Z.BO', 'FSRNX', 'VEVRX', '0P0000JS57.TO', 'SDLAX', 'ICFEX', 'WFLLX', 'RYLDX', 'MLINX', 'VEVCX', '0P0000XVJM.BO', '0P0000XVJH.BO', '0P0001BB7F.BO', 'FIUSX', 'IYCEX', 'RYCYX', 'RYCVX', '0P00009JAR.BO', '0P0001BB7G.BO', '0P00009J3F.BO', 'SACEX', 'FDEKX', 'BLGRX', '0P00009QFU.TO', '0P00005VCT.BO', '0P0001BAW1.BO', '0P0000XV8H.BO', '0P0001BAVY.BO', 'FLVIX', '0P0000XV8K.BO', 'FLSTX', 'JCRIX', '0P00009PUM.BO', '0P00009PUO.BO', '0P0001BAVB.BO', 'MLCIX', 'HDPMX', '0P00005VCS.BO', 'MNREX', 'FLSAX', 'TGABX', '0P0000XVL5.BO', '0P0001BB8N.BO', '0P0000XVL0.BO', '0P0000GB07.TW', 'EGORX', '0P00016CM9.TO', 'FLRAX', '0P00005WFC.BO', '0P0001BB8O.BO', '0P000070D5.TO', '0P00005WFD.BO', 'NMIMX', 'FIVUX', 'GVEQX', '0P0000XV7F.BO', '0P0000XV7L.BO', '0P0001BJFS.BO', '0P0000XV7M.BO', 'FIVVX', '0P0000XV7G.BO', '0P0001BAV7.BO', 'IARRX', 'HNMDX', '0P00005VCO.BO', '0P0001BAV8.BO', 'CLNCX', 'IARFX', '0P0001BB0O.BO', '0P00005WX3.BO', 'FDEQX', 'MASTX', 'NRREX', '0P00014CWM.TO', '0P00014CWN.TO', '0P00014BN2.TO', '0P00014CWK.TO', 'GCEQX', 'BALGX', 'STMDX', '0P00014BN1.TO', 'DLMAX', 'DLMIX', '0P00014BN0.TO', '0P0001BB0N.BO', '0P0000XVCE.BO', 'MEFOX', '0P0000XVCB.BO', 'FCNKX', '0P0000JTS7.F', 'NREAX', 'NBRFX', '0P0000XVQP.BO', '0P0001BBF3.BO', '0P0000XVQQ.BO', 'STMMX', '0P0001EG4K.TO', 'SKIRX', 'FLRYX', '0P0001EGU9.TO', 'NRERX', 'SKRRX', '0P00005WIY.BO', '0P0001BBF4.BO', '0P00005WIZ.BO', '0P0001EG4L.TO', '0P0001EG4H.TO', '0P0001EGUC.TO', '0P0001EGUB.TO', 'CLQZX', '0P0001EG4I.TO', '0P0000W7QY.TO', '0P0001EG4M.TO', '0P0001EGUA.TO', '0P0001EG4J.TO', '0P0001EGUD.TO', '0P0000W82X.TO', '0P0001EGUE.TO', '0P0000W7QX.TO', '0P0000M5TB.TO', '0P0000M5TD.TO', '0P0000W82V.TO', '0P0000W7QW.TO', '0P0000CUBM.TO', '0P0000M5KE.TO', '0P0000771Q.TO', '0P0000M56U.TO', '0P000072TQ.TO', '0P0000739K.TO', '0P0000KS2H.TO', 'ALBCX', '0P0000M5KD.TO', '0P0000M5KB.TO', 'AGIZX', '0P0000W82T.TO', 'ETGIX', 'ALBAX', '0P0000XW4G.BO', '0P0001BA3F.BO', '0P0000XW4H.BO', '0P00005WX5.BO', 'JRIRX', 'QSPRX', 'STMOX', 'AIGOX', 'ECGIX', '0P000093B3.BO', '0P000093B2.BO', '0P0001BA3H.BO', '0P0000XW4F.BO', '0P0000935S.BO', 'EGIIX', 'BGFIX', 'FMPOX', 'SKNRX', '0P0001DFE8.F', 'NMIAX', 'RDLAX', 'MSOSX', '0P0000SPVD.TO', 'FLGEX', 'QSPNX', 'MLPTX', 'WBGSX', '0P0000XVXK.BO', '0P0001BAJP.BO', '0P00005WFG.BO', 'MFOIX', '0P0000V5KL.TO', 'URTAX', 'CRSOX', 'JPGSX', 'FOCKX', '0P00005V5I.BO', 'FMPTX', 'FRLAX', 'PYREX', 'JGISX', '0P0001DVZ9.F', 'MSOIX', 'JGIRX', '0P00005V5H.BO', '0P0001B9OY.BO', 'DRLIX', 'AWTAX', 'CSRIX', '0P0001BBDZ.BO', '0P0000XVOF.BO', '0P0000XVOB.BO', '0P0000XVXJ.BO', '0P0001BF1X.BO', 'FSMVX', 'MSOAX', 'SNIGX', 'BFGBX', 'MCSSX', 'JIGAX', 'PAGRX', 'SKCRX', '0P00005WHR.BO', 'JCICX', 'PAGHX', 'MRESX', 'GITAX', '0P0001BBE0.BO', '0P00005WHQ.BO', 'CLCQX', '0P0000V19D.TO', 'LGNGX', 'PAGDX', 'CCQYX', 'JIGZX', 'CCRZX', 'REIIX', 'NBRIX', '0P0000XW9N.BO', '0P000077OR.TO', '0P0000XW9M.BO', '0P0001BAAF.BO', '0P000077OS.TO', 'FIDFX', 'FOCPX', 'GITIX', 'GITCX', '0P0000XW9R.BO', 'HRCMX', '0P0001BAAG.BO', '0P00005WOX.BO', 'GISTX', '0P00005WOY.BO', '0P0001BAA8.BO', '0P0000XW9Q.BO', 'RSIPX', 'JCRCX', 'VGSCX', 'AWTCX', 'GITSX', 'MFOMX', 'AWTIX', '0P00005WND.BO', 'CRSAX', 'REICX', '0P00005WNF.BO', '0P0001BAA9.BO', 'HRCUX', 'AQEAX', 'FMPAX', '0P0000XV0E.BO', 'RYMDX', '0P0000XVOJ.BO', 'NMMGX', '0P0001BBCV.BO', '0P0000XVOO.BO', 'MLPAX', 'ARYDX', 'ARYVX', '0P0000XV6P.BO', '0P00005WGY.BO', '0P0000XV0B.BO', '0P0001BAJQ.BO', '0P000093FQ.BO', 'CGQYX', '0P0001EH7Y.TO', '0P0000XV6M.BO', '0P0001BJFN.BO', '0P00005WGX.BO', '0P0001BBCW.BO', 'VGSAX', 'MOPBX', 'VNSYX', '0P00005WFH.BO', 'VRGEX', 'CSRSX', 'RYDCX', 'MGOCX', '0P00005WUK.BO', 'NGQIX', 'FMPEX', '0P00005WUJ.BO', '0P0001BAU1.BO', 'FSERX', 'VGISX', 'FRRSX', '0P000070GI.TO', '0P0000WJLJ.TO', 'NGQCX', '0P000073J8.TO', '0P0000WJHQ.TO', '0P000073LC.TO', 'AWTPX', 'PROVX', 'PCREX', 'SREYX', '0P000093C1.BO', '0P0001BBES.BO', 'SETAX', '0P0000XVPZ.BO', 'GAGEX', 'SAREX', 'SEIRX', 'CGQFX', '0P0000XVPY.BO', '0P0001BBER.BO', '0P0000XVZ0.BO', '0P0001B9QX.BO', '0P0000XVYZ.BO', 'CVISX', 'SKSRX', '0P00005V3J.BO', '0P0001B9QY.BO', '0P000070MK.TO', '0P00005X1D.BO', 'PWREX', 'MFEIX', 'MFEJX', 'BACAX', 'MFEKX', '0P0000WJI2.TO', 'MIDNX', '0P000071ZK.TO', '0P0000WJM1.TO', '0P00007367.TO', 'MGNDX', 'TCRAX', 'JCRAX', 'TWSIX', '0P0000SV1G.L', 'CQURX', '0P0000XW4A.BO', '0P0000XW49.BO', '0P0001BA34.BO', '0P00005VBZ.BO', '0P0001BA36.BO', '0P00005VC0.BO', 'ASDEX', 'VNSCX', '0P000071KO.TO', 'TWCGX', 'MISEX', '0P00014E43.TO', '0P00014E44.TO', '0P00014E45.TO', 'MMDEX', '0P0001EGLY.TO', '0P0001EGLX.TO', 'MINDX', '0P0001EGLZ.TO', 'PCRPX', '0P0001EGLU.TO', '0P0001EGLV.TO', 'RYEAX', '0P0000W7Y0.TO', 'WPSZX', '0P0001EGLW.TO', 'FICGX', '0P0000W7XW.TO', '0P000073I4.TO', '0P0000W7Y3.TO', '0P0000M59V.TO', '0P000070SI.TO', '0P0000M59Q.TO', 'FTQGX', 'RYENX', 'RYEIX', '0P0000M59N.TO', '0P0000SV1F.L', '0P00005X03.BO', '0P0001BAER.BO', '0P0001BAPY.BO', '0P000093ST.BO', 'FICIX', '0P000093TC.BO', '0P0000XVHE.BO', 'WPASX', 'WPSKX', 'RYECX', '0P0000XVDT.BO', '0P0001BB36.BO', '0P0000XVDN.BO', '0P0000XVDP.BO', '0P0001BB38.BO', '0P00009Q09.BO', 'MUSDX', '0P00005UP7.BO', '0P0001BB37.BO', '0P00005UP8.BO', 'DRLYX', '0P0000XV6R.BO', 'TARKX', '0P0000XV6Q.BO', 'TGCNX', '0P0001BAEQ.BO', '0P0000XUYG.BO', 'RPFRX', 'WPSIX', '0P0000XUYF.BO', '0P00005WUM.BO', '0P0001BAU4.BO', 'FICHX', '0P00005WUL.BO', '0P0001B9OK.BO', '0P00005X2W.BO', 'DREYX', '0P0001B9T3.BO', '0P00005X3P.BO', 'CCSRX', 'GREZX', 'TGCEX', 'AKREX', 'CCSZX', 'FARCX', 'QSPIX', 'MSURX', 'GREYX', '0P00005X04.BO', '0P0000XW0L.BO', '0P0001B9T2.BO', '0P0000XVHH.BO', '0P0001BAPX.BO', 'PCRRX', 'WTMVX', 'TGGWX', '0P0000XW0M.BO', '0P00005V7N.BO', 'AKRIX', 'QAACX', 'YCGEX', 'WIMVX', 'AKRSX', '0P0000XVX9.BO', '0P0001BF1Z.BO', 'FHETX', 'QIACX', 'QKACX', 'FREAX', '0P00005V5G.BO', '0P0000XVX8.BO', 'CADLX', 'AREEX', 'SGTRX', 'QCACX', 'FRNRX', 'CSGZX', 'VRREX', 'SRFMX', 'CCHRX', 'DGIGX', 'MCSIX', 'MCSRX', 'FHEIX', 'SGTTX', 'AREWX', 'BACIX', 'PHRIX', 'PHRCX', 'OSPSX', 'SLCGX', 'KTCCX', 'MLPGX', '0P0000XW2M.BO', 'PCSRX', '0P0000XW2L.BO', '0P0001BA0C.BO', 'FNRAX', '0P00008TMN.BO', 'SHTCX', 'RYSIX', 'DGAGX', '0P00008TEZ.BO', '0P0001BA0D.BO', 'RYELX', 'AREDX', 'FHEAX', 'RYSAX', 'DGYGX', 'REACX', 'CSHNX', 'KTCIX', 'OSPAX', 'FRLCX', 'KTCSX', 'TIRGX', 'AVALX', 'FNCRX', 'GCGIX', 'GLCUX', 'ARYCX', 'SLGYX', 'GLCCX', 'TRGRX', 'MLPOX', 'MLCPX', '0P0000XW5J.BO', '0P0001BA5T.BO', '0P0000XW5I.BO', '0P00005VDB.BO', '0P0001BA5U.BO', 'PHRAX', 'GLCTX', '0P0001BJFC.BO', '0P0000XXT5.BO', '0P0000XV5R.BO', 'GLCGX', 'PAGEX', 'DPTRX', '0P00008TPO.BO', '0P0001BASZ.BO', '0P00008TH7.BO', 'DTMGX', 'MSULX', '0P00008FAP.F', 'SLGCX', 'POLRX', 'SCMIX', 'CCIZX', 'SCIRX', 'POLIX', 'APGZX', 'SLMCX', '0P0000XVKO.BO', '0P0001BB87.BO', '0P0000XVKR.BO', 'SCIOX', 'ALCKX', '0P00005URY.BO', '0P0001BB88.BO', '0P00005URX.BO', '0P0000XVNP.BO', '0P0001BBBS.BO', '0P0001BBMO.BO', '0P0000XVNU.BO', '0P0000K9VG.BO', '0P0001BBMQ.BO', '0P0000K9VM.BO', '0P0001BBBU.BO', '0P0001AAMQ.TO', '0P0001FKNJ.TO', 'QILGX', 'APGYX', '0P00005UUJ.BO', '0P00005UUI.BO', '0P0001BBMP.BO', '0P0001BBBT.BO', 'QCLGX', '0P0001CFQQ.TO', 'TIRRX', 'APGAX', 'TRREX', '0P0001BJFT.BO', '0P0000XV81.BO', 'APGCX', '0P00005V8E.BO', '0P0001BAVG.BO', 'MURSX', 'MSUSX', 'NQCFX', '0P0000XV82.BO', 'QALGX', 'FANAX', 'SWLSX', '0P00005X47.BO', 'PCRIX', '0P0000XVW6.BO', '0P0001B9NJ.BO', '0P00005V46.BO', '0P0001B9NK.BO', 'PAREX', 'FANIX', '0P0000XVW7.BO', 'FAGNX', '0P00005V47.BO', 'AMIGX', 'CCCAX', 'CSHZX', 'IMLPX', 'QBLGX', 'AMAGX', 'PJEAX', 'PEFIX', 'FNRCX', 'PEFPX', 'RRGAX', 'RRGRX', 'RRGTX', 'RRGCX', '0P0000NG5S.TO', 'FSENX', '0P0001B55N.TO', 'WLGBX', 'LCGFX', '0P00007104.TO', '0P00017QYN.TO', 'AIAGX', 'LCGNX', 'WLGRX', '0P00012KYC.TO', 'PEFFX', 'ILGRX', 'CWCFX', 'IYGIX', 'AMLPX', 'TSAGX', 'PJEZX', 'GENIX', 'CSHAX', 'DSMLX', '0P0001032H.TO', 'TLGYX', 'FSDCX', 'AIGYX', 'CREEX', '0P0000XVPQ.BO', '0P0000XVPR.BO', '0P0001BBEL.BO', 'PETAX', '0P0000XU1E.BO', '0P0001BBEM.BO', 'IIRFX', 'IENYX', '0P00005WIC.BO', 'LETRX', 'PRRSX', 'FSTEX', 'FSELX', 'IWRFX', 'FELCX', 'FELTX', 'FELAX', '0P0000XW8F.BO', '0P0000XW8E.BO', '0P0001BA8I.BO', 'FELIX', '0P00009J3K.BO', '0P00009J3B.BO', '0P0001BA8J.BO', 'IEFCX', '0P0000XW4O.BO', '0P0000XW4N.BO', '0P0001BA3L.BO', 'INDIX', 'PETCX', 'PETPX', '0P0001BA3M.BO', '0P00009PUL.BO', '0P0000XW51.BO', '0P0000XW50.BO', 'MARNX', '0P00005VCK.BO', '0P0001BA3Y.BO', '0P00005VCJ.BO', 'TORCX', 'INFCX', 'IENAX', '0P0000XW4D.BO', '0P0001BA3B.BO', '0P0000XW4E.BO', '0P0000NDR2.TO', '0P00005VCC.BO', '0P0001BA3D.BO', '0P00005VC6.BO', 'EGLAX', 'CCCNX', 'EGLCX', '0P0000XW4V.BO', '0P0001BA3S.BO', '0P0000XW4U.BO', '0P0001BA3T.BO', '0P00005VCL.BO', '0P00005VCH.BO', 'HCMSX', 'TORIX', 'FSNGX', 'TORTX', '0P0001BA2I.BO', '0P0000XV5B.BO', '0P0000XV5C.BO', '0P0000A4KC.BO', '0P0001BA2J.BO', '0P0000A3Y6.BO', 'RWGFX', '0P000076YD.TO', '0P00007126.TO', 'RWGIX', 'ENPIX', '0P00016YQ5.F', 'LDVAX', 'PRPZX', '0P00011EAD.TO', 'MLPNX', 'ENPSX', 'GLPRX', 'GLPCX', 'PRPAX', 'GLPAX', '0P0000XW4I.BO', '0P0000XW4J.BO', 'GMLPX', '0P00005VC9.BO', '0P0001BA3I.BO', '0P00005VCB.BO', '0P000126DZ.F', '0P0000GO04.F', '0P00000DBW.F', '0P0000GO03.F', 'MLPLX', 'UPUPX', 'RYTNX', 'RYTTX', 'RYCTX', 'DXSLX', '0P00019O2I.F', 'FSESX', '0P00009UZJ.HK', 'FNARX', 'RYVYX', 'RYVLX', 'DXQLX', 'RYCCX', '0P000197WE.HK', 'BACSX', '0P00015154.TO', '0P0000NDRR.TO', 'OEPIX', 'OEPSX', 'SFPCX', 'RHSIX', 'RYVVX', '0P0001BAGJ.BO', '0P0000XUZ2.BO', '0P00019PZ5.TO', 'FIDSX', 'JVAYX', '0P0001BA4R.BO', '0P0000XW5A.BO', '0P0000XVUY.BO', '0P0000XW5B.BO', 'NWUIX', '0P0000XVCZ.BO', '0P0001BLNN.BO', '0P0001BA4S.BO', '0P00009JAS.BO', '0P00009JCI.BO', '0P0000XW6R.BO', '0P0001BAGR.BO', '0P0000XUZ7.BO', '0P0001C8WA.TO', 'LOAIX', '0P00005UMS.BO', '0P0001BAGS.BO', '0P0001BA6T.BO', '0P0000XW6Q.BO', '0P0001BA6U.BO', '0P00005WLL.BO', '0P00005WLM.BO', '0P0001BLNO.BO', '0P00005V2U.BO', '0P0001B9LN.BO', '0P0000XYO8.BO', '0P0000XUZ8.BO', '0P00005V6M.BO', '0P0000XVSB.BO', '0P0000XW9U.BO', '0P0001BBFP.BO', '0P0000XVSA.BO', 'DHQAX', '0P0000XW9T.BO', '0P00005WK7.BO', '0P0001BBFQ.BO', '0P00005WK8.BO', '0P00005UMR.BO', '0P0000XVLZ.BO', '0P00012O30.BO', '0P0001BBB0.BO', '0P0001BBLW.BO', '0P0000935X.BO', '0P000093B8.BO', '0P00005WG2.BO', '0P0001BBLX.BO', '0P00012O31.BO', '0P0001BBB1.BO', '0P0000XVD0.BO', 'PRVRX', '0P00012MQD.TO', '0P0000XVG1.BO', '0P0001BB5Q.BO', '0P0000XVG0.BO', '0P00015E14.BO', 'NWUAX', '0P00005WYR.BO', '0P00000XI6.F', 'SVFFX', '0P00005WIB.BO', '0P00015E15.BO', '0P00005UQK.BO', '0P0001BB5R.BO', '0P00005UQM.BO', 'SMVLX', '0P000073CY.TO', '0P0001H1Z7.TO', '0P0000XVL2.BO', '0P0001BB8L.BO', '0P0000XVKX.BO', '0P0001BBEK.BO', '0P0000GB2W.BO', '0P0001BF1H.BO', '0P0000XV5K.BO', '0P0001BAV2.BO', '0P0000XV7C.BO', 'EICIX', '0P00014MH9.BO', '0P0000SPVF.TO', '0P0000XVPO.BO', '0P0000SPVH.TO', '0P0000XV7B.BO', '0P00005US7.BO', '0P0001BB8M.BO', 'SCVJX', 'SVFAX', '0P0001BB9W.BO', '0P0000XVLR.BO', '0P0001BBKS.BO', '0P0001BASN.BO', '0P00005WSF.BO', '0P0000XVLO.BO', '0P0000XWC9.BO', '0P00008THT.BO', '0P0001BAKK.BO', '0P0000XW5Z.BO', 'SPSRX', '0P0001BACD.BO', '0P0000XWAH.BO', '0P0000XW5Y.BO', '0P0001BA59.BO', '0P0000XWAI.BO', '0P0000XV16.BO', 'HILGX', '0P00005VE7.BO', '0P00005X00.BO', '0P0001BACE.BO', '0P00005X02.BO', '0P0001BA5A.BO', '0P00005VE5.BO', 'ESMYX', 'CGMFX', '0P00005WFN.BO', '0P00017WWC.TO', '0P0000XW3N.BO', 'HFLGX', '0P0001D54I.TO', '0P00005VBF.BO', '0P000071WA.TO', '0P0000XV17.BO', '0P0001BAM0.BO', '0P000070FY.TO', '0P00012AQR.L', '0P0000A9CP.L', 'HUSIX', '0P0001BALZ.BO', '0P00005WFK.BO', '0P0000XBRU.L', 'FFSIX', '0P0000XBRV.L', 'VSFSX', '0P00005VBE.BO', '0P0001B9U8.BO', 'VSFIX', '0P0000767S.TO', 'VSFAX', '0P00012AQ2.L', '0P0000A9CH.L', '0P0001IPG1.TO', '0P0000WJH3.TO', '0P0000A9CN.L', 'NWHHX', '0P0000WJL7.TO', '0P0001IPG2.TO', '0P0000A9CO.L', '0P0000710X.TO', '0P000073KW.TO', '0P000073WB.TO', 'HRSRX', 'NWHGX', 'SFPIX', 'SPSDX', '0P00017IVW.F', '0P0001BA9A.BO', '0P0000XW90.BO', '0P0000XW91.BO', '0P000160TA.F', '0P00005WNC.BO', '0P0001BA9B.BO', '0P00015XF3.F', '0P00005WNE.BO', '0P0001HFBC.TO', '0P00015XF2.F', '0P00018H4L.F', 'FAFCX', '0P00018H4M.F', '0P00006488.F', 'HRSMX', '0P0001HABZ.TO', '0P0000XW3M.BO', '0P0001B9U9.BO', 'RYZAX', '0P0001C8WF.TO', 'SPVYX', 'SESVX', 'RYLVX', 'TALCX', '0P0000XX0F.BO', '0P00005V6L.BO', '0P0001B9LM.BO', '0P0000K9VO.BO', 'NWUCX', 'WIEMX', 'ROFCX', 'SMVIX', 'ASVDX', 'FAFSX', '0P0000AD4G.TO', '0P0000N4TE.TO', '0P0000MOO7.TO', '0P0000713P.TO', '0P0000N4TF.TO', '0P00015CNI.L', 'UDPSX', '0P0000MLLO.L', '0P000083X3.TO', 'SFPAX', '0P0000706W.TO', '0P0000XVWK.BO', '0P0001B9O1.BO', '0P0001DETM.TO', '0P0000NCYN.TO', '0P00016VT7.TO', '0P0001AC6C.TO', '0P0001AC4W.TO', '0P0001AC68.TO', '0P0001AC6E.TO', '0P0001AC69.TO', '0P0001AC4V.TO', '0P0001BAFE.BO', '0P00005UO4.BO', '0P0000XVTI.BO', '0P0001BBIE.BO', '0P0000XVTC.BO', '0P00014MA6.TO', 'WAMVX', 'FSCWX', '0P0001BTAZ.TO', '0P00005UZE.BO', '0P0001BBIF.BO', '0P00005UZF.BO', '0P0001BTB1.TO', '0P0001BTB0.TO', '0P00005X32.BO', '0P0001B9O2.BO', 'TGVNX', '0P0000N5EP.TO', '0P0000OOYW.F', '0P0000PTRX.TO', '0P0000IUBY.TO', '0P00008TT2.BO', 'FSCVX', '0P0000XV0H.BO', '0P00018Q6L.BO', '0P0001B9UA.BO', '0P0001BAFD.BO', '0P0000XUZ9.BO', 'AADEX', '0P0001F63V.F', '0P0001DETV.TO', '0P0000XPSX.TO', 'NWUSX', '0P00014E3O.TO', '0P00014E3Q.TO', '0P0000XVPC.BO', '0P0001BBDO.BO', '0P00014E3P.TO', '0P0000XUZA.BO', 'FIKDX', '0P0000M6PJ.F', '0P0000AD4F.TO', '0P0000XVPD.BO', 'ESMCX', 'TGDIX', 'FSCAX', '0P0000XPSV.TO', 'RYMEX', '0P0000AD4H.TO', '0P0001BBDP.BO', '0P00005UWW.BO', '0P0000TXVY.TO', '0P00000HKK.F', '0P00005UWX.BO', '0P0001KM55.F', '0P0001EGKR.TO', '0P00005UO6.BO', '0P0001EGKO.TO', '0P0001EGKS.TO', '0P0000TXVX.TO', '0P00000TYK.F', '0P0001EGKT.TO', '0P0001EGKP.TO', '0P0001EGKQ.TO', '0P0000W7YB.TO', 'SPSCX', '0P0000W7Y4.TO', '0P0000704J.TO', '0P0000704R.TO', '0P0000M5A8.TO', '0P0000M5A7.TO', '0P0000M5A4.TO', '0P0000W7Y7.TO', 'SVPIX', 'SPSAX', 'NWHEX', '0P00018LD2.BO', '0P0001B9U6.BO', '0P00014E65.TO', '0P00014E66.TO', '0P00014E67.TO', 'SVPSX', '0P0001BAKL.BO', '0P0000704Q.TO', '0P00017FNV.TO', '0P0001B9NR.BO', '0P00005X31.BO', '0P00013EBJ.TO', 'LOANX', '0P0000XW5L.BO', '0P0000XW5K.BO', '0P0001BA5V.BO', '0P0001GZ0S.TO', '0P00005VDE.BO', '0P00005VDD.BO', '0P0001BA5W.BO', '0P0001BF18.BO', '0P0000XW72.BO', '0P0000A0FS.TO', '0P000070C4.TO', '0P00005WLU.BO', '0P0001BF17.BO', '0P0000AB1X.L', '0P00018LFD.L', '0P00014NYO.F', 'FSCCX', '0P0001CC4J.F', '0P0001DETW.TO', '0P0000238U.L', 'UDPIX', '0P0001JKIB.L', 'FSHOX', '0P0001DEWZ.TO', 'DFFCX', '0P0000U20R.L', '0P00000V19.L', 'FSCTX', 'JASCX', 'DVFYX', '0P00000N2X.L', 'NQVRX', 'RHSCX', '0P00019JST.TO', '0P000072Q8.TO', '0P0000XW5P.BO', '0P0001BA69.BO', '0P0000XW5O.BO', '0P000071UH.TO', '0P00005VDI.BO', '0P0001BA6A.BO', '0P00005VDH.BO', 'VVPLX', 'NQVAX', 'PSCZX', 'NQVCX', '0P00017X7W.TO', '0P0001DETX.TO', 'VVPSX', 'ESMAX', 'NWHFX', '0P0000714P.TO', 'SFSNX', '0P000072S2.TO', '0P000072HA.TO', 'PJSQX', '0P0000Z6UC.TO', '0P0000ZQO0.BO', '0P0001BB58.BO', '0P0000XVFS.BO', '0P0001HN7U.TO', '0P0001BB56.BO', '0P0000XVFN.BO', '0P0001BB57.BO', '0P00018IQ0.BO', '0P0000XVWL.BO', '0P0001BNS7.BO', '0P00005V63.BO', '0P0001BB5A.BO', '0P00018IPZ.BO', '0P00013FV9.TO', '0P0001EXKE.L', '0P0001HAG5.TO', '0P00005WE6.BO', '0P0001BB5B.BO', '0P000124IS.BO', '0P0001BB59.BO', '0P0000S4C2.BO', '0P0001AC6I.TO', '0P0001AC4Y.TO', '0P00015CNH.L', '0P0001AC6H.TO', 'PGOAX', '0P0001AC6J.TO', '0P0001FKME.TO', '0P0001FEN8.TO', '0P0001AC4Z.TO', 'TGVOX', '0P0001EXKD.L', '0P0001FKMF.TO', 'HUSEX', '0P0000A0FQ.TO', '0P00018W92.F', '0P000074CB.TO', 'LVAQX', 'UNPSX', 'FSCEX', 'HCPSX', '0P0000P8SB.L', 'ULPSX', 'HDPSX', '0P0000XW2X.BO', '0P00005VAD.BO', '0P0001BA0Q.BO', '0P0001BA0O.BO', '0P0000XW2W.BO', 'BRSGX', '0P00005VAE.BO', 'UNPIX', 'HLHIX', 'ULPIX', '0P00014CV9.TO', '0P000159QE.TO', '0P00014CVB.TO', '0P00014CVA.TO', '0P0000N98Q.TO', '0P00014E3U.TO', '0P00014E3V.TO', '0P00014E3W.TO', 'RYKAX', 'RYKIX', 'UMPSX', '0P000159NV.TO', '0P0000N469.TO', '0P0001DYW6.TO', '0P000159NS.TO', 'RYBKX', 'LMCLX', '0P0001BJDO.TO', '0P0001IOI8.TO', 'CSCVX', '0P0000N468.TO', '0P0001IOI6.TO', '0P0001IOI7.TO', '0P00014CVQ.TO', '0P00014CVP.TO', '0P00014CVO.TO', 'FAKDX', '0P0000XVVJ.BO', 'FSCDX', '0P00019W2R.F', '0P00005V5U.BO', 'RYKCX', '0P0001B9N0.BO', '0P0000XVVI.BO', '0P000070OP.TO', '0P0001B9N1.BO', '0P00005V5S.BO', '0P00014NYN.F', 'UMPIX', '0P0000XW1M.BO', '0P0001DETY.TO', '0P0001DGC7.BO', '0P0000XVSH.BO', '0P0001BBGD.BO', '0P0000XWBK.BO', '0P0001AL81.TO', '0P0000XW1L.BO', '0P0001B9Z6.BO', '0P0001956N.F', 'PSCCX', '0P00017FQL.TO', '0P00014BMO.TO', '0P00014BMN.TO', '0P00014BML.TO', '0P0001DGC8.BO', '0P00005UYD.BO', '0P0001BBGE.BO', '0P00005UYC.BO', '0P0000A0EU.TO', '0P00009J3N.BO', '0P0001B9Z7.BO', '0P00005V93.BO', '0P0001EGTO.TO', '0P00009NCD.TO', '0P0000FXEO.TO', '0P0001EGTP.TO', '0P0001BB75.BO', '0P0000XVJW.BO', '0P0000XVJT.BO', '0P0001EGTL.TO', '0P0001EGTM.TO', '0P0001B9NQ.BO', '0P0000XVWC.BO', '0P0001EGTQ.TO', '0P0000XVWD.BO', '0P0001A2WG.TO', 'FZAOX', '0P0001BB76.BO', '0P00005USG.BO', 'TGDVX', '0P00005USF.BO', 'FSCIX', '0P00005V62.BO', '0P00005VE9.BO', '0P0001BA5C.BO', '0P00005VE6.BO', '0P000071VO.TO', '0P0001EG49.TO', '0P0001EG48.TO', '0P0000IWB3.L', '0P0001EG4A.TO', '0P0001EG45.TO', '0P0001EG46.TO', 'WIINX', '0P0000XW1H.BO', '0P0001EG47.TO', '0P0000XVHW.BO', '0P0001BAQI.BO', '0P0001B9YK.BO', '0P0000XW1G.BO', '0P0000W7V8.TO', 'AUERX', '0P0000CUAB.TO', '0P0000M5JR.TO', '0P00019W2P.F', '0P0000W7V7.TO', '0P0000M54T.TO', '0P000070V6.TO', '0P00005V8W.BO', '0P0000771E.TO', '0P0001B9YM.BO', '0P00005V8V.BO', '0P0001BAB9.BO', '0P0000XWA4.BO', '0P0000W7V6.TO', 'LOMMX', 'WAINX', '0P0000738L.TO', '0P0000KS1K.TO', '0P0000M549.TO', 'HDSVX', '0P0001ADHX.TO', '0P00019EIN.TO', '0P00019EIM.TO', '0P00019EIP.TO', '0P00019EIQ.TO', '0P00013652.TO', '0P00019EIR.TO', '0P0000718X.TO', '0P000071QH.TO', '0P00013657.TO', '0P00013656.TO', '0P00013658.TO', '0P00019EIO.TO', '0P0000XWA3.BO', '0P00013651.TO', '0P00005V31.BO', '0P0001B9QA.BO', '0P00013659.TO', '0P0001BADY.BO', '0P00005WD6.BO', '0P0001DEWX.TO', '0P0001BB27.BO', '0P0000XVD3.BO', '0P0000XVDA.BO', '0P0000XVD8.BO', '0P00005WDH.BO', '0P00005WDJ.BO', '0P0001BB28.BO', '0P00005WDI.BO', '0P0001DEWY.TO', '0P0000JSOI.TO', '0P0000GB5M.BO', '0P0001BABA.BO', '0P0000ZEXY.L', '0P00000D7Z.L', '0P0000XVSQ.BO', '0P0001BBI2.BO', '0P0000XVSV.BO', 'HDSIX', '0P0000K9JZ.L', '0P0000706S.TO', '0P00000VSF.F', '0P0001B9PN.BO', '0P0000XVYD.BO', '0P0000XVYE.BO', '0P00005UYL.BO', '0P0001BBI3.BO', '0P00005UYK.BO', '0P00005V6K.BO', '0P00005V6J.BO', '0P0001B9PO.BO', 'HCPIX', '0P0000UR7J.TO', '0P0000GB5K.BO', '0P0000XV5I.BO', '0P0000XV5J.BO', '0P0001BF1G.BO', '0P0001BASL.BO', '0P00005WSD.BO', 'LSVQX', '0P00005WSE.BO', '0P0000810W.L', '0P0000XW5F.BO', '0P0000XW5E.BO', '0P0001BA53.BO', '0P00005VD4.BO', '0P00005VD6.BO', '0P0001BA54.BO', '0P0000XVOZ.BO', '0P0000XVYP.BO', '0P0001B9Q9.BO', '0P00005WHZ.BO', '0P0000XVYQ.BO', '0P0000XV96.BO', '0P0000AD38.TO', '0P0000XVX3.BO', '0P0001BF1W.BO', '0P0000XVX2.BO', '0P0000XW7T.BO', '0P00005WMV.BO', '0P0001BB8Q.BO', '0P0000XVKD.BO', '0P00005X2U.BO', '0P0000XV93.BO', '0P0001BAX3.BO', '0P0000XVKH.BO', '0P0001B9OG.BO', '0P00005V5E.BO', '0P0000XVTW.BO', '0P0001BBJ6.BO', '0P00005WL6.BO', '0P0000XVU2.BO', '0P00005WL5.BO', '0P0001BBJ7.BO', '0P00005URO.BO', '0P0001BB8R.BO', '0P00005URN.BO', '0P00005WVO.BO', '0P0001BAX4.BO', '0P00005WVN.BO', '0P00005V32.BO', '0P0000XUY3.BO', '0P00016NVL.BO', '0P0001BAFF.BO', '0P00016QKW.BO', '0P0001BAFG.BO', '0P00005UN0.BO', '0P0001B9ZU.BO', '0P0000XW23.BO', '0P0000XW24.BO', '0P0000XUZ3.BO', '0P0001BADX.BO', '0P0000A2ME.TO', '0P000070TZ.TO', '0P0000PYHC.BO', '0P0001B9ZV.BO', '0P0000XPSW.TO', '0P00016LX3.TO', '0P0000F4Q4.TO', '0P00009J3J.BO', '0P0001DF6P.TO', '0P0000TXVU.TO', '0P0000F3D9.TO', '0P000093T8.BO', '0P0000JSP1.TO', '0P0001DF6S.TO', '0P0000A0F4.TO', '0P0000Q63G.TO', '0P0000XVI2.BO', 'CSCJX', '0P000159PW.TO', '0P0001HG8J.TO', '0P0000TXVT.TO', '0P0000XVZI.BO', '0P0000HP8H.TO', '0P0000761B.TO', '0P000077FS.TO', '0P0000FXEM.TO', '0P0000XUZ4.BO', '0P00005WD7.BO', '0P0001B9QN.BO', '0P0000XVZH.BO', '0P0000IL2I.TO', '0P00014CVC.TO', '0P0000706V.TO', '0P00014CVE.TO', '0P00014CVD.TO', '0P00005X1I.BO', '0P0001HFET.L', '0P0001BB6V.BO', '0P0000XVJL.BO', '0P0000XVJQ.BO', '0P000075A4.TO', '0P0001B9QO.BO', '0P00005X1J.BO', '0P0000XW62.BO', '0P0000IL3E.TO', '0P0000XW60.BO', '0P0001BA5B.BO', '0P00005WEZ.BO', '0P0001BB6W.BO', '0P0000JYFR.F', '0P0000XW57.BO', '0P00009V0T.TO', '0P00005VCY.BO', '0P0001BA4C.BO', '0P00005VCZ.BO', '0P000070LL.TO', '0P0001DCYO.F', '0P0001DCYP.F', 'TRIFX', 'TRICX', 'TRIIX', '0P00014CWC.TO', '0P00014CWD.TO', '0P00014CWE.TO', '0P00014BMG.TO', '0P00014BMD.TO', '0P00014BME.TO', '0P00009V0V.TO', '0P00006AIE.TW', 'WIIFX', '0P00016N6E.TO', 'VSTCX', 'EFEAX', '0P0001BHPA.TO', '0P0000NDR0.TO', '0P0001HGDT.TO', '0P0000Y40Z.L', '0P0001HB3U.TO', 'EFECX', '0P0000XV98.BO', '0P0000XVP3.BO', '0P0000XV97.BO', '0P0001BAX5.BO', '0P00005WI1.BO', '0P00005WVS.BO', '0P0001BAX6.BO', '0P00005WVR.BO', '0P0001AADS.TO', '0P0001H977.TO', '0P0001AADR.TO', '0P00000EGX.F', '0P0000NFXZ.TO', '0P0000ZEKP.TO', '0P0000PWBC.TO', '0P0001H9YD.TO', 'NWQFX', '0P0000XW7U.BO', '0P00005WMW.BO', 'NSMRX', '0P0001D54M.TO', '0P0001BBCZ.BO', '0P0000XVOS.BO', '0P0000XVOL.BO', '0P0001BBCX.BO', '0P0000XVOQ.BO', '0P00014BLS.TO', '0P00014BLQ.TO', '0P00014BLO.TO', 'NSMAX', 'NSMCX', 'NEAIX', '0P00005WH0.BO', '0P0001BBCY.BO', '0P0000N3OO.BO', '0P00005WGZ.BO', '0P0001BBD0.BO', 'WAEMX', '0P00014E3G.TO', '0P00014E3F.TO', '0P00014E3H.TO', '0P00016WKB.SI', '0P000017S1.F', '0P00019JSS.TO', '0P0000XW9Z.BO', '0P0001BAAR.BO', '0P0000XW9Y.BO', 'NEAGX', 'SNWIX', '0P00005WZG.BO', '0P00005WZF.BO', '0P0001BAAS.BO', '0P0000XW63.BO', '0P0001BA5D.BO', '0P0000XW64.BO', '0P00006OP2.SI', '0P00005VEB.BO', '0P0001DWY3.F', '0P00005VE8.BO', '0P0001BA5E.BO', '0P00017X7V.TO', '0P0000XW5T.BO', '0P0001DWY4.F', 'SNWAX', '0P00005VE1.BO', '0P000127NO.TO', '0P000093KY.BO', '0P0001BAQJ.BO', '0P0001H9WZ.TO', '0P000148Q1.TO', '0P00016NVQ.TO', '0P0000771J.TO', '0P0001BBGS.BO', '0P00005UYI.BO', '0P0000M5PQ.TO', '0P0000KS25.TO', '0P000070VZ.TO', '0P0001D8SJ.TO', 'FSVLX', 'BACVX', '0P00014CW6.TO', '0P00014CW8.TO', '0P00014CW7.TO', '0P00014BLW.TO', '0P00014BLZ.TO', '0P00006AJ9.TW', '0P00014BM0.TO', '0P00011069.TO', '0P0000J2C3.TO', '0P00014E32.TO', '0P00014E34.TO', '0P00014E35.TO', '0P0001EG3Q.TO', '0P0000J2JP.TO', '0P0001EGWF.TO', '0P0001EGWH.TO', '0P0001EGKX.TO', '0P00017TVY.TO', '0P0001EGKY.TO', '0P0000XW3D.BO', 'ARGFX', 'FSRBX', '0P0000XW3C.BO', '0P0001B9WN.BO', '0P0000XWA7.BO', '0P0001BA4F.BO', '0P0000XW5U.BO', '0P0000XW5V.BO', 'FNPSX', '0P0000KOCB.TO', '0P0000KOCU.TO', '0P0001B9WM.BO', '0P00005VAF.BO', '0P0000XPSU.TO', '0P00000VHC.L', '0P0000AD4I.TO', '0P0001BA4G.BO', '0P00005VE2.BO', 'HSMSX', 'HSMTX', '0P00005VE3.BO', '0P00005WZS.BO', 'HSMYX', '0P0000TXVM.TO', '0P0001DEU4.TO', '0P0000TXVL.TO', 'HWVAX', '0P0000KOBJ.TO', '0P0000KOBL.TO', '0P0000NH47.TO', '0P00017WWW.TO', 'ARAIX', '0P0000JSPH.TO', 'HSEIX', 'HSMAX', '0P0000706Q.TO', 'FMCVX', '0P0000IL2E.TO', 'FVRMX', '0P00011WTY.TO', 'FRMCX', '0P0001CUT2.L', 'WASIX', 'LCSSX', 'EFEIX', '0P0001HFBI.TO', '0P0001HN7S.TO', 'HTSCX', '0P0000XVJO.BO', '0P0001BB7J.BO', '0P0000XVJJ.BO', '0P0000XPSY.TO', '0P0001DH14.L', '0P00005WEY.BO', '0P0001BB7K.BO', '0P00005WEX.BO', 'WTIFX', '0P00016LWS.TO', '0P0000TXWE.TO', '0P0000PWBA.TO', 'BKPSX', '0P0000A0FP.TO', '0P00006AJ2.TW', 'BKPIX', '0P0000TXWD.TO', '0P0000704A.TO', '0P00013WZD.TO', '0P0000FXFD.TO', '0P00010YWO.TO', '0P0000XW56.BO', '0P0001BA4B.BO', '0P0000ADI9.TO', '0P00019EV7.TO', '0P00009UZX.TO', '0P00019EV5.TO', '0P00019EV2.TO', '0P0000ULDG.TO', '0P0001KMFM.TO', '0P00019EUS.TO', '0P0000X4QU.TO', '0P00019EV4.TO', '0P00019EUU.TO', '0P0001H042.TO', '0P00019EUT.TO', '0P00019QFT.TO', '0P00019EV3.TO', '0P0000FWYS.TO', '0P0000FWZ5.TO', '0P00019EUQ.TO', '0P000077K4.TO', '0P0000759L.TO', '0P0000W7TG.TO', '0P00009UZW.TO', '0P00007WNO.TO', '0P000075A3.TO', '0P0000FX1L.TO', 'SBFAX', '0P000071F8.TO', '0P000077K5.TO', '0P0000717Y.TO', '0P0000FWZ0.TO', '0P00007WNP.TO', '0P0000OQEN.TO', '0P0000WV2V.TO', 'LCBIX', '0P0000J1RG.TO', '0P0001EHZZ.TO', '0P0000J1PK.TO', 'UAPSX', '0P00014Z4I.F', '0P0000K54X.F', '0P0000ZEK1.TO', '0P00016G3L.TO', '0P0000M092.L', '0P0000VC1N.F', 'WCPIX', '0P0000M093.L', '0P0000A0F6.TO', '0P0001F57G.L', '0P0000YO7G.TO', 'WCPSX', '0P0001IPFZ.TO', '0P000072KJ.TO', '0P0000X21C.TO', '0P00009NDB.TO', '0P0001IPG0.TO', '0P0000M3Z6.TO', '0P0001CCZO.F', 'CSMCX', '0P00014M9T.TO', '0P0000XPF0.L', '0P000076LX.TO', '0P000077KV.TO', '0P0000Q3EN.TO', '0P0000HRN5.TO', '0P0000HRN6.TO', '0P00000XGT.F', '0P0000709T.TO', '0P00014E3J.TO', '0P00014E3K.TO', '0P0001DH13.L', '0P00014E3I.TO', '0P000070CY.TO', 'RYSVX', 'RYAZX', '0P00014CUS.TO', '0P00014CUT.TO', '0P00014CUR.TO', 'FNPIX', 'CSMVX', '0P0001EG1L.TO', '0P0001EG1K.TO', '0P00000I5U.L', '0P0001EG1M.TO', '0P0001EG1H.TO', '0P00000VGY.L', '0P0001EG1I.TO', '0P0001106B.TO', '0P0001BBGR.BO', '0P0000XVST.BO', '0P0000XVSO.BO', '0P0001EG1J.TO', '0P0000W7PU.TO', '0P0000W7PV.TO', '0P00016LWQ.TO', '0P0000W7PT.TO', 'RYYCX', '0P0000CUBP.TO', '0P0000M5PX.TO', '0P00005UYJ.BO', '0P0000M5PT.TO', '0P0001AANS.TO', '0P0000Y2TG.TO', '0P0001AANO.TO', '0P0001FF9T.TO', '0P0001FKGK.TO', '0P0001AANN.TO', '0P0001FKGJ.TO', '0P0001AANP.TO', '0P0001FKGL.TO', 'GTTRX', '0P00012BA0.F', '0P0000NDH9.TO', '0P00017TVV.TO', '0P0001JXAG.L', '0P0000X63O.L', '0P0001AANR.TO', '0P000017ON.L', '0P00017TVW.TO', '0P0000NDAC.TO', '0P0000NDAB.TO', '0P00014CVG.TO', '0P00014CVF.TO', '0P00014CVH.TO', '0P0000Y2QY.TO', '0P0000VUBN.TO', '0P0001FJGN.TO', '0P0001AACZ.TO', '0P0001AACX.TO', '0P0001AACY.TO', '0P0000NDFV.TO', '0P0000ULFL.TO', '0P0000NDAE.TO', '0P0001FJGM.TO', '0P0000ULFM.TO', '0P0001FJGO.TO', '0P000070CR.TO', '0P0000F4MU.TO', '0P00019EV9.TO', '0P00007370.TO', '0P0000ULFJ.TO', '0P00014BMC.TO', '0P00014BMB.TO', '0P0001HRH2.TO', '0P000072OT.TO', '0P0000ULFK.TO', '0P00014BM9.TO', 'ATRCX', '0P00007136.TO', '0P0000NDGV.TO', '0P0000F4MW.TO', '0P000072K0.TO', '0P000072CC.TO', '0P000071EQ.TO', '0P000072I4.TO', '0P0000KRYD.TO', '0P000072JR.TO', '0P000070U2.TO', '0P000070TT.TO', '0P0000Q3BT.TO', '0P00014CVJ.TO', '0P00014CVK.TO', '0P0000Y2TH.TO', '0P0000NDNL.TO', '0P00014CVI.TO', '0P0001EG3F.TO', '0P0000UD76.TO', '0P0000KRTY.TO', '0P0001EG3E.TO', '0P000072QM.TO', '0P000070XW.TO', '0P0000763C.TO', '0P000071FX.TO', '0P000072PR.TO', '0P0001BHP9.TO', 'UAPIX', '0P000072QT.TO', '0P0000KRTQ.TO', '0P000070TI.TO', '0P000070TK.TO', '0P0001EG3B.TO', '0P00015IO7.TO', '0P0001EG3G.TO', '0P0001EG3C.TO', '0P0000763E.TO', '0P0000X4QW.TO', '0P000023MW.L', '0P00015IHP.TO', '0P00019EV6.TO', '0P00011MX7.TO', '0P0000W7TH.TO', '0P0000ULDD.TO', '0P00019EUV.TO', '0P0001KMFL.TO', '0P0000ULDF.TO', 'LMRIX', '0P0001EG3D.TO', '0P0000AD3J.TO', '0P0000ADI8.TO', '0P00019EUR.TO', '0P00006AF9.TW', '0P0001EG3I.TO', '0P0001EG3M.TO', '0P0000NG7G.TO', '0P0000XOC9.L', '0P0001EG3J.TO', '0P0001LOAI.F', '0P0000NFXN.TO', '0P0000S1YD.TO', '0P0000JMAC.F', '0P0000W7S0.TO', '0P0000XOCA.L', '0P0000Y2HV.TO', '0P0000W7S1.TO', '0P0000NFXS.TO', '0P0000CUAX.TO', '0P0000M5RX.TO', '0P000087H4.TO', '0P0000XOCF.L', '0P0000XOC8.L', '0P000070VN.TO', '0P000070JK.TO', '0P0000771W.TO', '0P0000M5RT.TO', '0P0000XWAT.BO', '0P00000H08.F', '0P00000EHD.F', '0P0000GB48.BO', '0P0001DHLN.L', '0P0000A0EB.L', 'FSCOX', 'FOPIX', 'WSMVX', '0P0001BAD4.BO', '0P0000GB32.BO', 'DTSVX', '0P000074SZ.TO', '0P00016V7J.TO', '0P00016V7K.TO', '0P00016V7L.TO', 'RIVSX', 'SMCYX', '0P0001DZCY.TO', '0P00014AK0.TO', '0P0001DZD0.TO', '0P0001EGL3.TO', '0P0001HGAR.TO', '0P0001HGAQ.TO', '0P0000XZF9.TO', '0P0001FFX5.TO', '0P0001EGL4.TO', '0P0000XZF4.TO', '0P0001EGL0.TO', '0P0001EGL5.TO', '0P0001DZCZ.TO', '0P0001EGL1.TO', '0P0001DZD1.TO', '0P0000TNUD.TO', '0P00014AJY.TO', '0P0001EGL2.TO', '0P00014AJZ.TO', 'DHSIX', 'SBVAX', '0P0001725G.TO', '0P00000VDI.L', '0P0000TNUG.TO', '0P00017AOG.TO', '0P0001725H.TO', '0P0001725I.TO', '0P00016V5Z.TO', '0P00016V60.TO', '0P00000EJY.F', '0P0001AM1C.TO', '0P0001B9OH.BO', '0P00005V53.BO', '0P00000C7C.L', 'VFPIX', '0P0000WUU6.L', '0P0000TH94.F', 'GSITX', 'GTTUX', '0P0000XV92.BO', '0P0001BAWV.BO', '0P0000XV91.BO', '0P00005V54.BO', '0P0000XVWN.BO', '0P00000VDH.L', '0P0000XVWM.BO', '0P0001BF1Y.BO', '0P00012BA1.F', '0P00005WVM.BO', '0P0000AEOB.BO', '0P0001BAWW.BO', 'DHSYX', 'GSATX', '0P0000NDFX.TO', '0P0000NDG0.TO', '0P0000NDFW.TO', 'GTTTX', '0P0000NDG1.TO', '0P0000A4WH.L', '0P0000747K.TO', '0P00002AEU.F', '0P0001AO7Y.L', '0P000070YF.TO', '0P00000RBR.L', '0P0000Y69N.L', '0P0000XVT1.BO', '0P0001BBHN.BO', '0P0000XVSU.BO', '0P0000WN46.L', '0P0000WN41.L', '0P0000WN43.L', '0P00000RHJ.L', '0P0000WN44.L', '0P00012BS4.TO', '0P00009J3R.BO', '0P0001BBHO.BO', '0P00009J3H.BO', '0P00000JGR.L', '0P00000JGP.L', '0P00000RGG.L', '0P00002AEQ.F', '0P00000RAJ.L', '0P0000ON34.TO', '0P000074TU.TO', '0P000070QR.TO', '0P000072L0.TO', '0P00016XVP.TO', '0P000159QH.TO', '0P0000V9FI.TO', '0P0000RRNM.TO', '0P000159OE.TO', '0P0000V9FG.TO', '0P000197SR.F', '0P00015XCK.F', '0P0001IO65.TO', '0P0001IO63.TO', '0P0001IO60.TO', 'FDMTX', 'UEPSX', '0P0000XBNQ.TO', 'CNUSX', 'FDMAX', '0P00015KGU.F', '0P0001A1FA.L', '0P0001FVLM.L', '0P0001A3NJ.F', '0P000127MO.TO', '0P00000NO8.L', 'WIGOX', '0P000027ZU.L', '0P00006HYO.SI', '0P0001FVLN.L', 'FDMCX', '0P000093T3.F', '0P0000XAFS.L', '0P0001596O.F', '0P0001A1F8.L', '0P00015KGS.F', '0P000127MP.TO', '0P0001IO5Y.TO', '0P0001HN8D.TO', 'FDMIX', '0P0000KNNU.L', '0P0001HG1Q.TO', '0P0000XVYR.BO', '0P0001A1F9.L', '0P0001BJFV.BO', '0P0001760A.TO', '0P0000ZEIM.TO', '0P0001760C.TO', '0P0000ZEGV.TO', '0P000181J0.TO', '0P0001C15C.TO', '0P000093ZU.TO', '0P0001IQAX.TO', '0P000093ZV.TO', '0P0000UD9L.L', '0P0000W9SN.L', 'LGPIX', '0P0000705T.TO', '0P0000LYFP.TO', '0P0001HRH3.TO', '0P0000Y2HW.TO', '0P0000NFXR.TO', '0P0001AADQ.TO', '0P00014CVY.TO', '0P0001H976.TO', '0P00014CVX.TO', '0P00014CVZ.TO', '0P0000K7W3.L', '0P00008FJP.L', '0P00008FJQ.L', '0P00019AHY.F', '0P0001EG3K.TO', '0P00002A3V.F', '0P0000XWAS.BO', '0P0001BAD3.BO', '0P0001EG3L.TO', '0P0001EG3H.TO', 'GSXCX', '0P0001759K.TO', '0P0000Z6VV.TO', '0P0000NG66.TO', '0P000070H1.TO', '0P0001759F.TO', '0P0001B56C.TO', '0P000070G1.TO', '0P000153RQ.TO', '0P00017QZ9.TO', '0P00017QZ7.TO', '0P00017QZ6.TO', 'SKSEX', '0P00010MAR.TO', '0P00017QZ8.TO', '0P000073GJ.TO', '0P0001H0KQ.TO', '0P0000KWG2.TO', '0P0000Q69Q.TO', '0P0000709R.TO', '0P00019JZ8.F', 'TSVRX', '0P0001BLHI.L', 'TRACX', 'GNSRX', 'ZSCCX', 'ZSCIX', '0P0000GBB2.L', '0P0000UL8Y.L', '0P0000NCUK.TO', '0P0001H6YX.F', '0P00018TX9.F', 'SWSCX', 'RYMCX', '0P000024HT.L', '0P00000YHN.F', '0P0001DHB9.F', '0P0001D9IZ.F', '0P00001CL8.L', '0P00006AJM.TW', '0P0001BLHJ.L', '0P00019EJ1.TO', '0P00019EID.TO', '0P00019EI9.TO', '0P00019EIC.TO', '0P00019EIB.TO', '0P00019EIW.TO', '0P00019EIX.TO', '0P00012B36.TO', '0P00012B3T.TO', '0P00019EIA.TO', '0P00019EIY.TO', '0P00012B3B.TO', '0P00012B3A.TO', '0P000074PP.TO', '0P00012B3S.TO', '0P00012B35.TO', '0P00012B3C.TO', '0P00012B3V.TO', '0P00012B3U.TO', '0P00012B3D.TO', '0P000072MA.TO', '0P0001788Z.TO', 'UEPIX', 'LMBCX', '0P00000R5X.L', '0P00000R5W.L', 'RMCFX', '0P0001D9IY.F', 'RYOTX', '0P00000CHO.F', 'LMBAX', 'LMBMX', 'LMSIX', '0P00000YIQ.L', '0P0001BLHN.L', 'DASVX', '0P000070TG.TO', '0P0001D8R5.TO', 'DNSVX', '0P0001BLHM.L', '0P0001D8R4.TO', '0P0001D8R3.TO', '0P0000SVVQ.L', '0P0000YGD4.L', '0P0001F2GR.L', '0P00017FXE.L', '0P0000G76X.L', '0P0000UL8Z.L', '0P00015HGW.L', '0P0001HG3I.L', '0P0001H7QG.L', '0P00017NM4.F', '0P000156DQ.F', '0P00000JNF.F', '0P0001I6P1.TO', '0P000073UL.TO', '0P00002A2U.L', '0P0001EN1B.F', '0P00019YB6.L', 'CSCZX', 'NEEIX', '0P00000EK2.F', '0P0001520M.TO', '0P0001ABAI.F', '0P0000UF6H.TO', 'OBSOX', '0P00008FRQ.L', '0P00011MD7.F', 'WAGOX', 'MMEYX', 'GPGOX', 'CVVRX', 'CUURX', '0P0000UF6F.TO', '0P00000U1F.F', 'GPGIX', '0P0001D54H.TO', 'MMEAX', '0P00006OA0.L', '0P00011SCG.L', '0P0001ABAH.F', '0P0000WUPS.L', '0P00017YCU.TO', '0P0000WUPT.L', '0P00008FRR.L', '0P00017YCM.TO', '0P0000RUY3.F', '0P0001ABAG.F', '0P0000NDIA.TO', '0P00008FRP.L', '0P0000KODX.TO', '0P0000U8MO.F', 'UOPIX', 'MMERX', '0P0001LJGR.F', 'UOPSX', '0P0001B85G.F', '0P0001B85F.F', '0P0001HA9O.TO', '0P0000KOE1.TO', '0P0000145I.F', '0P0000S8PH.TO', '0P00007050.TO', 'CSCAX', '0P0001HGRA.L', '0P0000GA9N.F', 'TSVAX', 'TASVX', 'SMPIX', '0P0000P0K1.TO', 'TSVQX', '0P00019ZBU.F', '0P0001D5WS.F', '0P00006OI0.SI', '0P000070TF.TO', '0P0001CB5F.F', 'SMPSX', 'COAGX', '0P00019FJZ.TO', 'MMECX', '0P0000T24O.F', '0P00007ZCM.F', '0P0000XT8B.L', '0P0000N3CO.F', '0P0000JR4I.F', 'NSCQX', '0P0001JIZL.L', '0P00000U3C.F', '0P00000U0C.F', '0P00014IJX.L', '0P00014IJY.L', '0P00018NL9.L', 'TEPIX', 'TEPSX', 'CGLOX', '0P00019J0U.F', 'GSXIX', 'GSCIX', '0P00018S5F.F', '0P00018QYX.L', '0P00018QYY.L', '0P0000T3IF.F', '0P0000KODZ.TO', '0P0000KODW.TO', '0P0001D7OU.F', '0P0000NG65.TO', '0P0001B563.TO', '0P0001B562.TO', '0P0000Z6VX.TO', '0P0001IT82.TO', '0P0001759J.TO', '0P0000T3IE.F', '0P0001759O.TO', '0P00008XMG.TO', '0P0000NCZP.TO', '0P000070OG.TO', '0P0001E00E.TW', '0P0000N9A2.TW', '0P00019PZ4.TO', '0P0001HB7F.TO', '0P0001EH63.TO', '0P0000U9JC.L', '0P0001AADK.TO', '0P0000TOJA.L', '0P0001EH65.TO', '0P00011MXB.TO', '0P0001EH64.TO', '0P0001FJJY.TO', '0P00019SMV.F', '0P0001EH67.TO', '0P0001DEX6.TO', '0P0001EH66.TO', '0P0001FKB0.TO', '0P0000W88Y.TO', '0P0001AC54.TO', '0P0001EH68.TO', '0P0001FKB1.TO', '0P0001AC6S.TO', '0P0001FKAZ.TO', '0P0001AC6T.TO', '0P0001AC55.TO', '0P0000W88W.TO', '0P00014E4K.TO', '0P00014E4N.TO', '0P00014E4M.TO', '0P0001AC6U.TO', '0P0000M537.TO', '0P0000W88T.TO', '0P0000M535.TO', '0P000072F5.TO', '0P00011MXA.TO', '0P0000SLK6.TO', '0P0001EGO9.TO', '0P00019SMU.F', '0P0001EGOA.TO', '0P0001EGO6.TO', '0P0001AC6P.TO', '0P0001EGOB.TO', '0P0001AC51.TO', '0P0001AC50.TO', '0P0001EGO7.TO', '0P0001AC6L.TO', '0P0001AC6K.TO', '0P0000W833.TO', '0P0001IEWC.F', '0P0001EGO8.TO', '0P0000W82U.TO', '0P0000M52F.TO', '0P0001HG0K.L', '0P000073RH.TO', '0P000073RG.TO', '0P0001DEU0.TO', '0P0000W82Z.TO', '0P0001DEXC.TO', '0P0001AKO2.F', '0P00006A9R.TW', '0P0000TH9A.F', '0P0001644U.F', '0P00000TS3.F', '0P0001644W.F', '0P0001AKO1.F', '0P0001644V.F', '0P000188K7.F', '0P0000K8P2.F', '0P000188K8.F', '0P000147HZ.F', '0P00000PBN.F', '0P000021Y1.F', '0P0000ZEJT.TO', '0P0000SNHF.TO', '0P0000V18O.TO', '0P0000V18N.TO', '0P0001872J.F', 'GPROX', 'GPRIX', '0P00017A7K.F', 'AFMCX', '0P0001D8R0.TO', '0P0001C2EB.L', '0P0001D4QQ.L', '0P0001CFMI.L', '0P0001BTL8.L', '0P00000DCQ.L', '0P0001K736.F', '0P00018FGQ.TO', '0P00011SCH.L', '0P0001314E.BO', '0P0001314F.BO', '0P0001BAAB.BO', '0P0001314C.BO', '0P0001BAAC.BO', '0P0001314D.BO', '0P00014IK4.F', '0P00006O9Z.L', '0P0000UTTV.TO', '0P00000EK4.F', '0P00008FRS.L', 'NEEGX', 'CSVRX', '0P000148Q2.TO', '0P0001CSIM.F', '0P0000TOJ8.L', '0P0001B6NV.F', '0P0000USWZ.F', '0P00005UZU.BO', '0P0001BBG2.BO', '0P00005UZT.BO', '0P00000CL9.F', '0P0001EEWS.F', '0P0001DKAH.TO', '0P0001J0SS.F', '0P0001J2XI.F', '0P0000VGEA.TO', '0P00000DCG.L', '0P0001BGBA.L', '0P0001BGBB.L', 'FMVSX', '0P0001AAOY.TO', '0P0001ECXL.TO', '0P0000TYC5.TO', '0P000072EW.TO', 'JAMFX', '0P0000719D.TO', '0P0000IMAS.TO', '0P000083YL.TO', '0P0001105Y.TO', 'HSFNX', '0P00019L1F.F', '0P0001FFX4.TO', '0P0000NNCE.F', '0P00011060.TO', '0P0001H0SA.TO', '0P000180W7.TO', '0P0000WJMM.TO', '0P0001H0DU.TO', '0P0000WJLQ.TO', '0P0000WJHP.TO', '0P0000714T.TO', '0P0000WJHI.TO', '0P00001A8M.F', '0P0000WJLH.TO', '0P0000WJIW.TO', '0P000072ZW.TO', '0P00000U1V.F', 'BIPIX', '0P0000731E.TO', '0P000072MV.TO', '0P000073W1.TO', '0P000073AD.TO', '0P000071LV.TO', '0P000187PC.F', 'RYRSX', 'RYRUX', '0P0000WJG2.TO', '0P0000WJK8.TO', '0P0000759G.TO', '0P00007321.TO', '0P000071ZM.TO', '0P000187PF.F', '0P0001K282.TO', '0P0001H9V6.TO', 'BIPSX', '0P00018YOG.TO', '0P0000Y2QP.TO', 'RYRLX', '0P0001BHPF.TO', '0P0000KODF.TO', '0P00019JZC.F', '0P0001DEU2.TO', '0P000075BZ.TO', '0P0000TM92.TO', '0P0000VBM4.TO', '0P00019JZB.F', '0P0001AM3L.F', '0P0000S8PR.TO', '0P000073E2.TO', '0P0001AM3N.F', 'TMVAX', 'RMVIX', '0P00000OTZ.F', 'REPIX', 'REPSX', '0P0001AM3M.F', '0P0001DEX9.TO', '0P00001PQ7.L', '0P00018AVY.TO', '0P000025Y8.L', '0P00018AVW.TO', '0P0001DEU8.TO', '0P0001DEXD.TO', 'OBEGX', '0P0001DFEF.F', '0P00015IPB.TO', '0P0001DEU1.TO', 'DASCX', '0P0000719H.TO', '0P00014BOA.TO', '0P00014BOB.TO', '0P00014BOD.TO', '0P0001JUA2.L', '0P00017O0P.F', '0P00000C9H.L', '0P00017O0N.F', '0P0000S8PQ.TO', '0P000070DN.TO', '0P0001B5VJ.L', '0P0001B5VI.L', '0P0001B6NY.F', '0P0001H9XJ.TO', '0P0001BQ7O.F', '0P000076HP.TO', '0P00014BNJ.TO', '0P00014BNL.TO', '0P00014BNK.TO', '0P00000S4Z.F', '0P00000BVC.F', '0P0001B5VK.L', '0P00014E4L.TO', '0P00014E4I.TO', '0P00014E4J.TO', '0P0001B5VH.L', '0P0001JZHV.L', '0P0001AAXO.F', '0P0001EH5L.TO', '0P0001EH5N.TO', '0P0001EGNF.TO', '0P0001EH5M.TO', '0P0001EH5O.TO', '0P000023RA.L', '0P00000R9T.L', '0P0001EH5P.TO', '0P0001AL3A.F', '0P0001EGNC.TO', '0P0001EGNG.TO', '0P0001EH5Q.TO', '0P0001EGND.TO', '0P0001EGNH.TO', '0P0000W88L.TO', '0P0000U2DZ.F', '0P00000LPC.L', '0P0000W88K.TO', '0P0000UHPK.L', '0P0001EGNE.TO', '0P0000M54R.TO', '0P0000W82Q.TO', '0P0000M54Q.TO', '0P0000W88I.TO', '0P000070EK.TO', '0P0000W82W.TO', '0P0000716A.TO', '0P000070SC.TO', '0P0000M526.TO', '0P00000E7U.F', '0P0000V22V.F', '0P0000M52K.TO', '0P0000W82L.TO', '0P0000M52J.TO', '0P0001CQ07.F', '0P00000DKR.L', '0P00000DKZ.L', '0P0000WUU1.L', 'FRBCX', '0P0000RRC1.F', '0P0000UEI0.L', '0P000085BJ.F', '0P00017O0C.F', '0P00017O0D.F', '0P00000S5H.F', '0P00017O0G.F', '0P00000O4B.F', '0P0000UEI1.L', '0P00000G1K.F', '0P0001BHPM.TO', '0P000013RX.F', '0P00007119.TO', '0P0000WJKC.TO', '0P0000WJG1.TO', '0P000073AG.TO', '0P000073NN.TO', '0P0000J1RV.TO', '0P0000J1PD.TO', '0P000136BL.TO', 'HISFX', '0P00000TQB.F', '0P0001CU29.F', '0P00015Q7U.TO', 'FRBAX', '0P0001KKT4.F', '0P0001BPW9.L', '0P00016L65.F', '0P00000TZY.F', 'NWQRX', '0P0001BPW8.L', '0P0001EOIJ.F', '0P0001D8SO.TO', '0P0001BPW7.L', '0P0001BBG1.BO', '0P0000XVSC.BO', '0P0000XVSD.BO', '0P0000Y89V.L', '0P0001AOXI.F', '0P00000U3H.F', '0P00011WTF.TO', '0P0000Z29T.TO', '0P0000MUQU.TO', '0P00011WSZ.TO', '0P0000X6Q5.TO', '0P0000U5JO.TO', '0P0000A0I3.TO', '0P0000X6Q7.TO', '0P00010MFC.TO', '0P0000U5JQ.TO', '0P0000Y5OU.F', '0P0000MUQV.TO', '0P0000WV0K.TO', '0P0000Z29S.TO', '0P000070AI.TO', '0P00007XWK.TO', '0P000071AL.TO', '0P0000WV0I.TO', '0P00010MFB.TO', '0P0000J1ZI.TO', '0P0001JTTV.F', '0P00001BXV.F', '0P000177HZ.F', '0P0000WV0H.TO', '0P0000J25W.TO', '0P00000INK.F', '0P00013DWV.TO', '0P00011WTQ.TO', '0P0000A0FK.TO', '0P0000WV0F.TO', '0P00010MFA.TO', '0P0000JT8L.F', '0P00017ENC.F', '0P00017A7N.F', '0P00017A7M.F', '0P0000W6HN.F', '0P0001A4HH.F', '0P0000Y89S.L', '0P00000TSG.F', '0P0001BQI2.F', '0P00006AAO.TW', '0P0001BTBI.F', '0P0001A4HG.F', '0P0001CZXN.L', '0P00000R3D.L', '0P0000XON3.L', '0P0001HH3D.L', '0P000195HS.L', '0P0001CZXM.L', '0P0001CDXH.F', '0P000152AK.F', '0P000023AO.L', '0P0001CZXL.L', 'GPIOX', '0P000152AJ.F', '0P0001F3HY.L', 'GPIIX', '0P00009ANC.F', 'SZCIX', '0P00007U4Q.F', 'SSLCX', '0P0000X3T7.L', '0P0000HGIP.L', '0P0000CVMU.F', '0P0000HGIQ.L', '0P0000VDOQ.F', '0P0000VDOS.F', '0P00000Q1S.F', '0P0000Y89U.L', 'WAESX', 'DXRLX', 'SZCAX', '0P00000Q1N.F', '0P00000U4R.F', '0P0001HHLC.TO', 'SZCCX', '0P0001HHLB.TO', 'WIESX', '0P000075YZ.TO', '0P0001664J.F', '0P0001664K.F', '0P0001664L.F', '0P0001664M.F', '0P0001664O.F', '0P0001664N.F', '0P0000KOD9.TO', '0P0000ZMX2.TO', 'WSCVX', '0P0000KOD6.TO', 'PREOX', '0P0001F6KF.F', '0P0000X1GJ.L', '0P00001OE4.F', '0P0001F6KE.F', 'JRBFX', '0P00008MPS.F', '0P0000U1TF.F', '0P0001B55T.TO', '0P0000SDNK.L', '0P0001ACFG.F', '0P0001IN63.F', '0P0001E03G.F', '0P00017UV8.L', '0P0001E03F.F', '0P0001E03H.F', 'BRUSX', '0P00016LZR.L', '0P00018LG3.L', '0P0000W36H.L', '0P0001JG4C.L', '0P00000DEE.L', '0P0001BTBH.F', '0P00015X27.F', '0P0000Z8NY.L', '0P00015X26.F', '0P0001DEYK.F', '0P00000PIO.F', '0P00000NNC.F', '0P00017JIT.L', '0P0000769U.TO', '0P0000SNI6.TO', '0P0000SRWI.F', '0P0001FFX3.TO', '0P0001H3LI.F', '0P00010M5E.TO', '0P0001AAE6.TO', '0P0000VW1H.TO', '0P00017EWY.F', '0P0001AAR3.TO', '0P0001AAE5.TO', '0P0001H0KD.TO', '0P0001FIV8.TO', '0P000073FY.TO', '0P0000IYM9.F', '0P00011MS6.F', '0P0001E0R2.L', '0P0001CT05.F', '0P00000G3W.F', '0P00001NDV.F', '0P0001AADP.TO', '0P0001M37R.F', '0P0001H93L.TO', '0P00000V7S.F', '0P0000UNZE.F', '0P0001I6VB.F', '0P0001BEJ4.TO', '0P00019F2K.TO', '0P00019F2J.TO', '0P000074QG.TO', '0P0001572W.F', '0P00000EG5.F', '0P00000GK4.L', '0P0001JTH9.F', '0P0001AADO.TO', '0P0000XXNB.TO', '0P0000NFXO.TO', '0P00001R8T.L', '0P0000WJLZ.TO', '0P0000WJHZ.TO', '0P0000NG7E.TO', '0P0000729M.TO', '0P000073J6.TO', '0P000073QV.TO', '0P0000WJI0.TO', '0P0000WJLR.TO', '0P000147IB.F', '0P000087H3.TO', '0P000073UD.TO', '0P000073AB.TO', '0P00015D1A.F', '0P0001BPSH.F', '0P0000NFXG.TO', '0P00017MCQ.F', '0P0000Y2HT.TO', '0P0000NFXJ.TO', '0P0000XPVJ.F', '0P0000VDF5.L', '0P00001ZH4.L', '0P00000VFJ.L', '0P00000RA7.L', '0P00014AKK.TO', '0P0000XZH8.TO', '0P0000XZHD.TO', '0P00013FVC.TO', '0P00000U9N.F', '0P00014AKI.TO', '0P0001A9JX.F', '0P00014AKJ.TO', '0P0000Y89T.L', '0P00017JPM.F', '0P00016C1H.F', '0P00016C1I.F', '0P0001A9KC.F', '0P0001FG0X.TO', '0P0001ACCJ.F', '0P0001BWA0.F', '0P00013DWW.TO', '0P00000QW0.L', 'OBMCX', '0P00000V7Q.F', '0P00012KMK.TO', '0P0001AF4J.F', '0P0001CERJ.F', '0P00000JTW.F', '0P0001AF4G.F', '0P0001AF4H.F', '0P0000SY0V.F', '0P000070XV.TO', '0P000071FW.TO', '0P00000RHX.L', '0P0000WN4X.L', '0P00009XVV.TW', '0P0000WN4V.L', '0P0000WN4U.L', '0P0000WN4W.L', '0P0001KMPO.L', '0P00000JGG.L', '0P00000RG7.L', '0P00000JGI.L', '0P0000Z8NX.L', '0P00000UMA.L', '0P00000COI.L', '0P0001B99H.F', '0P0000NDA8.TO', '0P0000NDA7.TO', '0P0001FL86.TO', '0P0001FIHM.TO', '0P0000XA9K.TO', '0P0001AAED.TO', '0P0000Y2Q3.TO', '0P0001FL87.TO', '0P0000XA9L.TO', '0P0001GOPQ.F', '0P0001B99G.F', '0P0001H4VW.F', '0P0000ULDM.TO', '0P0000NDJW.TO', '0P000072OS.TO', '0P00000UM9.L', '0P00000R3G.L', '0P00000J4K.F', '0P0000140S.F', '0P00017BDZ.L', '0P00019F8C.TO', '0P0001GZLZ.TO', '0P00019F81.TO', '0P0001KMGK.TO', '0P00019F8A.TO', '0P0001BEK5.TO', '0P00019F83.TO', '0P0001KMGM.TO', '0P0001KMGL.TO', '0P00019F84.TO', '0P00019F8B.TO', '0P00019F88.TO', '0P0001BEK2.TO', '0P00019F82.TO', '0P00019RET.TO', '0P0000F5BV.TO', '0P0000F5CD.TO', '0P00019F89.TO', '0P0000F5C2.TO', '0P0000F4NY.TO', '0P0000F5C5.TO', '0P00019595.L', '0P00000U3A.F', '0P00001E5J.L', '0P0000146V.F', '0P000017AH.F', '0P00000JQB.F', '0P00001E5K.L', '0P00000R43.L', '0P000183HZ.F', '0P0001HVBM.F', '0P00009118.SI', '0P00008Y0U.F', '0P00016ZND.F', '0P00006AA5.TW', '0P00000QB7.F', '0P0001E0R3.L', '0P0000WUOV.L', '0P0000Q7T8.TW', '0P0000XTHG.L', '0P00009NFL.L', '0P00000COG.L', '0P0000WBQU.L', '0P00001PI5.L', '0P00000CL5.L', '0P00000QXK.L', '0P0000WUU2.L', '0P00000OWV.F', '0P0000M21A.TO', '0P0001ACFH.F', '0P0001ACFF.F', '0P0001IN64.F', '0P00015AK4.TO', '0P0001B55I.TO', '0P000023IO.L', '0P0001FF2Q.F', '0P0001KN5B.F', '0P00000G9V.F', '0P00000HCE.F', '0P0000Y5OY.F', '0P00016295.F', '0P00017QUL.F', '0P00015WPU.F', '0P00000HDB.F', '0P00006AI8.TW', '0P00006OI1.SI', 'JMIGX', '0P0001A58P.F', '0P00000VJY.F', '0P00000GAD.F', '0P00000RM4.F', '0P0001A4EV.F', '0P00018OPI.F', '0P00000TTF.F', '0P0000RZ8G.F', '0P0001A9KF.F', '0P0001E0PL.F', '0P0001JTTY.F', '0P0000WUPQ.L', '0P0001F4HR.F', '0P00000DHS.L', '0P00018BC9.F', '0P00000JVE.F', '0P00018CEI.F', '0P00018CEH.F', '0P00016WZF.F', 'INPSX', '0P0001HG3H.L', '0P0000HM6R.F', 'INPIX', 'PRCGX', '0P00015FEB.F', '0P00015B6D.F', '0P00000JY8.L', '0P00011IE0.F', '0P00011IDZ.F', '0P0000720M.TO', '0P00011IE1.F', '0P0001ALWC.F', '0P00001S8R.F', '0P00000JJX.L', '0P00012FMZ.L', '0P0000HK84.TO', '0P00001PDP.L', '0P0000XNC1.L', '0P00000TVC.F', '0P00011XDT.TO', '0P00000RH6.L', '0P000013RR.F', '0P00002AVH.F', '0P00011QYD.F', '0P00011QYC.F', '0P0001CW76.F', '0P0001BNAP.F', '0P0001CNS0.F', '0P0001BN06.L', '0P0001BN07.L', '0P00000JYA.L', '0P0001BNAO.F', '0P0001CJZN.F', '0P0001A4EU.F', '0P00000COK.L', '0P00015F8X.L', '0P0001BCWJ.F', '0P0001HIP6.L', '0P00007YA3.L', '0P0000Q694.TO', '0P0000M5UY.TO', '0P0000ZF0Q.L', '0P000070M0.TO', '0P0000Q6CH.TO', '0P0000KWGM.TO', '0P00018N5S.T', '0P0000G7F4.F', '0P00019S06.F', '0P00013O8G.F', '0P0000KO3C.L', '0P00008Y7N.L', '0P00000FBC.L', '0P0001AF4I.F', '0P00008Y7M.L', '0P0000KO3D.L', '0P00014HGN.L', '0P000147Y7.F', '0P0000N35W.F', '0P0001CJWN.F', '0P00012NWV.TW', '0P00013OUN.F', '0P0000ZWDW.F', '0P0001DVOC.F', '0P0000X3T6.L', '0P000023IE.L', '0P0000M1KL.F', '0P00001A98.F', '0P0001A58O.F', 'RMBKX', 'RMBNX', '0P00000TU4.F', '0P0001C2DG.F', '0P0000VGEF.TO', '0P0001DKAG.TO', '0P0000VGE9.TO', '0P0001DKAJ.TO', '0P0001HDJQ.F', '0P0001H4W8.F', '0P00000PAM.F', '0P00009P2Y.L', '0P000023RS.L', '0P00006EH9.L', '0P0001F35Y.TO', '0P0000278X.L', '0P00006AHL.TW', '0P00007037.TO', '0P00017BDW.L', '0P00006AIV.TW', '0P0000Z8O8.L', '0P00010F5I.TO', '0P00016RFJ.F', '0P00000U4L.F', 'RCMFX', 'FSMEX', '0P0001D8QZ.TO', '0P0001D8RA.TO', '0P0001751E.L', '0P0001DGKO.F', '0P0001HFF3.L', '0P00000RC5.L', '0P0000XAJQ.L', '0P00009JDY.L', '0P0000VGEG.TO', '0P0000SRWD.L', '0P0000SRWF.L', '0P0000X8HM.L', '0P0000XTTT.F', '0P0000XTTS.F', '0P0000XTTR.F', '0P0001CI4M.F', '0P0000XTTQ.F', '0P0000X8HN.L', '0P0000XTTP.F', '0P0000XBRF.L', '0P0001DK75.F', '0P0000M4OQ.L', '0P0000M4OP.L', '0P00012ASP.L', '0P0000XBRG.L', '0P00012ASO.L', '0P00000R5J.L', '0P00000DIX.L', '0P00016QD1.L', '0P000019IC.F', '0P0000W9SS.L', '0P00000TX9.F', '0P0001AEV5.F', '0P00019TXE.F', '0P00016O00.L', '0P0001751F.L', '0P0000WUQA.L', '0P0001IWOM.F', '0P0001H9KC.F', '0P00000TY5.F', '0P00016QD3.L', '0P00000XX7.L', 'BQMIX', '0P0001F3HX.L', '0P0000RREN.F', '0P00007VNI.L', '0P0000XON1.L', '0P000195HG.L', '0P0000XON2.L', '0P00000R2Z.L', '0P00000R30.L', '0P0001IBZ8.L', '0P0001F3HW.L', '0P00000NKA.L', '0P0001DEYL.F', '0P0000WUPR.L', '0P000072DD.TO', '0P00000PGC.F', '0P0000MR8C.F', '0P00000NK8.L', 'RAMSX', '0P0000GELF.F', '0P00016QD2.L', '0P00000FFB.F', '0P00000XX8.L', 'JMCGX', '0P0001KN5C.F', '0P0001D3MC.L', '0P0001D3MB.L', '0P0001JC1R.F', '0P00015WPZ.F', '0P00002576.F', '0P0001FG2J.F', '0P0001A1FD.L', '0P0000WN2N.L', '0P00000JCC.L', '0P0000WN2L.L', '0P00000JCA.L', '0P0000WN84.L', '0P00000RIU.L', '0P00000RGC.L', '0P0000WN2K.L', '0P00006AI0.TW', '0P00006AL8.TW', '0P00006AHR.TW', '0P0000XOMS.L', '0P0001F5F7.L', '0P000195HC.L', '0P00000ED6.L', '0P00006AB0.TW', '0P0000GELJ.F', 'MSSMX', '0P0001BDIU.L', 'ANCIX', '0P0001J92N.L', 'PRGTX', '0P0001BDIT.L', '0P0000IXA4.F', '0P000156TO.F', '0P00006AFX.TW', '0P0000SYAD.F', 'MSSLX', '0P0001CI1J.F', '0P0001BMTN.F', 'MSSGX', '0P00000VFC.L', '0P00000VEQ.L', '0P00000RAP.L', '0P00006AA8.TW', '0P00006AIY.TW', '0P000155QH.F', 'MFLLX', '0P00006A9Z.TW', '0P00006AEC.TW', '0P00006EXV.F', '0P00006AEZ.TW', '0P00006AKX.TW', '0P00006AA0.TW', '0P00006AEP.TW', '0P00006ANF.TW', '0P0001HDTI.TW', '0P0001CERL.F', '0P00006AKH.TW', '0P0000X836.L', '0P00006AKU.TW', '0P0000VDYF.L', '0P0000VDYG.L', '0P00006AH5.TW', '0P0000M6NJ.L', '0P000090YV.F', '0P00015AYU.F', '0P00006AC1.TW', '0P00018CTJ.F', '0P0001CC4U.F', '0P000154MT.L', 'BRSIX', '0P00000JJP.L', '0P0000F5H1.TW', '0P00012FLC.L', '0P00000YQZ.L', '0P0001K18E.L', '0P00006O8P.SI', '0P0001MQ90.F', '0P00014NHO.TO', '0P0001AAHP.TO', '0P0001CD0Z.F', '0P0001H98J.TO', '0P00017BMM.F', '0P00015JIG.F', '0P00001N6W.F', '0P0000NG3A.TO', '0P0001CX3J.F', '0P000087H8.TO', '0P0000NFZ8.TO', '0P0000Y2IB.TO', '0P0000TJZX.TW', '0P0001HN82.TO', '0P00014NHN.TO', '0P0000HK8D.TO', '0P0000NFZ7.TO', '0P0000Y2IA.TO', '0P0001DCUP.F', '0P00006AGY.TW', '0P0001DXPO.F', '0P0001I493.F', '0P0001AJYP.F', '0P00002ANU.F', '0P0000I49R.L', '0P00018AWG.TO', '0P00009DUM.F', '0P0001D2JC.F', '0P00019ZBT.F', '0P0000A2XH.F', 'FISUX', 'FISSX', 'FISTX', '0P00006AIQ.TW', '0P00006AA2.TW', 'KSCYX', 'KSCOX', 'KSOCX', 'KSOAX', '0P00006AA3.TW', '0P00006AC6.TW', '0P00006A9V.TW', 'KNPYX', 'WWNPX', 'KNPAX', 'KNPCX', 'PDFDX', '0P00006A9W.TW', 'LSHCX', 'LSHAX', 'LSHUX', '0P00006AC7.TW', '0P00006AAU.TW', '0P00006AC4.TW', '0P00006AHA.TW', '0P00006AIU.TW', '0P00009PAQ.TW', '0P00006AKO.TW', '0P00006AIR.TW', '0P00006AAL.TW', '0P00006AE1.TW', '0P0001IX4W.TW', '0P00006AL4.TW', '0P00006AK2.TW', '0P00006AJV.TW', '0P00006AIP.TW', '0P0000852A.TW', '0P00006ACB.TW', '0P00006AJB.TW', '0P00006ABZ.TW', '0P00006AHQ.TW', '0P00007W5B.F', 'LUSAX', '0P0000HOAP.TW', 'KMKYX', '0P0000KXZ8.TW', 'KMKAX', 'KMKCX', 'KMKNX', '0P00006AMB.TW', '0P00006AFE.TW', '0P0001FC10.L', '0P0000W9SO.L', '0P00017MZL.L', '0P0001BKZB.L', '0P0000X2CW.L', '0P000015RI.L', '0P0000WHPZ.L', '0P0000TE0L.TW', '0P0001CNEY.L', '0P00006AI3.TW', '0P0001H3P3.L', '0P00006AHO.TW', '0P00006AKS.TW', '0P000015RJ.L', '0P0001EC3A.TW', '0P0000WHS6.L', '0P0001DFU6.TW', '0P0000WHQ0.L', '0P00006AHM.TW', '0P00006AEJ.TW', '0P00006AII.TW', '0P00006AH7.TW', '0P00006AEG.TW', '0P00006AH3.TW', '0P000125XM.F', '0P0001JU3V.F', '0P00006AI1.TW', '0P0001IFYH.TW', '0P00006AJU.TW', '0P0001IHCN.TW', '0P0000RXCQ.TW', '0P00006AL0.TW', '0P0001D8SQ.TO', '0P000071H3.TO', '0P00011063.TO', '0P00012MQS.TO', '0P00006AKV.TW', '0P0000SNUI.TW', '0P00006AD2.TW', 'LBRTX', '0P00006AB8.TW', '0P00006AH2.TW', '0P000024GQ.L', '0P0000KNNF.L', '0P00000NOA.L', '0P000127UF.SW', '0P0001A1FB.L', '0P000148KF.SW', '0P0001A1FC.L']



# run tests:
test_stocks =[] # don't comment out this variable and leave test_stock empty!!!!! 
# first 210 aussie stocks
# test_stocks = ['CBA.AX','BHP.AX','CSL.AX','WBC.AX',
#                  'NAB.AX','FMG.AX','ANZ.AX','WES.AX','MQG.AX','RIO.AX',
#                  'WOW.AX','TLS.AX','GMG.AX','TCL.AX','APT.AX','ALL.AX','COL.AX','NCM.AX',
#                   'REA.AX','WPL.AX','XRO.AX','SYD.AX','JHX.AX','SHL.AX','FPH.AX',
#                  'BXB.AX','COH.AX','QBE.AX','REH.AX','ASX.AX','RMD.AX','SUN.AX','MGOC.AX',
#                   'RHC.AX','S32.AX','STO.AX','SCG.AX','AMC.AX','BSL.AX','MIN.AX','IAG.AX',
#                  'NST.AX','EDV.AX','TPG.AX','MGR.AX','APA.AX','TAH.AX','DXS.AX','SGP.AX',
#                  'SEK.AX','AFI.AX','DMP.AX','WTC.AX','AIA.AX','CPU.AX','MPL.AX','MFG.AX',
#                   'GPT.AX','VAS.AX','QAN.AX','TWE.AX','MCY.AX','SVW.AX','LLC.AX','SPK.AX',
#                  'OSH.AX','BLD.AX','PMGOLD.AX','OZL.AX','IEL.AX','SOL.AX','EVN.AX','CHC.AX',
#                  'ORG.AX','AZJ.AX','HVN.AX','IGO.AX','AST.AX','VCX.AX','ALD.AX','ARG.AX',
#                  'LYC.AX','CIM.AX','MEZ.AX','CAR.AX','ALQ.AX','PME.AX','ALX.AX','WOR.AX',
#                  'FBU.AX','NXT.AX','BOQ.AX','CWN.AX','BEN.AX','QUB.AX','JBH.AX','CWY.AX',
#                   'IPL.AX','PLS.AX','ANN.AX','ORI.AX','IFT.AX','AWC.AX','EBO.AX','STW.AX',
#                  'NEC.AX','SKI.AX','IVV.AX','AGL.AX','BRG.AX','ALU.AX','A2M.AX','RWC.AX',
#                   'PMV.AX','ILU.AX','MLT.AX','APE.AX','CIA.AX','SDF.AX','IOZ.AX','CGF.AX',
#                  'ARB.AX','NWL.AX','Z1P.AX','DOW.AX','BKW.AX','VGS.AX','GNE.AX','AMP.AX',
#                   'SGM.AX','VUK.AX','VEA.AX','NHF.AX','SGR.AX','ORA.AX','PDL.AX','MGF.AX',
#                  'CLW.AX','TNE.AX','HLS.AX','CDA.AX','GOZ.AX','CTD.AX','SUL.AX','FLT.AX',
#                  'PXA.AX','ORE.AX','DHG.AX','NIC.AX','TLT.AX','SNZ.AX','YAL.AX','BPT.AX',
#                   'BAP.AX','IFL.AX','VTS.AX','CSR.AX','IRE.AX','SCP.AX','MP1.AX','BWP.AX',
#                  'CNU.AX','LNK.AX','ZIM.AX','BFL.AX','ABP.AX','NSR.AX','CHN.AX','DRR.AX',
#                   'PNI.AX','PTM.AX','GXY.AX','IOO.AX','UWL.AX','LFS.AX','PBH.AX','WHC.AX',
#                  'SKC.AX','ABC.AX','CNI.AX','CMW.AX','LFG.AX','VEU.AX','BIN.AX','QUAL.AX',
#                  'PPT.AX','AAA.AX','CQR.AX','WPR.AX','CIP.AX','VAP.AX','SLK.AX','PRU.AX',
#                   'EVT.AX','RRL.AX','DDR.AX','NDQ.AX','WAM.AX','CEN.AX','VHY.AX','CCP.AX',
#                  'INA.AX','WEB.AX','IAF.AX','PPH.AX','JHG.AX','AVN.AX','ELD.AX','LIC.AX'] # all aussie stocks, stopped at 210
# random 8 stocks
# test_stocks = ['CSL.AX','WBC.AX','NAB.AX','FMG.AX','AAU',
#                  'ACCD','ELD.AX','AAPL','CBA.AX','BHP.AX','CSL.AX','WBC.AX',
#                  'FMG.AX','AAU','ACCD','ELD.AX','EDV.AX','MGF.AX','PXA.AX','BFL.AX']# all aussie stocks
# random 2 stocks
#test_stocks = ['A','AGGR', 'AGHC', 'AGI','ABCO']#'A','AAU','ACCD','AMAL','AMAM','AMAO','AMAT','AMBA',


# name markets -> ideal when market name and stocks (above) match -->not needed anymore -> it is automated
    #market_name=('test_stocks') # used at sort overallstatus
    #market_name=('etf_stocks') # used at sort overallstatus
    #market_name=('commodities_future_stocks') # used at sort overallstatus
    #market_name=('crypto_stocks') # used at sort overallstatus
    #market_name=('global_indices') # used at sort overallstatus
    #market_name=('best_mutual_funds') # used at sort overallstatus
    #market_name=('us_stocks') # used at sort overallstatus
    #market_name=('aussie_stocks') # used at sort overallstatus
    #young_stock=('list of young stock') # using it for sort young stock -> value gets saved in dataframe to distinguish when young stock starts

# all stock names combined for for-loop
#execution time 179min
all_stock_names=['S_Stocks_A_Analyse_Historical_Data_O_output_us1']#,'aussie_stocks','etf_stocks','commodities_future_stocks','crypto_stocks','global_indices','best_mutual_funds']
all_stock_names_stock_data=[us_stocks]#,aussie_stocks,etf_stocks,commodities_future_stocks,crypto_stocks,global_indices,best_mutual_funds]


#name of numbers used throught the code
length_mean200=200 # 1st strategy look at means // one is defined by 1 close day
length_mean50=50
length_mean20=20
length_meanind=35 # any individual mean
limit=10 # belongs to mean and is a buffer for for-loop
under=2 #when mean is under stock price = 2 #under
touching=1 #when mean is touching stock price = 1 #touching
over=0 #when mean is over stock price = 0 #over
d5=5 # using it for avg volume calc
W2=10 # using it for avg volume calc# no weekends, yfinance data only show week days when the market is operating
M1=20 # using it for avg volume calc
#M3=60
M6=120 # using it for return rate calucalation
Y1=240 # using it for return rate calucalation
y1_1=241
Y5=1200 # using it for return rate calucalation
Y25=600 # 2.5 years and using it for return rate calucalation

timeperiod=[5, 10, 20, 60, 120, 240, 1200] # stands for d5,w2,m1,m3,m6,y1,y5 ->no weekends, yfinance data only show week days when the market is operating
point_five=0.5 # using it for return rate calucalation
zero=0 # stock/mean downtrend is 0 //mean over stock price 0 # and using it for return rate calucalation
one=1 # stock/mean is in consolidation 1 //mean touches stock price 1 # and using it for return rate calucalation # and #capital gain in 5 and 10 years
two=2 # stock/mean uptrend is 2 //mean under stock price 2 # and using it for return rate calucalation
two_five=2.5 # using it for return rate calucalation
three=3 # using it for return rate calucalation
four=4 # using it for return rate calucalation
five=5 # using it for return rate calucalation
six=6 # using it for return rate calucalation
seven=7 # using it for return rate calucalation
eight=8 # using it for return rate calucalation
nine=9 # using it for return rate calucalation
ten=10 # using it for return rate calucalation
eleven=11 # using it for return rate calucalation
nineteen=19 # #capital gain in 5 and 10 years
twenty=20 # using it for return rate calucalation // # use it in sort function
thirty=30 # using it for return rate calucalation
thirtysix=36 # using it for sort function (sort young companies)
fourty=40 # using it for return rate calucalation
fourtythree=43 # using it for sort function (sort young and old companies)
fourtyfour=44 # using it for sort function (sort young companies)
fifty=50 # using it for return rate calucalation
sixty=60 # using it for return rate calucalation 
seventy=70 # using it for return rate calucalation
eighty=80 # using it for return rate calucalation
ninety=90 # using it for return rate calucalation
hundred=100 # using it for return rate calucalation
threehundred=300  # using it for sort function (sort young and old companies)
fivehundred=500 # print every 500 stock
tenthousand=10000 #capital gain in 5,
high_rand_number=1000000000 ## for else condition 'in range' setup. 'in range' can only handle integers and non floating (decimal) places. To overcome issue the value can be multiplied with 100.000.000 to keep accuracy.
system_maximum_value=1000000000 # maximum integer number used in capital gain
#return rate and minimum expenses
expenses_infl_intrate_yr_perc=5.5 # Expenses such as inflation (2.5%) and interest rate (3-4%) in % per year which is roughly 5.5% in total
#capital gain
cap_start=1000 # captical at start in $ at year 0 => if hypothetically my capital is 5K instead of 1K and i add aditional 5K ontop annually ~ CG*5 is a good estimation.
add_cap=1000 # add captial each year in $
trans_fee=11 # transaction fee each time buying stock in $
exp_manag_perc=0.03 # Expenses management fee from broker managing our account in % on current account balance
# sort data
index_name_row1_dataframe=('StOv') # StOv needs to match to dataframe_structure_index value 1 # used for sort data
    #stocks_names=aussie_stocks # maybe need to put it up
    #sort_array=numpy.array(total_dataframe.loc[index_name_row1_dataframe]) # make sure ['StOv'] matches to total_dataframe row 1 index name
    #for yy in range(five): # maybe place value up
# find key error in code
na_variable=('na') # used for find indicies
#counter every 500 stock print
counter500print=0
doublecheck500=500

#dateframe 1
#dataframe_structure=['Mean20_d5/MeanTrend/StockTrend','Mean50_d5/MeanTrend/StockTrend','Mean200_d5/MeanTrend/StockTrend','Meanind_d5/MeanTrend/StockTrend','Mean20_w2/MeanTrend/StockTrend',
#                     'Mean50_w2/MeanTrend/StockTrend','Mean200_w2/MeanTrend/StockTrend','Meanind_w2/MeanTrend/StockTrend','Mean20_m1/MeanTrend/StockTrend',
#                     'Mean50_m1/MeanTrend/StockTrend','Mean200_m1/MeanTrend/StockTrend','Meanind_m1/MeanTrend/StockTrend','Mean20_m3/MeanTrend/StockTrend',
#                     'Mean50_m3/MeanTrend/StockTrend','Mean200_m3/MeanTrend/StockTrend','Meanind_m3/MeanTrend/StockTrend','Mean20_m6/MeanTrend/StockTrend',
#                     'Mean50_m6/MeanTrend/StockTrend','Mean200_m6/MeanTrend/StockTrend','Meanind_m6/MeanTrend/StockTrend','Mean20_y1/MeanTrend/StockTrend',
#                     'Mean50_y1/MeanTrend/StockTrend','Mean200_y1/MeanTrend/StockTrend','Meanind_y1/MeanTrend/StockTrend','Mean20_y5/MeanTrend/StockTrend',
#                     'Mean50_y5/MeanTrend/StockTrend','Mean200_y5/MeanTrend/StockTrend','Meanind_y5/MeanTrend/StockTrend'] # to create dataframe-> these are indexes to look at

# dateframe 2
dataframe_structure_index=['StOv','Mean20_d5','Mean20_w2','Mean20_m1','Mean20_m3','Mean20_m6',
                     'Mean20_y1','Mean20_y5','Mean50_d5','Mean50_w2',
                     'Mean50_m1','Mean50_m3','Mean50_m6','Mean50_y1',
                     'Mean50_y5','Mean200_d5','Mean200_w2','Mean200_m1',
                     'Mean200_m3','Mean200_m6','Mean200_y1','Mean200_y5',
                     'Meanind_d5','Meanind_w2','Meanind_m1','Meanind_m3',
                     'Meanind_m6','Meanind_y1','Meanind_y5','RR_m6',
                           'RR_y1','RR_y2.5','RR_y5','CG_y5','CG_y10','DAvgVol_d5','DAvgVol_w2',
                           'DAvgVol_m1','DAvgVol_m6','DAvgVol_y1','DavgVol_y25','DAvgVol_y5','TodaysPrice','StAge'] # to create dataframe-> these are indexes to look at

dataframe_structure_0=['StOv=StatusOverall_SumofTrendsReturnRate','Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend',
                        'Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend',
                     'Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend',
                     'Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend',
                     'Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend',
                     'Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend',
                     'Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend',
                     'Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend','Mean_Up_Touching_Down/MeanTrend/StockTrend',
                     'ReturnRate_in%_ie<min=0,<10%=1,<20%=2,etc','RR=Return_Rate','RR=Return_Rate','RR=Return_Rate','CG=CapitalGain[10K]_(Start1K_Add1K)-(Exp)',
                       'CG=CapitalGain','DAvgVol=Daily Average Volume','DAvgVol=Daily Average Volume','DAvgVol=Daily Average Volume',
                       'DAvgVol=Daily Average Volume','DAvgVol=Daily Average Volume','DAvgVol=Daily Average Volume',
                       'DAvgVol=Daily Average Volume','TodaysPriceOfStock','StAge=StockAge_ie>Y5=1200,<Y5=x'] # to create dataframe-> these are indexes to look at

#Export and save data
#filename_csv=('//ROAPRFAP01/User$/felix.bockelmann/Desktop/private/python stuff/stock.csv')
filename_csv=('C:/Users/USER/Documents/python_code/S_Stocks_A_Analyse_Historical_Data_O_output_us1.csv') # in the clinical version I need to change .../stock.csv to stock_us or stock_etf, etc.
#filename_txt=('//ROAPRFAP01/User$/felix.bockelmann/Desktop/private/python stuff/stock.txt')
#filename_pdf=('//ROAPRFAP01/User$/felix.bockelmann/Desktop/private/python stuff/stock.pdf')
#filename_html=('//ROAPRFAP01/User$/felix.bockelmann/Desktop/private/python stuff/stock.html')

#names of indicies -> add any indices if needed, recommended to keep at least one.
# 'sector', 'trailingPE', 'beta', 'industry', 'operatingCashflow', 'recommendationKey', 'totalCashPerShare','revenuePerShare', 'shortName', 
#'longName', enterpriseToRevenue', 'enterpriseToEbitda','pegRatio',
#'forwardPE','trailingAnnualDividendYield', 'payoutRatio','trailingAnnualDividendRate','dividendRate','averageDailyVolume10Day','regularMarketVolume',
#'volume'
name_of_indicies=['longName','sector']#,'trailingPE'] # minimum 2 keywords for now when running code until problem with one is resolved # put 'longName' as default in code in first position of array only for report, 
        #because I want the name of company to appear on report in column one. (Note: any keyword who is in position one will be placed in column one in report. At least two keywords needed to prevent error.)
        # current problem is when one keyword is used, then len('var'), with var=srting the code gets length of string, but it should determine it is 1 string.  
save_stock_indicies_names=('stock_indicies') # is used for naming convention, don't change naming if not necessary

# programm variables
    #not needed anymore -> it is automated
    #they may alter length of for loops. A certain default set may be ideal for this code
    #length_sort_data=twenty # twenty is ideal when running test at full length and "<ten" (depends on how many stocks are analysed) is ideal when i want to test a small stack of stock. Used at sorting data statusoverall and young stock
    #save_dataframe_loop=ninety # change to "ninety" when full run is performed, for testing small numbers of stock "one" is recommended
    #length_sort_data=two # when in testing mode >5 stocks -> use five 
    #save_dataframe_loop=one # when in testing mode-> use one
rawdatadonotdelete_name=('RAWDATA_DONOTDELETE')
reportdatadonotdelete_name=('REPORT_DONOTDELETE')
timeperiod_start_date=six# used for define start_date and keep length of rawdata csv.file the same
format = '%d/%m/%Y'
sort_stock_below_price_all_stock=threehundred # used in sort all stock (young and old) -> all stock which today's price is higher than the variable won't be included in stock report 

#Note:
# what if stock is less than 5 years old. I might get problems in my code need to try it.
#the means in code in comparison to tradingView: tradingview scales timeperiods differently for each price to time plot, therefore the means in this code will match to only YR1 in tradingview which equals 1 dataplot to 1 trading day.
# the highest resolution would be price per minute. tradingview uses it for <1D trading.
# stock should be at least one year on the market. This is the minimum time scale allowed for this code. this code overwrites dates such as Y5 and Y25 to minimum length available. 
    #the code has an indicator in dataframe which shows time scale of the stock. status overall takes into account minimum time lenght to make asure valid assessment of stock. 
# code needs at least 2 stocks for analysis, otherwise run into errors.
# when dataframe is converted into csv. Data with 3columns ([0 0 1]) may appear as ([1]) only. Don't worry, the calculation is still using all 3 columns and the csv.file delets unnecessary zeros automatically.


#### run programm #### 

#run code using jit-> may run parts of the code on gpu
#@jit define the whole loop and see what happens

testing_size_of_test_stocks=[]
testing_size_of_test_stocks=numpy.asarray(test_stocks)
if testing_size_of_test_stocks.size> zero:
    all_stock_names=['test_stocks']
    all_stock_names_stock_data=[test_stocks]

for zzz in all_stock_names:
    
    overallstatus_total_dataframe=[]
    overallstatus_total_dataframe_age=[]
    overallstatus_total_dataframe_pre=[]
    overallstatus_total_dataframe_total=[]
    interm_data=[]
    full_dataframe=[]
    td_transpose_age=[]
    young_stock=[] # using it for sort young stock -> value gets saved in dataframe to distinguish when young stock starts
    gc.collect()
    young_stock=('list of young stock') # using it for sort young stock -> value gets saved in dataframe to distinguish when young stock starts

    
    all_stock_names_stock_data_for_loop=[]
    index_all_stock_names_stock_data_int=[]
    index_all_stock_names_stock_data=[]
    all_stock_names_numpyarray=[]
    zzz_numpyarray=[]  
    
    testing_size_of_test_stocks=numpy.asarray(test_stocks)
    if testing_size_of_test_stocks.size== zero:# zzz is a stock
        #they may alter length of for loops. A certain default set may be ideal for this code
        length_sort_data=twenty # twenty is ideal when running test at full length and "<ten" (depends on how many stocks are analysed) is ideal when i want to test a small stack of stock. Used at sorting data statusoverall and young stock
        save_dataframe_loop=ninety # change to "ninety" when full run is performed, for testing small numbers of stock "one" is recommended. For loop needs to run at least once when code is executing to be able to first delete old dataframe and save new datafarame into folder and then report results correctly.
        
        if (zzz=='commodities_future_stocks' or zzz=='global_indices'):
            save_dataframe_loop=ten # change to ten because number of stocks are below ninety in each category.
        # name markets -> ideal when market name and stocks (above) match
        market_name=zzz # used at sort overallstatus
            #market_name=('test_stocks') # used at sort overallstatus
            #market_name=('etf_stocks') # used at sort overallstatus
            #market_name=('commodities_future_stocks') # used at sort overallstatus
            #market_name=('crypto_stocks') # used at sort overallstatus
            #market_name=('global_indices') # used at sort overallstatus
            #market_name=('best_mutual_funds') # used at sort overallstatus
            #market_name=('us_stocks') # used at sort overallstatus
            #market_name=('aussie_stocks') # used at sort overallstatus
    else: #zzz is a test_stock
        length_sort_data=five # ten # when in testing mode >5 stocks -> use five 
        save_dataframe_loop=one # one # when in testing mode-> use one
        market_name=zzz # used at sort overallstatus

    #get parameter ready for next for-loop     
    all_stock_names_numpyarray=numpy.array(all_stock_names)
    zzz_numpyarray=numpy.array(zzz)
    index_all_stock_names_stock_data=numpy.array(numpy.where(all_stock_names_numpyarray==zzz_numpyarray)).flatten()
    index_all_stock_names_stock_data_int=int(index_all_stock_names_stock_data)
    all_stock_names_stock_data_for_loop=all_stock_names_stock_data[index_all_stock_names_stock_data_int] 

    #### get stock using yahoo finance
    # Get the data for all Aussie stocks using yfinance (yahoo). data type is dataframe = multidataframe. This code is mainly suitable for anything outside of daily trading (<1Day timeframe). it uses today's date as reference.
    today= datetime.today().strftime('%Y-%m-%d')
    # today_datetimep_initial=datetime.strptime(today_pre, '%Y-%m-%d')
    # date_subtracted_days_from_today = today_datetimep_initial - timedelta(days=one) # date - days
    # today=date_subtracted_days_from_today.strftime('%Y-%m-%d') # to correct start_day
    #start_day= datetime(start_year, start_month, start_day).strftime('%Y-%m-%d') determine manual entry of start date
    start_day=datetime(datetime.today().year - timeperiod_start_date, datetime.today().month, datetime.today().day).strftime('%Y-%m-%d') # current lenght is set to six year as per default
    start_day_nstock=start_day

    #time_mean_frame = DataFrame(index = dataframe_structure, data =([1,2,3]))
    total_dataframe = pandas.DataFrame(index = dataframe_structure_index, data=dataframe_structure_0)

    #### create csv folder to save dataframe in here
    csv_path, csv_file_ending = os.path.split(filename_csv)
    csv_file, csv_ending = csv_file_ending.split('.')
    csv_extension=csv_file+'.'+csv_ending
    joined_path_csv_dataframe=os.path.join(csv_path,csv_extension)
    # create a folder to save rawdata for close_data
    csv_file_data=market_name
    csv_extension_data=csv_file_data+'_'+rawdatadonotdelete_name+'.'+csv_ending
    joined_path_csv_data=os.path.join(csv_path,csv_extension_data)
    # create csv.file to save stock indicies
    csv_extension_data_stock_indicies=csv_file_data+'_'+save_stock_indicies_names+'_'+rawdatadonotdelete_name+'.'+csv_ending
    joined_path_csv_data_stock_indicies=os.path.join(csv_path,csv_extension_data_stock_indicies)
    #save sort dataframe to csv and add market stock name
    csv_path, csv_file_ending = os.path.split(filename_csv)
    csv_file, csv_ending = csv_file_ending.split('.')
    csv_file=market_name
    csv_extension_sort_dataframe=csv_file+'_'+reportdatadonotdelete_name+'.'+csv_ending
    joined_path_csv_dataframe_market_name=os.path.join(csv_path,csv_extension_sort_dataframe)


    # #### keep rawdata csv.file the same length (in x years) to be able to keep the length of the file consistent
    # if os.path.exists(joined_path_csv_data):
    #     read_csv_rawdata_dataframe=[]
    #     saved_length_of_dates=[]
    #     last_date_adj_timelength_pre=[]
    #     latest_date_adj_timelength=[]
    #     present=[]
    #     column_dates_in_array=[]
    #     start_day_interm=[]
    #     read_csv_rawdata_dataframe = pandas.read_csv(joined_path_csv_data) # read data from csv.file
    #     saved_length_of_dates =numpy.array(read_csv_rawdata_dataframe.columns) # get stock names from csv.file
    #     saved_length_of_dates=saved_length_of_dates[1:]# get rid of zero at index position zero 
    #     last_date_adj_timelength_pre=saved_length_of_dates[-1]          
    #     try:
    #         datetime.strptime(last_date_adj_timelength_pre, format) 
    #     except ValueError:
    #         last_date_adj_timelength_pre=datetime.strptime(last_date_adj_timelength_pre,'%Y-%m-%d').strftime('%d/%m/%Y')
    #     latest_date_adj_timelength=datetime.strptime(last_date_adj_timelength_pre, '%d/%m/%Y')
    #     start_day_x_years=datetime(datetime.today().year - timeperiod_start_date, datetime.today().month, datetime.today().day).strftime('%Y-%m-%d') # current lenght is set to six year as per default
    #     latest_date_possible = datetime.strptime(start_day_x_years, "%Y-%m-%d") # need to convert string to datetime
    #     if latest_date_adj_timelength.date() < latest_date_possible.date(): 
    #         start_day_interm = datetime.strptime(start_day_x_years, '%Y-%m-%d').strftime('%d/%m/%Y') # convert date format
    #         start_day_interm=pandas.to_datetime(start_day_interm).to_numpy()
    #         saved_length_of_dates=pandas.to_datetime(saved_length_of_dates).to_numpy()
    #         numpy_saved_length_of_dates=saved_length_of_dates.astype(numpy.datetime64).reshape(-1,1)
    #         numpy_start_day_interm=numpy.datetime64(start_day_interm)
    #         column_dates_in_array=numpy.array(numpy.where(numpy_saved_length_of_dates==numpy_start_day_interm)).flatten()
    #         if column_dates_in_array.size > zero:#if it is not empty!
    #             print('rawdata file had to be shortened to be able to contain a length of 6 years. line 303')
    #             column_dates_in_array=column_dates_in_array[zero]+one # needs to add one because have deleted zero from position zero prior
    #             read_csv_rawdata_dataframe.drop(read_csv_rawdata_dataframe.columns[column_dates_in_array:], axis=1, inplace=True)# delete columns in dataframe
    #             first_column_set_index=read_csv_rawdata_dataframe.columns[zero]
    #             read_csv_rawdata_dataframe.set_index(first_column_set_index, inplace=True)
    #             read_csv_rawdata_dataframe = read_csv_rawdata_dataframe.rename_axis(zero) # read_csv_rawdata_dataframe.rename_axis(None)
    #             read_csv_rawdata_dataframe.to_csv(joined_path_csv_data, sep=',',encoding='utf-8',header='True') # create a csv.file
    #     read_csv_rawdata_dataframe=[]
    #     saved_length_of_dates=[]
    #     last_date_adj_timelength_pre=[]
    #     latest_date_adj_timelength=[]
    #     present=[]
    #     column_dates_in_array=[]
    #     start_day_interm=[]

    #### choose each market and run all the stocks
    counter_dataframe_length=zero
    counter4=zero
    counter11=zero
    counter10=zero
    counter12=zero
    counterbb=zero
    counterbb2=zero
    countertodaysdate=zero

    print('code started to run')
    for x in all_stock_names_stock_data_for_loop: # may need to change that when running multiple markets or different markets
        data=[]
        data_close=[]
        data_open=[]
        data_high=[]
        data_low=[]
        length_data=[]
        dataframe_data_close=[]
        stock_exists_rawdata=zero # zero means stock data does not exist in rawdata csv.file
        stock_doesnot_exist_rawdata=zero
        os_path_joined_path_csv_data_not_exist=zero
        os_path_joined_path_csv_data_exist=zero

    #     ###is csv.file for rawdata there?
    #     if os.path.exists(joined_path_csv_data):
    #     #is stock there in csv.file of rawdata?
    #         csv_dataframe_rawdata=[]
    #         dataframe_data_close_as_list=[]
    #         days_diff=[]
    #         date_subtracted_days=[]
    #         stock_values_of_dataframe_nan_list=[]
    #         stock_values_of_dataframe_nan_data=[]
    #         index_range_delete_columns_rawdatafile=[]
    #         first_column_set_index=[]
    #         csv_dataframe_rawdata = pandas.read_csv(joined_path_csv_data)
    #         dataframe_data_close_as_list = csv_dataframe_rawdata.iloc[:,zero] # extract indexes from dataframe
    #         dataframe_data_close_as_list= numpy.array(dataframe_data_close_as_list)
    #         idx_stock_name=numpy.array(numpy.where(dataframe_data_close_as_list == x))
    #         os_path_joined_path_csv_data_exist=one
    #         if idx_stock_name.size > zero:#if it is not empty!
    #         #what is starting date?
    #             counter12=counter12+one
    #             stock_exists_rawdata=one # one means stock data exists in rawdata csv.file
    #             if counter12==one: # this is needed to create rawdata csv.file zeroes, once created it doesn't need to be re-run
    #                 colname_dataframe_old_startdate = csv_dataframe_rawdata.columns[one]# retrieve column name of dataframe using index. zero is always most recent date
    #                 try:
    #                     datetime.strptime(colname_dataframe_old_startdate, format)
    #                     #print("This is the correct date string format.")
    #                 except ValueError:
    #                     colname_dataframe_old_startdate=datetime.strptime(colname_dataframe_old_startdate,'%Y-%m-%d').strftime('%d/%m/%Y')
    #                 print(colname_dataframe_old_startdate,'->this format is correct:','%d/%m/%Y','if different look at line369')# watching this parameter and need to see when it comes through incorrectly
    #                 today_datetimep=datetime.strptime(today, '%Y-%m-%d')
    #                 colname_dataframe_old_startdate_datetimep=datetime.strptime(colname_dataframe_old_startdate, '%d/%m/%Y')
    #                 days_diff=today_datetimep-colname_dataframe_old_startdate_datetimep
    #                 days_diff_int=days_diff.days #
    #                 date_subtracted_days = today_datetimep - timedelta(days=days_diff_int) # date - days
    #                 #start_day=date_subtracted_days.strftime('%Y-%m-%d') # to correct start_day
    #                 #start_day=date_subtracted_days.strftime('%Y-%m-%d') # to correct start_day
    #                 # determine whether first column of stock data in rawdata csv.file contains nan and if so adjust start_day
    #                 stock_values_of_dataframe_nan_list = csv_dataframe_rawdata.iloc[:,one] # extract first column from rawdata dataframe
    #                 stock_values_of_dataframe_nan_data=numpy.asarray(stock_values_of_dataframe_nan_list)
    #                 stock_values_of_dataframe_nan_data_indx=numpy.argwhere(numpy.isnan(stock_values_of_dataframe_nan_data))
    #                 stock_values_of_dataframe_nan_data_indx=stock_values_of_dataframe_nan_data_indx.reshape(-1)
    #                 if stock_values_of_dataframe_nan_data_indx.size > zero:#if it is not empty!
    #                     index_range_delete_columns_rawdatafile=numpy.arange(one,five+one,one) # create a number range according to 5 working days
    #                     date_column_at_idx_five=csv_dataframe_rawdata.columns[five]
    #                     csv_dataframe_rawdata.drop(csv_dataframe_rawdata.columns[index_range_delete_columns_rawdatafile], axis=1, inplace=True)# delete columns in dataframe## # radomnly 5 working days and check if start_day is shorter. If so, 5 working days becomes new start_day and otherwise start_day won't be overwritten by 5days.
    #                     first_column_set_index=csv_dataframe_rawdata.columns[zero]
    #                     csv_dataframe_rawdata.set_index(first_column_set_index, inplace=True)
    #                     csv_dataframe_rawdata = csv_dataframe_rawdata.rename_axis(zero) # read_csv_rawdata_dataframe.rename_axis(None)
    #                     csv_dataframe_rawdata.to_csv(joined_path_csv_data, sep=',',encoding='utf-8',header='True') # create a csv.file
    #                     date_subtracted_days_minus_five = date_subtracted_days - timedelta(days=five) # date - days
    #                     start_day=datetime.strptime(date_column_at_idx_five, '%d/%m/%Y').strftime('%Y-%m-%d') # to correct start_day
    #                 else:
    #                     start_day=date_subtracted_days.strftime('%Y-%m-%d') # to correct start_day
    #         first_column_set_index=[]
    #         dataframe_data_close_as_list=[]
    #         days_diff=[]
    #         date_subtracted_days=[]
    #         stock_values_of_dataframe_nan_list=[]
    #         stock_values_of_dataframe_nan_data=[]
    #         index_range_delete_columns_rawdatafile=[]
    #         csv_dataframe_rawdata=[]
    #         dataframe_data_close_as_list=[]
    #         if idx_stock_name.size == zero:#if it is empty!:
    #             stock_doesnot_exist_rawdata=one
    #             start_day=start_day_nstock
    #     else:
    #         os_path_joined_path_csv_data_not_exist=one

    # at is rawdata there? don't have any code for stock data when it is new and it doesn't exist in csv.file -> it needs to be added to csv.file
        
        # print every 500 stock to be able to follow where script is up to
        counter500print=counter500print+one
        if counter500print==doublecheck500:
            doublecheck500=doublecheck500+fivehundred
            print('already done:',counter500print,'stocks')
            
        ### download stock data from yahoo. it contains close,open, high, low and volume.
        with io.capture_output() as captured:#avoid printing output
            data = yf.download(x,start_day,today)


        #### is data empty
        test_if_empty = numpy.asarray(data)  # converts it to an array if it's not an array.
        # determine if data is empty i.e. stock is not registered with yahoo
        if test_if_empty.size == zero:#it's empty!
            #print('yahoo data cannot be downloaded')
            continue    # continue here means skipping iteration
        else:
            test_if_empty=[]

        ### save raw data into csv.file to cut down running time and to be able to do further analysis which won't be done with this script
        data_close=data.Close[::-1] # split up and extract data from yahoo data and flip 1d array so that start date is first in array
        data_open=data.Open[::-1]
        data_high=data.High[::-1]
        data_low=data.Low[::-1] 
        data_volume=data.Volume[::-1]
        
        ### delete NAN data from data_close
        nan_data=numpy.asarray(data_close)
        nan_data_indx=numpy.argwhere(numpy.isnan(nan_data))
        nan_data_indx=nan_data_indx.reshape(-1)
        data_close=data_close.drop(data_close.index[nan_data_indx])
        
        nan_data_volume=numpy.asarray(data_volume)
        nan_data_indx_data_volume=numpy.argwhere(numpy.isnan(nan_data_volume))
        nan_data_indx_data_volume=nan_data_indx_data_volume.reshape(-1)
        data_volume=data_volume.drop(data_volume.index[nan_data_indx_data_volume])

    #     ### if stock data from yahoo comes in with different today's date, it needs to be corrected. correct today's date in array
    #     # yahoo might pull dates earlier than start_day for a specific stock such as start_day is 09/09/2021 but yahoo pulls 10/09/2021 contained in data_close. In this case, the 10th would be filled with NAN but i could also contain a value.
    #     # delete any unnecessary data in data_close.
    #     save_xloop_todays_date=[]
    #     row_idx_later_present_firstloop_minusone=[]
    #     countertodaysdate=countertodaysdate+one
    #     if countertodaysdate==one:
    #         save_firstloop_todays_date=[]
    #         save_firstloop_todays_date_array=[]
    #         save_firstloop_todays_date=data_close.index[0].strftime('%Y-%m-%d')
    #         save_firstloop_todays_date_array=data_close.index.strftime('%Y-%m-%d') 
    #     else:
    #         save_xloop_todays_date=data_close.index[0].strftime('%Y-%m-%d')
    #         present_firstloop = datetime.strptime(save_firstloop_todays_date, "%Y-%m-%d")
    #         present_xloop = datetime.strptime(save_xloop_todays_date, "%Y-%m-%d")
    #         if present_firstloop.date() < present_xloop.date(): # if data_close pulls unnecessary dates ->date which is later than start_day, then drop whatever is unnecessary
    #             print(present_firstloop.date(),'reference date',present_xloop.date(),'->match reference date. if not, yahoo pulls todays date not consistently. Delete second date. line 452')
    #             present_firstloop_interm = datetime.strptime(save_firstloop_todays_date, '%Y-%m-%d').strftime('%Y-%m-%d')
    #             row_idx_later_present_firstloop=numpy.array(numpy.where(save_firstloop_todays_date_array == present_firstloop_interm)).flatten() # find row index of date which is later than start_day
    #             if row_idx_later_present_firstloop==zero:
    #                 row_idx_later_present_firstloop_minusone=row_idx_later_present_firstloop
    #             else:
    #                 row_idx_later_present_firstloop_minusone=row_idx_later_present_firstloop-one
    #             data_close = data_close.drop(data_close.index[row_idx_later_present_firstloop_minusone])
    #     save_xloop_todays_date=[]
    #     row_idx_later_present_firstloop_minusone=[]

    #     #This part below is not in use and can be deleted 17/09/2021
    #     # yahoo might pull dates later or shorter than start_day for a specific stock such as start_day is 09/09/2021 but yahoo pulls 07/09/2021 contained in data_close.
    #     # add data to data_close and NAN it.
    #     if os_path_joined_path_csv_data_exist==one:
    #         column_name_range_pre=[]
    #         column_name_range=[]
    #         past_date_comparison=[]
    #         past=[]
    #         present=[]
    #         read_csv_rawdata_get_first_date_pre=[]
    #         read_csv_rawdata_get_first_date_pre_alldates=[]
    #         read_csv_rawdata_get_first_date_pre_most_recent=[]
    #         close_data_array_dataframe=[]
    #         data_close_transpose=[]
    #         data_close_to_series_series=[]
    #         # get most recent date from csv.file first
    #         read_csv_rawdata_get_first_date_pre = pandas.read_csv(joined_path_csv_data) # read data from csv.file
    #         read_csv_rawdata_get_first_date_pre_alldates =numpy.array(read_csv_rawdata_get_first_date_pre.columns)[one:] # get index of csv.file which are dates
    #         read_csv_rawdata_get_first_date_pre_most_recent=read_csv_rawdata_get_first_date_pre_alldates[zero]   # all but the first element -> first element is not a date. it is an unnecessary string named 'Unnamed: 0'
    #         #get most recent date from data_close
    #         column_name_range_pre =numpy.array(data_close.index) # get index of data_close dataframe which are dates
    #         column_name_range_pre=pandas.to_datetime(column_name_range_pre).strftime('%d/%m/%Y') # convert dates to string and save only d/m/Y
    #         column_name_range =numpy.array(column_name_range_pre) # column name range of dates of new data close array
    #         past_date_comparison = column_name_range[zero] # get first date of array and test if it is later or shorter than start day
    #         past = datetime.strptime(past_date_comparison, "%d/%m/%Y") # need to convert string to datetime
    #         present = datetime.strptime(read_csv_rawdata_get_first_date_pre_most_recent, "%d/%m/%Y") # need to convert string to datetime
    #         # compare both dates and if in disagreement, add date to it
    #         if past.date() < present.date(): # if data_close pulls unnecessary dates -> date which is later than start_day, then drop whatever is unnecessary
    #         #create NANs and add them to dataframe
    #             print(past.date(),'yahoo pulls current stock date',present.date(),'-> reference date','->both need to match. if not, yahoo pulls days too short. Need to add most recent date and add NAN as a value. line 491')
    #             # calculate length of missing dates
    #             column_idx_later_day=numpy.array(numpy.where(read_csv_rawdata_get_first_date_pre_alldates == past_date_comparison)).flatten() # find row index of date which is later than start_day
    #             array_with_nans=numpy.full(column_idx_later_day, numpy.nan)# create 1D array with NANs according to difference in days between most recent date in rawdata csv.file and data_close
    #             index_range_add_dates=numpy.arange(zero,column_idx_later_day,one) # create a number range according to length of dates in data_close
    #             dates_idx_close_data_array_dataframe=read_csv_rawdata_get_first_date_pre_alldates[index_range_add_dates]
    #             dates_idx_close_data_array_dataframe_converted=pandas.to_datetime(dates_idx_close_data_array_dataframe).strftime('%Y-%d-%m %H:%M:%S') # convert dates to string and save only d/m/Y
    #             index_range_add_dates_converted_list=list(numpy.array(dates_idx_close_data_array_dataframe_converted))
    #             close_data_array_dataframe=DataFrame()#(index = dates_idx_close_data_array_dataframe_converted) # setup dataframe and save saved_all_dates as index
    #             close_data_array_dataframe[zero]=array_with_nans # add NAN. Indexes and adding values need to have same length
    #             close_data_array_dataframe.index = index_range_add_dates_converted_list
    #             data_close_transpose=close_data_array_dataframe.T # convert pandas.frame.dataframe to pandas.series.series
    #             data_close_to_series_series=data_close_transpose.squeeze(axis=zero)# convert pandas.frame.dataframe to pandas.series.series
    #             data_close=data_close_to_series_series.append(data_close)# append two pandas dataframe series to one          
    #         column_name_range_pre=[]
    #         column_name_range=[]
    #         past_date_comparison=[]
    #         past=[]
    #         present=[]
    #         read_csv_rawdata_get_first_date_pre=[]
    #         read_csv_rawdata_get_first_date_pre_alldates=[]
    #         read_csv_rawdata_get_first_date_pre_most_recent=[]
    #         close_data_array_dataframe=[]
    #         data_close_transpose=[]
    #         data_close_to_series_series=[]
    #     #This part above is not in use and can be deleted 17/09/2021 

    #     ### add a column into existing rawdata csv.file when csv.file is outdated -> all stock will be updated with most recent data
    #     if stock_exists_rawdata==one:
    #         counter10=counter10+one
    #         read_csv_rawdata_dataframe=[]
    #         read_csv_rawdata_dataframe_pre=[]
    #         column_values_array=[]
    #         saved_column_stocknames=[]
    #         saved_column_all_values=[]
    #         array_of_zeros=[]
    #         new_column_names_one=[]
    #         start_day_interm=[]
    #         row_idx_later_day=[]
    #         index_range_delete_dates=[]
    #         column_name_range_csv_file_pre=[]
    #         past_date_comparison=[]
    #         past=[]
    #         present=[]
    #         start_day_interm=[]
    #         row_idx_later_day=[]
    #         if counter10==one: #add new dates in rawdata csv.file. it only needs to run once. in this case zeroes will be added 
    #             dataframe_zeros=[]
    #             read_csv_rawdata_dataframe_pre = pandas.read_csv(joined_path_csv_data) # read data from csv.file
    #             saved_column_stocknames = DataFrame(data=read_csv_rawdata_dataframe_pre.iloc[:, zero].values) # stock names from csv.file
    #             saved_column_all_values = DataFrame(data=read_csv_rawdata_dataframe_pre.iloc[:, one:].values) # stock values from csv.file
    #             column_name_range_csv_file_pre =numpy.array(read_csv_rawdata_dataframe_pre.columns)#.values) # get index of csv.file which are dates
    #             column_name_range_csv_file=column_name_range_csv_file_pre[one:]   # all but the first element -> first element is not a date. it is an unnecessary string named 'Unnamed: 0'
    #             # data_close needs to pull dates with same length -> yahoo might pull dates later than start_day for a specific stock such as start_day is 09/09/2021 but yahoo pulls 09/ and 08/09/2021 contained in data_close
    #             column_name_range_pre =numpy.array(data_close.index) # get index of data_close dataframe which are dates
    #             column_name_range_pre=pandas.to_datetime(column_name_range_pre).strftime('%d/%m/%Y') # convert dates to string and save only d/m/Y
    #             column_name_range =numpy.array(column_name_range_pre) # column name range of dates of new data close array
    #             data_close_array_csv_file=numpy.asarray(data_close) # setup new variable for data_close
    #             # create dates business days from start_day to today
    #             range_of_business_days=pandas.bdate_range(start=start_day, end=today)[::-1] # range of business days
    #             range_of_business_days_converted=pandas.to_datetime(range_of_business_days).strftime('%d/%m/%Y') # convert dates to string and save only d/m/Y
    #             length_range_of_business_days=len(range_of_business_days_converted)# get length of business days
    #             past_date_comparison = column_name_range[-1] # get last date of array and test if it is later than start day
    #             past = datetime.strptime(past_date_comparison, "%d/%m/%Y")
    #             present = datetime.strptime(start_day, "%Y-%m-%d")
    #             while(past.date() < present.date()): # if data_close pulls unnecessary dates ->date which is later than start_day, then drop whatever is unnecessary
    #                 data_close_array_csv_file = numpy.delete(data_close_array_csv_file, (len(data_close_array_csv_file)-one), axis=zero) # delete row of numpy array using index
    #                 column_name_range  = numpy.delete(column_name_range , (len(column_name_range)-one), axis=zero) # delete row of numpy array using index
    #                 past_date_comparison=numpy.array(column_name_range)[-1] # get last date of array and test if it is later than start day
    #                 past = datetime.strptime(past_date_comparison, "%d/%m/%Y") # need to convert string to datetime
    #             #create zeroes and add them to dataframe
    #             array_of_zeros=numpy.zeros((len(saved_column_stocknames),length_range_of_business_days)) # first is row and second is column # create array of zeroes which is same length of new data array
    #             dataframe_zeros= DataFrame(data=array_of_zeros) # create array of zeroes which is same length of new data array
    #             read_csv_rawdata_dataframe=pandas.concat([saved_column_stocknames, dataframe_zeros,saved_column_all_values], axis=1)# all three dataframes together as columns without column names, only values
    #             new_column_names_one = numpy.append(zero,range_of_business_days_converted) # adding columns names to dataframe
    #             read_csv_rawdata_dataframe.columns = numpy.append(new_column_names_one,column_name_range_csv_file) # adding columns names to dataframe
    #             read_csv_rawdata_dataframe.to_csv(joined_path_csv_data, index= False) #, header= False # it does append new files to existing csv.file
    #             column_name_range_csv_file_pre=[]
    #             read_csv_rawdata_dataframe=[]
    #             read_csv_rawdata_dataframe_pre=[]
    #             column_values_array=[]
    #             saved_column_stocknames=[]
    #             saved_column_all_values=[]
    #             array_of_zeros=[]
    #             new_column_names_one=[]
    #             column_name_range=[]

    #         # will be run every for-loop-> add new dates in rawdata csv.file, need to add stock data into zeroes space
    #         read_csv_rawdata_dataframe = pandas.read_csv(joined_path_csv_data) # read data from csv.file
    #         saved_column_stocknames =numpy.array(DataFrame(data=read_csv_rawdata_dataframe.iloc[:, zero].values)).flatten() # get stock names from csv.file
    #         row_idx_stock_name=numpy.array(numpy.where(saved_column_stocknames == x)).flatten() # find row index of stock name x
    #         data_close_array_csv_file=numpy.asarray(data_close)
    #         # data_close needs to pull dates with same length -> yahoo might pull dates later than start_day for a specific stock such as start_day is 09/09/2021 but yahoo pulls 09/ and 08/09/2021 contained in data_close
    #         #length_of_dataframe_zeros=len(dataframe_zeros.columns)# variable pulled from previous if conidition
    #         #index_range_delete_dates=numpy.arange(row_idx_later_day+one,len(column_name_range),one) # create a number range according to length of dates in data_close
    #         column_name_range_pre =numpy.array(data_close.index) # get index of data_close dataframe which are dates
    #         column_name_range_pre=pandas.to_datetime(column_name_range_pre).strftime('%d/%m/%Y') # convert dates to string and save only d/m/Y
    #         column_name_range =numpy.array(column_name_range_pre) # column name range of dates of new data close array
    #         # create dates business days from start_day to today
    #         range_of_business_days=pandas.bdate_range(start=start_day, end=today)[::-1] # range of business days
    #         range_of_business_days_converted=pandas.to_datetime(range_of_business_days).strftime('%d/%m/%Y') # convert dates to string and save only d/m/Y
    #         length_range_of_business_days=len(range_of_business_days_converted)# get length of business days
    #         #column_name_range =numpy.array(column_name_range_pre)[:length_of_dataframe_zeros] # pull only first couple of dates and add them into csv.file
    #         #data_close_array_csv_file=data_close_array_csv_file[:length_of_dataframe_zeros]
    #         past_date_comparison = column_name_range[-1] # get last date of array and test if it is later than start day
    #         past = datetime.strptime(past_date_comparison, "%d/%m/%Y") # need to convert string to datetime
    #         present = datetime.strptime(start_day, "%Y-%m-%d") # need to convert string to datetime
    #         while(past.date() < present.date()): # if data_close pulls unnecessary dates ->date which is later than start_day, then drop whatever is unnecessary
    #                 data_close_array_csv_file = numpy.delete(data_close_array_csv_file, (len(data_close_array_csv_file)-one), axis=zero) # delete row of numpy array using index
    #                 column_name_range  = numpy.delete(column_name_range , (len(column_name_range)-one), axis=zero) # delete row of numpy array using index
    #                 past_date_comparison=numpy.array(column_name_range)[-1] # get last date of array and test if it is later than start day
    #                 past = datetime.strptime(past_date_comparison, "%d/%m/%Y") # need to convert string to datetime
    #         read_csv_rawdata_dataframe.loc[row_idx_stock_name,column_name_range] = data_close_array_csv_file # replace zerores # inside of brackets [[index of row],[index of col]] both need to be integers # column_name_range and data_close_array_csv_file need to be same length
    #         dates_of_columns_of_read_csv_rawdata_dataframe=numpy.array(read_csv_rawdata_dataframe.columns)[one:]
    #         full_range_of_variables_dataframe_data_close_pre =numpy.array(DataFrame(data=read_csv_rawdata_dataframe.iloc[row_idx_stock_name, one:].values)).flatten() # get stock names from csv.file
    #         full_range_of_variables_dataframe_data_close_pre[full_range_of_variables_dataframe_data_close_pre==zero] = numpy.nan# replace all zeros with NAN
    #         read_csv_rawdata_dataframe.loc[row_idx_stock_name,dates_of_columns_of_read_csv_rawdata_dataframe]=full_range_of_variables_dataframe_data_close_pre
    #         read_csv_rawdata_dataframe.to_csv(joined_path_csv_data, index= False) #, header= False # it does append new files to existing csv.file
    #         read_csv_rawdata_dataframe=[]
    #         saved_column_stocknames=[]
    #         row_idx_stock_name=[]
    #         data_close_array_csv_file=[]
    #         column_name_range_pre=[]
    #         column_name_range=[]
    #         past_date_comparison=[]
    #         past=[]
    #         present=[]
    #         start_day_interm=[]
    #         row_idx_later_day=[]

    #     else:
    #         if os_path_joined_path_csv_data_not_exist==one:
    #         # if rawdata csv.file doesn't exist, then it creates a new one
    #         #create a data_close rawdata set and save as csv.file
    #             dataframe_data_close=[]
    #             dataframe_data_close_pre=[]
    #             data_close_numpyarray=[]
    #             index_data_close=[]
    #             range_of_business_days=[]
    #             length_range_of_business_days=[]
    #             array_of_zeros=[]
    #             dataframe_data_close_pre=[]
    #             full_range_of_variables_dataframe_data_close_pre=[]
    #             length_dataframe_data_close_second=[]
    #             index_data_close_converted_dates=[]
    #             range_of_business_days_converted_numpyarray=[]
    #             past_date_comparison=[]
    #             present=[]
    #             row_idx_later_day=[]
    #             # if data_close is too young, continue with next stock
    #             if data_close.size < five:#it's empty! # determine if data is empty i.e. stock is not registered with yahoo
    #                 print('yahoo data cannot be downloaded')
    #                 continue    # continue here means skipping iteration
    #             index_data_close = data_close.index # setup dataframe
    #             index_data_close=numpy.array(index_data_close)
    #             index_data_close_converted_dates = pandas.to_datetime(index_data_close).strftime('%d/%m/%Y') # convert dates to string and save only d/m/Y
    #             index_data_close_converted_dates_numpyarray=numpy.array(index_data_close_converted_dates)
    #             # create dates business days from start_day to today
    #             range_of_business_days=pandas.bdate_range(start=start_day, end=today)[::-1] # range of business days
    #             range_of_business_days_converted=pandas.to_datetime(range_of_business_days).strftime('%d/%m/%Y') # convert dates to string and save only d/m/Y
    #             length_range_of_business_days=len(range_of_business_days_converted)# get length of business days
    #             array_of_zeros=numpy.zeros(length_range_of_business_days) # create 1D array of zeroes
    #             dataframe_data_close_pre = DataFrame(index=range_of_business_days_converted,data=array_of_zeros) # setup dataframe
    #             data_close_numpyarray=numpy.array(data_close)
    #             range_of_business_days_converted_numpyarray=numpy.array(range_of_business_days_converted)[-1]
    #             # delete last days of stock in data_close such as 14/05/2015 when it is older than in 'range_of_business_days_converted' such as 15/05/2015
    #             past_date_comparison=numpy.array(index_data_close_converted_dates)[-1] # get last date of array and test if it is later than start day
    #             past = datetime.strptime(past_date_comparison, "%d/%m/%Y") # need to convert string to datetime
    #             present = datetime.strptime(range_of_business_days_converted_numpyarray, "%d/%m/%Y") # need to convert string to datetime
    #             while(past.date() < present.date()):
    #                 data_close_numpyarray = numpy.delete(data_close_numpyarray, (len(data_close_numpyarray)-one), axis=zero) # delete row of numpy array using index
    #                 index_data_close_converted_dates  = numpy.delete(index_data_close_converted_dates , (len(index_data_close_converted_dates)-one), axis=zero) # delete row of numpy array using index
    #                 past_date_comparison=numpy.array(index_data_close_converted_dates)[-1] # get last date of array and test if it is later than start day
    #                 past = datetime.strptime(past_date_comparison, "%d/%m/%Y") # need to convert string to datetime
    #             dataframe_data_close_pre.loc[index_data_close_converted_dates,zero] = data_close_numpyarray# add data to dataframe
    #             full_range_of_variables_dataframe_data_close_pre=numpy.array(dataframe_data_close_pre)
    #             full_range_of_variables_dataframe_data_close_pre[full_range_of_variables_dataframe_data_close_pre==zero] = numpy.nan# replace all zeros with NAN
    #             dataframe_data_close = DataFrame(index=range_of_business_days_converted,data=full_range_of_variables_dataframe_data_close_pre) # setup dataframe
    #             dataframe_data_close=dataframe_data_close.transpose() # transpose it, change row and columns
    #             dataframe_data_close.rename(index={zero:x},inplace=True)#rename index value from zero to stock name
    #             dataframe_data_close.to_csv(joined_path_csv_data, sep=',',encoding='utf-8',header='true') # create a csv.file
    #             dataframe_data_close=[]
    #             dataframe_data_close_pre=[]
    #             data_close_numpyarray=[]
    #             index_data_close=[]
    #             index_data_close_converted_dates=[]
    #             range_of_business_days=[]
    #             length_range_of_business_days=[]
    #             array_of_zeros=[]
    #             dataframe_data_close_pre=[]
    #             full_range_of_variables_dataframe_data_close_pre=[]
    #             length_dataframe_data_close_second=[]
    #             range_of_business_days_converted_numpyarray=[]
    #             past_date_comparison=[]
    #             present=[]
    #             row_idx_later_day=[]

    #         if stock_doesnot_exist_rawdata==one:
    #         # if rawdata csv.file exist, but stock does not exist in rawdata csv.file  
    #             dataframe_data_close=[]
    #             col_idx_dataframe=[]
    #             row_idx_dataframe=[]
    #             data_close_numpyarray=[]
    #             data_close_numpyarray_transpose=[]
    #             row_idx_dataframe_one=[]
    #             dataframe_data_close_second=[]
    #             range_of_business_days=[]
    #             length_range_of_business_days=[]
    #             array_of_zeros=[]
    #             dataframe_data_close_pre=[]
    #             full_range_of_variables_dataframe_data_close_pre=[]
    #             length_dataframe_data_close_second=[]
    #             index_data_close=[]
    #             index_data_close_converted_dates=[]
    #             range_of_business_days_converted_numpyarray=[]
    #             past_date_comparison=[]
    #             present=[]
    #             row_idx_later_day=[]
    #             # if data_close is too young, continue with next stock
    #             if data_close.size < five:#it's empty! # determine if data is empty i.e. stock is not registered with yahoo
    #                 print('yahoo data cannot be downloaded')
    #                 continue    # continue here means skipping iteration
    #             dataframe_data_close = pandas.read_csv(joined_path_csv_data) # read current data set from csv.file
    #             col_idx_dataframe=len(dataframe_data_close.columns) #first index is zero, therefore len('var') needs to be substracted by one.  
    #             # create dates business days from start_day to today
    #             range_of_business_days=pandas.bdate_range(start=start_day, end=today)[::-1] # range of business days
    #             range_of_business_days_converted=pandas.to_datetime(range_of_business_days).strftime('%d/%m/%Y') # convert dates to string and save only d/m/Y
    #             length_range_of_business_days=len(range_of_business_days_converted)# get length of business days
    #             array_of_zeros=numpy.zeros(length_range_of_business_days) # create 1D array of zeroes
    #             dataframe_data_close_pre = DataFrame(index=range_of_business_days_converted,data=array_of_zeros) # setup dataframe
    #             data_close_numpyarray=numpy.array(data_close)# data from new stock
    #             index_data_close = data_close.index # setup dataframe
    #             index_data_close=numpy.array(index_data_close)
    #             index_data_close_converted_dates = pandas.to_datetime(index_data_close).strftime('%d/%m/%Y') # convert dates to string and save only d/m/Y
    #             index_data_close_converted_dates_numpyarray=numpy.array(index_data_close_converted_dates)
    #             range_of_business_days_converted_numpyarray=numpy.array(range_of_business_days_converted)[-1]
    #             # delete last days of stock in data_close such as 14/05/2015 when it is older than in 'range_of_business_days_converted' such as 15/05/2015
    #             past_date_comparison=numpy.array(index_data_close_converted_dates)[-1] # get last date of array and test if it is later than start day
    #             past = datetime.strptime(past_date_comparison, "%d/%m/%Y") # need to convert string to datetime
    #             present = datetime.strptime(range_of_business_days_converted_numpyarray, "%d/%m/%Y") # need to convert string to datetime
    #             while(past.date() < present.date()):
    #                 data_close_numpyarray = numpy.delete(data_close_numpyarray, (len(data_close_numpyarray)-one), axis=zero) # delete row of numpy array using index
    #                 index_data_close_converted_dates  = numpy.delete(index_data_close_converted_dates , (len(index_data_close_converted_dates)-one), axis=zero) # delete row of numpy array using index
    #                 past_date_comparison=numpy.array(index_data_close_converted_dates)[-1] # get last date of array and test if it is later than start day
    #                 past = datetime.strptime(past_date_comparison, "%d/%m/%Y") # need to convert string to datetime
    #             dataframe_data_close_pre.loc[index_data_close_converted_dates,zero] = data_close_numpyarray# add data to dataframe
    #             full_range_of_variables_dataframe_data_close_pre=numpy.array(dataframe_data_close_pre)
    #             full_range_of_variables_dataframe_data_close_pre[full_range_of_variables_dataframe_data_close_pre==zero] = numpy.nan# replace all zeros with NAN
    #             dataframe_data_close = DataFrame(index=range_of_business_days_converted,data=full_range_of_variables_dataframe_data_close_pre) # setup dataframe
    #             dataframe_data_close=dataframe_data_close.transpose() # transpose it, change row and columns
    #             dataframe_data_close.rename(index={zero:x},inplace=True)#rename index value from zero to stock name
    #             length_dataframe_data_close_second=len(dataframe_data_close.columns) #first index is zero, therefore len('var') needs to be substracted by one.
    #             if length_dataframe_data_close_second>col_idx_dataframe: # delete columns outside of date range
    #                 dataframe_data_close.drop(dataframe_data_close.columns[col_idx_dataframe:], axis=1, inplace=True)# delete columns in dataframe
    #             dataframe_data_close.to_csv(joined_path_csv_data, mode='a', header=False) # it does append new files to existing csv.file
    #             dataframe_data_close=[]
    #             col_idx_dataframe=[]
    #             row_idx_dataframe=[]
    #             data_close_numpyarray=[]
    #             data_close_numpyarray_transpose=[]
    #             row_idx_dataframe_one=[]
    #             dataframe_data_close_second=[]
    #             range_of_business_days=[]
    #             length_range_of_business_days=[]
    #             array_of_zeros=[]
    #             dataframe_data_close_pre=[]
    #             full_range_of_variables_dataframe_data_close_pre=[]
    #             length_dataframe_data_close_second=[]
    #             range_of_business_days_converted_numpyarray=[]
    #             past_date_comparison=[]
    #             present=[]
    #             row_idx_later_day=[]

        #create a dataset including candle sticks only within 100 business days, otherwise dataset gets too big

    #     ### add companies indicies in here to the best 20 stocks    
    #     if os.path.exists(joined_path_csv_data_stock_indicies):
    #         read_csv_stock_indicies_dataframe=[]
    #         saved_column_stocknames_stock_indicies=[]
    #         row_idx_stock_name_stock_indicies=[]
    #         dataframe_stock_indicies=[]
    #         dataframe_stock_indicies=[]
    #         length_read_csv_stock_indicies_dataframe=[]
    #         length_column_of_indicies=[]
    #         number_difference=[]
    #         max_column=[]
    #         build_range=[]
    #         read_csv_stock_indicies_dataframe = DataFrame()
    #         read_csv_stock_indicies_dataframe = pandas.read_csv(joined_path_csv_data_stock_indicies) # read data from csv.file
    #         saved_column_stocknames_stock_indicies =numpy.array(DataFrame(data=read_csv_stock_indicies_dataframe.iloc[:, one].values)).flatten() # get stock names from csv.file
    #         row_idx_stock_name_stock_indicies=numpy.array(numpy.where(saved_column_stocknames_stock_indicies == x)).flatten() # find row index of stock name x
    #         #add new stock into csv.file
    #         if row_idx_stock_name_stock_indicies.size == zero:#it's empty! 
    #             bb=[]
    #             save_stock_indicies=[]
    #             stock_id_info=[]
    #             stock_id=[]
    #             dataframe_stock_indicies=[]
    #             stock_id=yf.Ticker(x)
    #             for bb in name_of_indicies:
    #                 if bb is None:
    #                     print(bb)
    #                     lookuperror=na_variable
    #                     save_stock_indicies=numpy.append(save_stock_indicies,lookuperror) # it is a 1D array
    #                 else:
    #                     try: # to avoid error (Exceptions) in Pandas while still getting data.
    #                         print(bb)
    #                         stock_id_info=stock_id.info[bb]
    #                         if stock_id_info is None:
    #                             lookuperror=na_variable
    #                             save_stock_indicies=numpy.append(save_stock_indicies,lookuperror) # it is a 1D array
    #                             continue
    #                     except LookupError:  
    #                         lookuperror=na_variable
    #                         save_stock_indicies=numpy.append(save_stock_indicies,lookuperror) # it is a 1D array
    #                         continue
    #                     else:
    #                         save_stock_indicies=numpy.append(save_stock_indicies,stock_id_info) # it is a 1D array
    #             #save in new csv.file
    #             counterbb=counterbb+one
    #             index_range_stock_indicies=numpy.arange(one,len(name_of_indicies)+one,one) # create a number range according to length of dates in data_close
    #             dataframe_stock_indicies = DataFrame()
    #             dataframe_stock_indicies.loc[counterbb,zero]=x
    #             dataframe_stock_indicies.loc[counterbb,index_range_stock_indicies]=save_stock_indicies
    #             dataframe_stock_indicies.to_csv(joined_path_csv_data_stock_indicies, mode='a', header=False)
    #             dataframe_stock_indicies=[]
    #             read_csv_stock_indicies_dataframe=[]

    #         #code below still have error ->the way it saves new indicy value into csv.file            
    #         # add new indicy into existing csv.file still have error ->the way it saves new indicy value into csv.file
    #         read_csv_stock_indicies_dataframe = DataFrame()
    #         read_csv_stock_indicies_dataframe = pandas.read_csv(joined_path_csv_data_stock_indicies) # read data from csv.file
    #         length_read_csv_stock_indicies_dataframe=len(read_csv_stock_indicies_dataframe.columns[two:])
    #         length_column_of_indicies=len(name_of_indicies)
    #         if length_read_csv_stock_indicies_dataframe!=length_column_of_indicies:
    #             number_difference=length_column_of_indicies-length_read_csv_stock_indicies_dataframe
    #             max_column=number_difference+length_read_csv_stock_indicies_dataframe
    #             build_range=numpy.arange(length_read_csv_stock_indicies_dataframe,max_column,one)
    #             name_of_indicies_adj=numpy.array(name_of_indicies)[build_range]
    #             name_of_indicies_adj=list(name_of_indicies_adj)
    #             bb=[]
    #             save_stock_indicies=[]
    #             stock_id_info=[]
    #             stock_id=[]
    #             dataframe_stock_indicies=[]
    #             stock_id=yf.Ticker(x)
    #             for bb in name_of_indicies_adj:
    #                 if bb is None:
    #                     print(bb)
    #                     lookuperror=na_variable
    #                     save_stock_indicies=numpy.append(save_stock_indicies,lookuperror) # it is a 1D array
    #                 else:
    #                     try: # to avoid error (Exceptions) in Pandas while still getting data.
    #                         print(bb)
    #                         stock_id_info=stock_id.info[bb]
    #                         if stock_id_info is None:
    #                             lookuperror=na_variable
    #                             save_stock_indicies=numpy.append(save_stock_indicies,lookuperror) # it is a 1D array
    #                             continue
    #                     except LookupError:  
    #                         lookuperror=na_variable
    #                         save_stock_indicies=numpy.append(save_stock_indicies,lookuperror) # it is a 1D array
    #                         continue
    #                     else:
    #                         save_stock_indicies=numpy.append(save_stock_indicies,stock_id_info) # it is a 1D array
    #             #save in new csv.file
    #             counterbb2=counterbb2+one
    #             #index_range_stock_indicies=numpy.arange(one,len(name_of_indicies)+one,one) # create a number range according to length of dates in data_close
    #             #dataframe_stock_indicies = DataFrame()
    #             #dataframe_stock_indicies.loc[counterbb2,zero]=x
    #             read_csv_stock_indicies_dataframe.loc[counterbb2,build_range]=save_stock_indicies
    #             read_csv_stock_indicies_dataframe.to_csv(joined_path_csv_data_stock_indicies, sep=',',encoding='utf-8',header='true') # create a csv.file
    #             dataframe_stock_indicies=[]
    #             read_csv_stock_indicies_dataframe=[]
    #            # code above still have error ->the way it saves new indicy value into csv.file

    #     else: #still part of getting indicies
    #         bb=[]
    #         save_stock_indicies=[]
    #         stock_id_info=[]
    #         stock_id=[]
    #         dataframe_stock_indicies=[]
    #         stock_id=yf.Ticker(x)
    #         for bb in name_of_indicies:
    #                 if bb is None:
    #                     lookuperror=na_variable
    #                     save_stock_indicies=numpy.append(save_stock_indicies,lookuperror) # it is a 1D array
    #                 else:
    #                     try: # to avoid error (Exceptions) in Pandas while still getting data.
    #                         stock_id_info=stock_id.info[bb]
    #                         if stock_id_info is None:
    #                             lookuperror=na_variable
    #                             save_stock_indicies=numpy.append(save_stock_indicies,lookuperror) # it is a 1D array
    #                             continue
    #                     except LookupError:  
    #                         lookuperror=na_variable
    #                         save_stock_indicies=numpy.append(save_stock_indicies,lookuperror) # it is a 1D array
    #                         continue
    #                     else:
    #                         save_stock_indicies=numpy.append(save_stock_indicies,stock_id_info) # it is a 1D array
    #
    #         #save in new csv.file
    #         counterbb=counterbb+one
    #         index_range_stock_indicies=numpy.arange(one,len(name_of_indicies)+one,one) # create a number range according to length of dates in data_close
    #         dataframe_stock_indicies = DataFrame() # setup dataframe
    #         dataframe_stock_indicies.loc[counterbb,zero]=x
    #         dataframe_stock_indicies.loc[counterbb,index_range_stock_indicies]=save_stock_indicies
    #         column_names_stock_indicies=numpy.append(market_name,name_of_indicies)
    #         dataframe_stock_indicies.columns=column_names_stock_indicies #stock name will be saved as column name 
    #         dataframe_stock_indicies.to_csv(joined_path_csv_data_stock_indicies, sep=',',encoding='utf-8',header='true') # create a csv.file
    #         dataframe_stock_indicies=[]
    #         counterbb=zero


    #     ### From here only use data_close, data_open, data_high or data_low but not "data" itself, because I need to
    #     #delete NANs from dataset. Still cleaning up the data for further analysis.
    #     #data_close=data.Close[::-1]
    #     #data_open=data.Open[::-1]
    #     #data_high=data.High[::-1]
    #     #data_low=data.Low[::-1]   
    #     #   subtract dates to get number of days
    #     #   date1=datetime.fromisoformat(today)
    #     #   date2=datetime.fromisoformat(start_day)  
    #     #   days_starttoend =  abs((date1 - date2).days)

    #     ### Pull data_close data from rawdata csv.file if stock is available in rawdata csv.file, build a new data_close and overwrite old data_close. If not, leave old data_close as it is and don't overwrite it.
    #     read_csv_rawdata_dataframe=[]
    #     saved_column_stocknames=[]
    #     row_idx_stock_name=[]

    #     if stock_exists_rawdata==one:
    #             close_data_array_dataframe=[]
    #             read_csv_rawdata_dataframe = pandas.read_csv(joined_path_csv_data) # read data from csv.file
    #             saved_column_stocknames =numpy.array(DataFrame(data=read_csv_rawdata_dataframe.iloc[:, zero].values)).flatten() # get stock names from csv.file
    #             row_idx_stock_name=numpy.array(numpy.where(saved_column_stocknames == x)).flatten() # find row index of stock name x
    #             saved_stock_values =numpy.array(DataFrame(data=read_csv_rawdata_dataframe.iloc[row_idx_stock_name, one:].values)).flatten() # pull all values of specific stock -> value will be saved to column zero
    #             saved_stock_name =saved_column_stocknames[row_idx_stock_name] # pull stock name -> saved as column name
    #             saved_all_dates =numpy.array(DataFrame(data=read_csv_rawdata_dataframe.columns)).flatten()[1:] # pull all dates -> saved as index
    #             close_data_array_dataframe=DataFrame(index = saved_all_dates) # setup dataframe and save saved_all_dates as index
    #             close_data_array_dataframe[zero]=saved_stock_values # stock values will be saved at column zero
    #             #close_data_array_dataframe.columns=saved_stock_name #stock name will be saved as column name 
    #             data_close_transpose=close_data_array_dataframe.T # convert pandas.frame.dataframe to pandas.series.series
    #             data_close_to_series_series=data_close_transpose.squeeze(axis=0)# convert pandas.frame.dataframe to pandas.series.series
    #             data_close=data_close_to_series_series # data_close is overwritten


    #     read_csv_rawdata_dataframe=[]
    #     saved_column_stocknames=[]
    #     row_idx_stock_name=[]        

        #### prepare data to enter analysis
        # determine if data contains any NAN, get rid of that day if a particular day contains a NAN
        nan_data=numpy.asarray(data_close)
        nan_data_indx=numpy.argwhere(numpy.isnan(nan_data))
        nan_data_indx=nan_data_indx.reshape(-1)
        data_close=data_close.drop(data_close.index[nan_data_indx]) 
        #data_open=data_open.drop(data_open.index[nan_data_indx]) 
        #data_high=data_high.drop(data_high.index[nan_data_indx]) 
        #data_low=data_low.drop(data_low.index[nan_data_indx]) 


        length_data=len(data_close)

        ### determine if stock is young (Year 1 [240d] < stock age <Years 5 [1200d]) 
        if (length_data>Y5):
            length_data_young=Y5
        else:
            length_data_young=length_data

        # create variables for various mean
            #calc mean200, mean50,mean20,meanind and create list
            #totaldays200 = lenth_data - length_mean200 -  limit
            #totaldays50 = lenth_data - length_mean50 -  limit
            #totaldays20 = lenth_data - length_mean20 -  limit
            #totaldaysind = lenth_data - length_meanind -  limit

        mean_200=[]
        mean_50=[]
        mean_20=[]
        mean_ind=[]
        for xx in range(length_data):
            #print(xx+(length_mean200))
            mean200=numpy.mean(data_close[xx:(xx+(length_mean200))])
            mean_200.append(mean200)
        for xx in range(length_data):
            mean50=numpy.mean(data_close[xx:(xx+(length_mean50))])
            mean_50.append(mean50)
        for xx in range(length_data):
            mean20=numpy.mean(data_close[xx:(xx+(length_mean20))])
            mean_20.append(mean20)
        for xx in range(length_data):
            meanind=numpy.mean(data_close[xx:(xx+(length_meanind))])
            mean_ind.append(meanind)
        # Note: when using for-loop create list as outout. need to convert list to numpy.array then it can be added to dataframe. dataframe is easy to plot.
        #convert list to array and add it into dataframe
        mean_200_array=numpy.asarray(mean_200) # the mean data created by for-loop will be converted to an array
        mean_50_array=numpy.asarray(mean_50) # the mean data created by for-loop will be converted to an array
        mean_20_array=numpy.asarray(mean_20) # the mean data created by for-loop will be converted to an array
        mean_ind_array=numpy.asarray(mean_ind) # the mean data created by for-loop will be converted to an array
        #dates_200_series=data_close # data is a series
        #dates_all_frame=dates_200_series.to_frame()
        #dates_all_frame['Mean200']=mean_200_array
        #dates_all_frame['Mean50']=mean_50_array
        #dates_all_frame['Mean20']=mean_20_array
        #dates_all_frame['Meanind']=mean_ind_array
        #print(dates_all_frame)
        #Plot data
        #dates_all_frame.plot()
        #plt.show()

        #### analysis of mean200,50,20 and ind are over, under, touching to closing price using various timeframes (1D,5D,2W,1M,3M,6M,1YR,5YR,ALL)
        #when mean is under stock price = 2, when mean is touching stock price = 1,when mean is over stock price = 0

        ### determine mean200,mean50,mean20 and meanind for 1D time periods
        # 200  
        if (mean_200_array[zero] < data_close[zero]): 
            d1_mean200=under
        elif (mean_200_array[zero] > data_close[zero]):
            d1_mean200=over    
        else: 
            d1_mean200=touching 
        # 50
        if (mean_50_array[zero] < data_close[zero]): 
            d1_mean50=under
        elif (mean_50_array[zero] > data_close[zero]): 
            d1_mean50=over 
        else: 
            d1_mean50=touching
        # 20
        if (mean_20_array[zero] < data_close[zero]): 
            d1_mean20=under

        elif (mean_20_array[zero] > data_close[zero]): 
            d1_mean20=over
        else:
            d1_mean20=touching 
        # ind
        if (mean_ind_array[zero] < data_close[zero]): 
            d1_meanind=under

        elif (mean_ind_array[zero] > data_close[zero]): 
            d1_meanind=over
        else:
            d1_meanind=touching 

        ### determine mean200,mean50,mean20 and meanind for all time periods (>1D).
        counter=0
        for xx in range(len(timeperiod)): 
            counter=counter+one
            i=timeperiod[xx]
            # if stock is young and is not on the market for long. I correct it to instead of 1200 (5years) to be x length (<5years). time scale needs to be >1years as the minimum
            if (length_data<=i):
                i=length_data-one
            # if stock is less than 1 year on the market. I will put all values to zero
            if (length_data<y1_1):#240+1 day as a buffer
                break

            # Mean 200
            start_range=[]
            end_range=[]
            mean_min_max=[]
            min_range=int(numpy.nanmin(data_close[zero:i])*high_rand_number) # if conde encounter error, then naming of the stock is possibly wrong
            max_range=int(numpy.nanmax(data_close[zero:i])*high_rand_number)
            start_range=int((numpy.array(data_close[i]))*high_rand_number)# if code encounters error, then stock is less than 1year old and to young to proceed
            end_range=int((numpy.array(data_close[zero]))*high_rand_number)
            #get uptrend or downtrend of stock
            if (start_range > end_range): # stock is in a downtrend 
                data_close_trend=zero
            else: # stock is in an uptrend
                data_close_trend=two
            #get uptrend or downtrend of mean
            start_range=[]
            end_range=[]
            mean_min_max=[]
            start_range=int((numpy.array(mean_200_array[i]))*high_rand_number)
            end_range=int((numpy.array(mean_200_array[zero]))*high_rand_number)
            #mean_min_max=int((numpy.mean(numpy.array([start_range,end_range]), axis=0 )))
            if (start_range > end_range): # stock is in a downtrend 
                #if start_range >= mean_min_max >= end_range:# range can only handle integers and non floating (decimal) places. To overcome issue the value can be multiplied with 100.000.000 to keep accuracy.
                data_mean_trend=zero # stock is consolidating
                #else:
                #    data_close_trend=one # stock is in a downtrend
            else: # stock is in an uptrend
                #if start_range <= mean_min_max <= end_range:
                data_mean_trend=two # stock is consolidating
                #else:
                #    data_mean_trend=one  # stock is in an uptrend 
            #prepare for for-loop
            m_placeholder=[]
            time_meanarray=[]
            m_placeholder=[]
            time_meanint=[]
            time_mean=[]
            ones_time_mean=[]
            minusones_time_mean=[]
            zeroes_time_mean=[]
            ones_time_mean_array=[]
            minusones_time_mean_array=[]
            zeroes_time_mean_array=[]
            all_time_mean=[]
            max_all_time_mean=[]
            time_mean_result=[]
            # determine if mean is under, over or touching the stock price
            for xxx in range(i):
                m_placeholder=int(mean_200_array[xxx]*high_rand_number)
                if (m_placeholder < min_range): 
                    time_meanint=over
                elif (m_placeholder > max_range): 
                    time_meanint=under
                else: # mean is touching
                    time_meanint=touching
                time_meanarray=numpy.append(time_meanint,time_meanarray)
            time_mean=time_meanarray.tolist()
            under_time_mean=time_mean.count(two) #under
            touching_time_mean=time_mean.count(one) #touching
            over_time_mean=time_mean.count(zero) #over
            under_time_mean_array=numpy.asarray(under_time_mean)
            touching_time_mean_array=numpy.asarray(touching_time_mean)
            over_time_mean_array=numpy.asarray(over_time_mean)
            all_time_mean=[under_time_mean_array,touching_time_mean_array,over_time_mean_array]
            max_all_time_mean = numpy.nanmax(all_time_mean)
            max_position=[i for i, j in enumerate(all_time_mean) if j == max_all_time_mean] # find position of max
            length_max_position=len(max_position)
            if (length_max_position == one): 
                max_position=int(numpy.array(max_position))#max_position=int(''.join(str(i) for i in max_position))
            else:
                max_position=[]
            # determine which position contains the maximum number, if two number are the same, then mean is in touching
            if (length_max_position == one): 
                if (max_position == under): # mean is under
                        time_mean_result=under
                elif (max_position == touching): # mean is in touching
                        time_mean_result=touching
                elif (max_position == over): # mean is over
                    time_mean_result=over 
            else:
                time_mean_result=touching
            # add numbers to array
            if (counter == one):
                time_mean_result200=time_mean_result
                data_close_trend_result200=data_close_trend
                data_mean_trend_result200=data_mean_trend
            else:
                time_mean_result200=numpy.append(time_mean_result200,time_mean_result)
                data_close_trend_result200=numpy.append(data_close_trend_result200,data_close_trend)
                data_mean_trend_result200=numpy.append(data_mean_trend_result200,data_mean_trend)

            # Mean 50
            start_range=[]
            end_range=[]
            mean_min_max=[]
            min_range=int(numpy.nanmin(data_close[zero:i])*high_rand_number)
            max_range=int(numpy.nanmax(data_close[zero:i])*high_rand_number)
            start_range=int((numpy.array(data_close[i]))*high_rand_number)
            end_range=int((numpy.array(data_close[zero]))*high_rand_number)
            #get uptrend or downtrend of stock
            if (start_range > end_range): # stock is in a downtrend 
                data_close_trend=zero 
            else: # stock is in an uptrend
                data_close_trend=two
            #get uptrend or downtrend of mean
            start_range=[]
            end_range=[]
            mean_min_max=[]
            start_range=int((numpy.array(mean_50_array[i]))*high_rand_number)
            end_range=int((numpy.array(mean_50_array[zero]))*high_rand_number)
            mean_min_max=int((numpy.mean(numpy.array([start_range,end_range]), axis=0 )))
            if (start_range > end_range): # stock is in a downtrend 
                data_mean_trend=zero
            else: # stock is in an uptrend
                data_mean_trend=two
            #prepare for for-loop
            m_placeholder=[]
            time_meanarray=[]
            m_placeholder=[]
            time_meanint=[]
            time_mean=[]
            ones_time_mean=[]
            minusones_time_mean=[]
            zeroes_time_mean=[]
            ones_time_mean_array=[]
            minusones_time_mean_array=[]
            zeroes_time_mean_array=[]
            all_time_mean=[]
            max_all_time_mean=[]
            time_mean_result=[] 
            # determine if mean is under, over or touching the stock price
            for xxx in range(i):
                m_placeholder=int(mean_50_array[xxx]*high_rand_number)
                #print(m_placeholder,min_range,max_range)
                if (m_placeholder < min_range): 
                    time_meanint=over
                elif (m_placeholder > max_range): 
                    time_meanint=under
                else: # mean is touching
                    time_meanint=touching   
                time_meanarray=numpy.append(time_meanint,time_meanarray)
            time_mean=time_meanarray.tolist()
            under_time_mean=time_mean.count(two) #under
            touching_time_mean=time_mean.count(one) #touching
            over_time_mean=time_mean.count(zero) #over
            under_time_mean_array=numpy.asarray(under_time_mean)
            touching_time_mean_array=numpy.asarray(touching_time_mean)
            over_time_mean_array=numpy.asarray(over_time_mean)
            all_time_mean=[under_time_mean_array,touching_time_mean_array,over_time_mean_array]
            max_all_time_mean = numpy.nanmax(all_time_mean)
            max_position=[i for i, j in enumerate(all_time_mean) if j == max_all_time_mean] # find position of max
            length_max_position=len(max_position)
            if (length_max_position == one): 
                max_position=int(numpy.array(max_position))#max_position=int(''.join(str(i) for i in max_position))
            else:
                max_position=[]
            # determine which position contains the maximum number, if two number are the same, then mean is in touching
            if (length_max_position == one): 
                if (max_position == under): # mean is under
                        time_mean_result=under
                elif (max_position == touching): # mean is in touching
                        time_mean_result=touching
                elif (max_position == over): # mean is over
                    time_mean_result=over 
            else:
                time_mean_result=touching
            # add numbers to array
            if (counter == one):
                time_mean_result50=time_mean_result
                data_close_trend_result50=data_close_trend
                data_mean_trend_result50=data_mean_trend
            else:
                time_mean_result50=numpy.append(time_mean_result50,time_mean_result)
                data_close_trend_result50=numpy.append(data_close_trend_result50,data_close_trend)
                data_mean_trend_result50=numpy.append(data_mean_trend_result50,data_mean_trend)


            # Mean 20
            start_range=[]
            end_range=[]
            mean_min_max=[]
            min_range=int(numpy.nanmin(data_close[zero:i])*high_rand_number)
            max_range=int(numpy.nanmax(data_close[zero:i])*high_rand_number)
            start_range=int((numpy.array(data_close[i]))*high_rand_number)
            end_range=int((numpy.array(data_close[zero]))*high_rand_number)
            #get uptrend or downtrend of stock
            if (start_range > end_range): # stock is in a downtrend 
                data_close_trend=zero
            else: # stock is in an uptrend
                data_close_trend=two
            #get uptrend or downtrend of mean
            start_range=[]
            end_range=[]
            mean_min_max=[]
            start_range=int((numpy.array(mean_20_array[i]))*high_rand_number)
            end_range=int((numpy.array(mean_20_array[zero]))*high_rand_number)
            if (start_range > end_range): # stock is in a downtrend 
                data_mean_trend=zero
            else: # stock is in an uptrend
                data_mean_trend=two
            #prepare for for-loop
            m_placeholder=[]
            time_meanarray=[]
            m_placeholder=[]
            time_meanint=[]
            time_mean=[]
            ones_time_mean=[]
            minusones_time_mean=[]
            zeroes_time_mean=[]
            ones_time_mean_array=[]
            minusones_time_mean_array=[]
            zeroes_time_mean_array=[]
            all_time_mean=[]
            max_all_time_mean=[]
            time_mean_result=[] 
            # determine if mean is under, over or touching the stock price
            for xxx in range(i):
                m_placeholder=int(mean_20_array[xxx]*high_rand_number)
                #print(m_placeholder,min_range,max_range)
                if (m_placeholder < min_range): 
                    time_meanint=over
                elif (m_placeholder > max_range): 
                    time_meanint=under
                else:# mean is touching
                    time_meanint=touching  
                time_meanarray=numpy.append(time_meanint,time_meanarray)
            time_mean=time_meanarray.tolist()
            under_time_mean=time_mean.count(two) #under
            touching_time_mean=time_mean.count(one) #touching
            over_time_mean=time_mean.count(zero) #over
            under_time_mean_array=numpy.asarray(under_time_mean)
            touching_time_mean_array=numpy.asarray(touching_time_mean)
            over_time_mean_array=numpy.asarray(over_time_mean)
            all_time_mean=[under_time_mean_array,touching_time_mean_array,over_time_mean_array]
            max_all_time_mean = numpy.nanmax(all_time_mean)
            max_position=[i for i, j in enumerate(all_time_mean) if j == max_all_time_mean] # find position of max
            length_max_position=len(max_position)
            if (length_max_position == one): 
                max_position=int(numpy.array(max_position))#max_position=int(''.join(str(i) for i in max_position))
            else:
                max_position=[]
            # determine which position contains the maximum number, if two number are the same, then mean is in touching
            if (length_max_position == one): 
                if (max_position == under): # mean is under
                        time_mean_result=under
                elif (max_position == touching): # mean is in touching
                        time_mean_result=touching
                elif (max_position == over): # mean is over
                    time_mean_result=over 
            else:
                time_mean_result=touching
            # add numbers to array
            if (counter == one):
                time_mean_result20=time_mean_result
                data_close_trend_result20=data_close_trend
                data_mean_trend_result20=data_mean_trend
            else:
                time_mean_result20=numpy.append(time_mean_result20,time_mean_result)
                data_close_trend_result20=numpy.append(data_close_trend_result20,data_close_trend)
                data_mean_trend_result20=numpy.append(data_mean_trend_result20,data_mean_trend)

            # Mean ind
            start_range=[]
            end_range=[]
            mean_min_max=[]
            min_range=int(numpy.nanmin(data_close[zero:i])*high_rand_number)
            max_range=int(numpy.nanmax(data_close[zero:i])*high_rand_number)
            start_range=int((numpy.array(data_close[i]))*high_rand_number)
            end_range=int((numpy.array(data_close[zero]))*high_rand_number)
            #get uptrend or downtrend of stock
            if (start_range > end_range): # stock is in a downtrend 
                data_close_trend=zero
            else: # stock is in an uptrend
                data_close_trend=two
            #get uptrend or downtrend of mean
            start_range=[]
            end_range=[]
            mean_min_max=[]
            start_range=int((numpy.array(mean_ind_array[i]))*high_rand_number)
            end_range=int((numpy.array(mean_ind_array[zero]))*high_rand_number)
            if (start_range > end_range): # stock is in a downtrend 
                data_mean_trend=zero
            else: # stock is in an uptrend
                data_mean_trend=two
            #prepare for for-loop
            m_placeholder=[]
            time_meanarray=[]
            m_placeholder=[]
            time_meanint=[]
            time_mean=[]
            ones_time_mean=[]
            minusones_time_mean=[]
            zeroes_time_mean=[]
            ones_time_mean_array=[]
            minusones_time_mean_array=[]
            zeroes_time_mean_array=[]
            all_time_mean=[]
            max_all_time_mean=[]
            time_mean_result=[] 
            # determine if mean is under, over or touching the stock price
            for xxx in range(i):
                m_placeholder=int(mean_ind_array[xxx]*high_rand_number)
                #print(m_placeholder,min_range,max_range)
                if (m_placeholder < min_range): 
                    time_meanint=over
                elif (m_placeholder > max_range):
                    time_meanint=under
                else:# mean is touching
                    time_meanint=touching   
                time_meanarray=numpy.append(time_meanint,time_meanarray)
            time_mean=time_meanarray.tolist()
            under_time_mean=time_mean.count(two) #under
            touching_time_mean=time_mean.count(one) #touching
            over_time_mean=time_mean.count(zero) #over
            under_time_mean_array=numpy.asarray(under_time_mean)
            touching_time_mean_array=numpy.asarray(touching_time_mean)
            over_time_mean_array=numpy.asarray(over_time_mean)
            all_time_mean=[under_time_mean_array,touching_time_mean_array,over_time_mean_array]
            max_all_time_mean = numpy.nanmax(all_time_mean)
            max_position=[i for i, j in enumerate(all_time_mean) if j == max_all_time_mean] # find position of max
            length_max_position=len(max_position)
            if (length_max_position == one): 
                max_position=int(numpy.array(max_position))#max_position=int(''.join(str(i) for i in max_position))
            else:
                max_position=[]
            # determine which position contains the maximum number, if two number are the same, then mean is in touching
            if (length_max_position == one): 
                if (max_position == under): # mean is under
                        time_mean_result=under
                elif (max_position == touching): # mean is in touching
                        time_mean_result=touching
                elif (max_position == over): # mean is over
                    time_mean_result=over 
            else:
                time_mean_result=touching
            # add numbers to array
            if (counter == one):
                time_mean_resultind=time_mean_result
                data_close_trend_resultind=data_close_trend
                data_mean_trend_resultind=data_mean_trend
            else:
                time_mean_resultind=numpy.append(time_mean_resultind,time_mean_result)
                data_close_trend_resultind=numpy.append(data_close_trend_resultind,data_close_trend)
                data_mean_trend_resultind=numpy.append(data_mean_trend_resultind,data_mean_trend)
        # add three entities into one dataframe and convert to numpy.array out of it

        # if stock is less than 1 year on the market. I will put all values to zero
        if (length_data<y1_1):
            array_mean_200=[]
            array_mean_50=[]
            array_mean_20=[]
            array_mean_ind=[]
            array_mean_200=[zero,zero,zero,zero,zero,zero,zero]
            array_mean_50=[zero,zero,zero,zero,zero,zero,zero]
            array_mean_20=[zero,zero,zero,zero,zero,zero,zero]
            array_mean_ind=[zero,zero,zero,zero,zero,zero,zero]

        else:
            #mean 200
            df1=[]
            df2=[]
            df3=[]
            df4=[]
            df_series1 = pandas.Series(time_mean_result200)
            df1=df_series1.to_frame()
            df_series2 = pandas.Series(data_mean_trend_result200)
            df2=df_series2.to_frame()
            df_series3 = pandas.Series(data_close_trend_result200)
            df3=df_series3.to_frame()
            df4 = df1.astype(str)+ df2.astype(str)+df3.astype(str) 
            array_mean_200=numpy.array(df4)

            #mean 50
            df1=[]
            df2=[]
            df3=[]
            df4=[]
            df_series1 = pandas.Series(time_mean_result50)
            df1=df_series1.to_frame()
            df_series2 = pandas.Series(data_mean_trend_result50)
            df2=df_series2.to_frame()
            df_series3 = pandas.Series(data_close_trend_result50)
            df3=df_series3.to_frame()
            df4 = df1.astype(str)+ df2.astype(str)+df3.astype(str) 
            array_mean_50=numpy.array(df4)

            #mean 20
            df1=[]
            df2=[]
            df3=[]
            df4=[]
            df_series1 = pandas.Series(time_mean_result20)
            df1=df_series1.to_frame()
            df_series2 = pandas.Series(data_mean_trend_result20)
            df2=df_series2.to_frame()
            df_series3 = pandas.Series(data_close_trend_result20)
            df3=df_series3.to_frame()
            df4 = df1.astype(str)+ df2.astype(str)+df3.astype(str) 
            array_mean_20=numpy.array(df4)

            #mean ind
            df1=[]
            df2=[]
            df3=[]
            df4=[]
            df_series1 = pandas.Series(time_mean_resultind)
            df1=df_series1.to_frame()
            df_series2 = pandas.Series(data_mean_trend_resultind)
            df2=df_series2.to_frame()
            df_series3 = pandas.Series(data_close_trend_resultind)
            df3=df_series3.to_frame()
            df4 = df1.astype(str)+ df2.astype(str)+df3.astype(str) 
            array_mean_ind=numpy.array(df4)

        #### add min expected and return rate 
        # if stock is young and is not on the market for long, I correct it to instead of 1200 (5years) to be x length (<5years) and minimum is >1 year.
        y5_addminrr=[]
        y25_addminrr=[]
        y1_addminrr=[]
        m6_addminrr=[]
        end_date_price=[]
        y5_addminrr=Y5
        y25_addminrr=Y25
        y1_addminrr=Y1
        m6_addminrr=M6
        m1_addminrr=M1
        w2_addminrr=W2
        d5_addminrr=d5
        
        overwrite_value=zero
        if (length_data<=Y5):
            if (length_data<=Y25):
                if (length_data<=Y1):
                    if (length_data<=M6):
                        if (length_data<=M1):
                            if (length_data<=W2):
                                if (length_data<=d5):
                                    y5_addminrr=length_data-one
                                    y25_addminrr=length_data-one
                                    y1_addminrr=length_data-one
                                    m6_addminrr=length_data-one
                                    m1_addminrr=length_data-one
                                    w2_addminrr=length_data-one
                                    d5_addminrr=length_data-one
                                else:
                                    y5_addminrr=length_data-one
                                    y25_addminrr=length_data-one
                                    y1_addminrr=length_data-one
                                    m6_addminrr=length_data-one
                                    m1_addminrr=length_data-one
                                    w2_addminrr=length_data-one
                            else:
                                y5_addminrr=length_data-one
                                y25_addminrr=length_data-one
                                y1_addminrr=length_data-one
                                m6_addminrr=length_data-one
                                m1_addminrr=length_data-one
                        else:
                            y5_addminrr=length_data-one
                            y25_addminrr=length_data-one
                            y1_addminrr=length_data-one
                            m6_addminrr=length_data-one
                    else:
                        y1_addminrr=length_data-one
                        y25_addminrr=length_data-one
                        y5_addminrr=length_data-one
                        #overwrite_value=two # overwrite RR, CG and AVGVolume y5 and y2.5 to 0
                else:
                    y25_addminrr=length_data-one
                    y5_addminrr=length_data-one
                    #overwrite_value=one # overwrite RR and AVGVolume y5 to 0
                    overwrite_value=two # overwrite RR, CG and AVGVolume y5 and y2.5 to 0
            else:
                y5_addminrr=length_data-one
                overwrite_value=one # overwrite RR and AVGVolume y5 to 0
                
        # add min expected and return rate    
        end_date_price=data_close[zero]
        start_date_price_y5=data_close[y5_addminrr]
        start_date_price_y25=data_close[y25_addminrr]
        start_date_price_y1=data_close[y1_addminrr]
        start_date_price_m6=data_close[m6_addminrr]
        # calculate return rate by using Y5,Y2.5,Y1,M6 time intervals
        return_rate_perc_y5=[]
        return_rate_perc_y25=[]
        return_rate_perc_y1=[]
        return_rate_perc_m6=[]
        return_rate_perc_y5=(((end_date_price-start_date_price_y5)/start_date_price_y5)*hundred)/five
        return_rate_perc_y25=(((end_date_price-start_date_price_y25)/start_date_price_y25)*hundred)/two_five
        return_rate_perc_y1=(((end_date_price-start_date_price_y1)/start_date_price_y1)*hundred)/one
        return_rate_perc_m6=(((end_date_price-start_date_price_m6)/start_date_price_m6)*hundred)/point_five
        # the idea is that i want to make RR zero if stock is younger than y5 and y25 so it doesn't account for status overall. 
            #It still gives me capital gain calculation. 
            #However, the capital gain calculation won't be using the default time scale Y5 instead an adjusted time scale according to the age of the stock.
        if (overwrite_value==one):
            return_rate_perc_y5_adj=zero # overwrite RR y5 to 0
            return_rate_perc_y25_adj=return_rate_perc_y25
        elif (overwrite_value==two):
            return_rate_perc_y5_adj=zero # overwrite RR y5 and y2.5 to 0
            return_rate_perc_y25_adj=zero # overwrite RR y5 and y2.5 to 0
        else:
            return_rate_perc_y5_adj=return_rate_perc_y5
            return_rate_perc_y25_adj=return_rate_perc_y25

        all_return_rates=[return_rate_perc_m6,return_rate_perc_y1,return_rate_perc_y25_adj,return_rate_perc_y5_adj]
        # give points to stock. if above minimum expectation rate then 1. if return rate is >min and <10% it gets a 1. <20% it gets a 2 and so on. For all time intervals.
        xxxx=[]
        data_return_rate_=[]
        data_return_rate_pre=[]
        data_return_rate_all=[]
        counter2=zero
        for xxxx in all_return_rates:
            counter2=counter2+one
            if (xxxx > expenses_infl_intrate_yr_perc):
                if (xxxx < ten):
                    data_return_rate=one
                elif (xxxx < twenty):
                    data_return_rate=two
                elif (xxxx < thirty):
                    data_return_rate=three
                elif (xxxx < fourty):
                    data_return_rate=four
                elif (xxxx < fifty):
                    data_return_rate=five
                elif (xxxx < sixty):
                    data_return_rate=six   
                elif (xxxx < seventy):
                    data_return_rate=seven
                elif (xxxx < eighty):
                    data_return_rate=eight
                elif (xxxx < ninety):
                    data_return_rate=nine
                elif (xxxx < hundred):
                    data_return_rate=ten
                else:
                    data_return_rate=eleven                   
            else: # return rate is lower than minimum and are not interested in that (no capital gain in long-term perspective)
                data_return_rate=zero
            if (counter2 == one):
                data_return_rate_pre=data_return_rate
            else:
                data_return_rate_pre=numpy.append(data_return_rate_pre,data_return_rate)
                data_return_rate_int=data_return_rate_pre.astype(int)
                data_return_rate_all=data_return_rate_int.astype(str)

        #### capital gain in 5, 10 and 20 years (only uses 5 years of return rate as reference [return_rate_perc_y5]. if stock is young (<Y5) the next lower time scale will be applied)
        ii=[]
        capital_gain_pre1=[]
        data_capital_gain_pre=[]
        data_capital_gain_all=[]
        data_capital_gain_int=[]
        counter3=zero
        for ii in range(twenty):
                counter3=counter3+one
                if (counter3 == one):
                    capital_gain_pre1=(cap_start*((return_rate_perc_y5-exp_manag_perc-expenses_infl_intrate_yr_perc)/hundred))+cap_start-trans_fee
                elif (counter3 == five):
                    capital_gain_pre1=((capital_gain_pre1+add_cap)*((hundred+return_rate_perc_y5-exp_manag_perc-expenses_infl_intrate_yr_perc)/hundred))-trans_fee
                    capital_gain_y5=capital_gain_pre1
                elif (counter3 == ten):
                    capital_gain_pre1=((capital_gain_pre1+add_cap)*((hundred+return_rate_perc_y5-exp_manag_perc-expenses_infl_intrate_yr_perc)/hundred))-trans_fee
                    capital_gain_y10=capital_gain_pre1
                elif (counter3 == twenty):
                    capital_gain_pre1=((capital_gain_pre1+add_cap)*((hundred+return_rate_perc_y5-exp_manag_perc-expenses_infl_intrate_yr_perc)/hundred))-trans_fee
                    capital_gain_y20=capital_gain_pre1
                else:
                    capital_gain_pre1=((capital_gain_pre1+add_cap)*((hundred+return_rate_perc_y5-exp_manag_perc-expenses_infl_intrate_yr_perc)/hundred))-trans_fee
        data_capital_gain_pre=numpy.append(capital_gain_y5,capital_gain_y10)
        #data_capital_gain_pre=numpy.append(data_capital_gain_pre,capital_gain_y20)
        # display capital gain in thousands (10K)
        data_capital_gain_pre=data_capital_gain_pre/tenthousand
        # want to restrict integer from exceeding maximum
        system_maximum_value_one=system_maximum_value-one
        ii=[]
        counter3=zero
        for ii in data_capital_gain_pre:
            counter3=counter3+one
            if ii>system_maximum_value_one:
                data_capital_gain_cut_pre=system_maximum_value_one
            else:
                data_capital_gain_cut_pre=ii
            if (counter3 == one):
                data_capital_gain_cut=data_capital_gain_cut_pre
            else:
                data_capital_gain_cut=numpy.append(data_capital_gain_cut,data_capital_gain_cut_pre)
        data_capital_gain_int=data_capital_gain_cut.astype(int)
        data_capital_gain_all=data_capital_gain_int.astype(str)
        
        # adding volume data in here. Thinking of getting the average volume for different time scales such as D5,w2,m1, m6,y1,y25,y5
        #build arange for each time scale
        build_range_data_volume_y5=numpy.arange(zero,y5_addminrr,one)
        build_range_data_volume_y25=numpy.arange(zero,y25_addminrr,one)
        build_range_data_volume_y1=numpy.arange(zero,y1_addminrr,one)
        build_range_data_volume_m6=numpy.arange(zero,m6_addminrr,one)
        build_range_data_volume_m1=numpy.arange(zero,m1_addminrr,one)
        build_range_data_volume_w2=numpy.arange(zero,w2_addminrr,one)
        build_range_data_volume_d5=numpy.arange(zero,d5_addminrr,one)
        #extract data from data_volume
        start_date_data_volume_y5=[]
        start_date_data_volume_y25=[]
        start_date_data_volume_y1=[]
        start_date_data_volume_m6=[]
        start_date_data_volume_m1=[]
        start_date_data_volume_w2=[]
        start_date_data_volume_d5=[]
        start_date_data_volume_y5=data_volume[build_range_data_volume_y5]
        start_date_data_volume_y25=data_volume[build_range_data_volume_y25]
        start_date_data_volume_y1=data_volume[build_range_data_volume_y1]
        start_date_data_volume_m6=data_volume[build_range_data_volume_m6]
        start_date_data_volume_m1=data_volume[build_range_data_volume_m1]
        start_date_data_volume_w2=data_volume[build_range_data_volume_w2]
        start_date_data_volume_d5=data_volume[build_range_data_volume_d5]
        # calculate average of daily volume data
        avgv_data_volume_y5=numpy.mean(start_date_data_volume_y5)
        avgv_data_volume_y25=numpy.mean(start_date_data_volume_y25)
        avgv_data_volume_y1=numpy.mean(start_date_data_volume_y1)
        avgv_data_volume_m6=numpy.mean(start_date_data_volume_m6)
        avgv_data_volume_m1=numpy.mean(start_date_data_volume_m1)
        avgv_data_volume_w2=numpy.mean(start_date_data_volume_w2)
        avgv_data_volume_d5=numpy.mean(start_date_data_volume_d5)
        # the idea is that i want to make AVGVolume zero if stock is younger than y5 and y25 so it doesn't account for status overall. 
        if (overwrite_value==one):
            avgv_data_volume_y5=zero # overwrite AVGVolume y5 to 0
        elif (overwrite_value==two):
            avgv_data_volume_y5=zero # overwrite AVGVolume y5 and y2.5 to 0
            avgv_data_volume_y25=zero # overwrite AVGVolume y5 and y2.5 to 0
        
        # want to restrict integer from exceeding maximum
        data_volume_cut_pre=[]
        system_maximum_value_one=system_maximum_value-one
        ii=[]
        counter3=zero
        restrict_integer_data_volume=[avgv_data_volume_d5,avgv_data_volume_w2,avgv_data_volume_m1,avgv_data_volume_m6,avgv_data_volume_y1,avgv_data_volume_y25,avgv_data_volume_y5]
        for ii in restrict_integer_data_volume:
            counter3=counter3+one
            if ii>system_maximum_value_one:
                data_volume_cut_pre=system_maximum_value_one
            else:
                data_volume_cut_pre=ii
            if (counter3 == one):
                data_volume_cut=data_volume_cut_pre
            else:
                data_volume_cut=numpy.append(data_volume_cut,data_volume_cut_pre)
        data_volume_cut_int=data_volume_cut.astype(int)
        data_volume_cut_all=data_volume_cut_int.astype(str)

        # put all avgVolume values into one array and end date price
        avgv_data_volume_all=numpy.append(data_volume_cut_all,end_date_price)
        
        #### setup status overall:
            # mean gets 123 total points and return rate only 40 (keep mean individual out of scope)
            # mean divided by 3  gives mean and return rate same weighting factor
            # if a stock only gets 4 then use if condition and set value to zero
            # add both weighting factor to get status overall
            # haven't tested if it can handle NANs
        # sum up mean and stock trends
        sum_dat200=numpy.sum(numpy.append(numpy.sum(numpy.append(numpy.sum(time_mean_result200),data_mean_trend_result200)),data_close_trend_result200))
        sum_dat50=numpy.sum(numpy.append(numpy.sum(numpy.append(numpy.sum(time_mean_result50),data_mean_trend_result50)),data_close_trend_result50))
        sum_dat20=numpy.sum(numpy.append(numpy.sum(numpy.append(numpy.sum(time_mean_result20),data_mean_trend_result20)),data_close_trend_result20))
            #sum_datind=numpy.sum(numpy.append(numpy.sum(numpy.append(numpy.sum(time_mean_resultind),data_mean_trend_resultind)),data_close_trend_resultind))
        # divided by 3 to be able to weight mean and stock analysis the same as return rates of the stock
        sum_data_mean_stock_pre=numpy.sum(numpy.append(numpy.append(sum_dat200,sum_dat50),sum_dat20))
        if (sum_data_mean_stock_pre<four):
            sum_data_mean_stock=zero
        else:
            sum_data_mean_stock=sum_data_mean_stock_pre/three
            sum_data_mean_stock=sum_data_mean_stock.astype(int)
        # sum up return rates
        sum_data_rr=numpy.sum(data_return_rate_pre)
        # sum up return rates and trends
        sum_data_all_pre=numpy.add(sum_data_rr,sum_data_mean_stock)
        
        #### end of analysis
        # this part is always last in the loop
        #### create dataframe
        # if stock is less than 1 year on the market. I will put all values to zero
        if (length_data<y1_1):
            partially_time_result=[]
            all_time_result_pre=[]
            data_return_rate_all=[]
            data_capital_gain_all=[]
            sum_data_all_pre=[]
            length_data_young=[]
            all_time_result=[]
            data_return_rate_all=[zero,zero,zero,zero]
            data_capital_gain_all=[zero,zero]
            sum_data_all_pre=[zero]
            avgv_data_volume_all=[zero,zero,zero,zero,zero,zero,zero,zero] # avgvolume 7 + today's price 1 = 8 zeros
            length_data_young=length_data
            partially_time_result=numpy.concatenate((array_mean_200,array_mean_50,array_mean_20))
            all_time_result_pre=numpy.concatenate((partially_time_result,array_mean_ind))
            #indices = [14,7,0,21,15,8,1,22,16,9,2,23,17,10,3,24,18,11,4,25,19,12,5,26,20,13,6,27] # this is dataframe 1
            indices = [14,15,16,17,18,19,20,7,8,9,10,11,12,13,0,1,2,3,4,5,6,21,22,23,24,25,26,27] # this is dateframe 2
            all_time_result_pre=numpy.take(all_time_result_pre, indices) # mean and stock evaluation
            all_time_result_pre=numpy.concatenate((all_time_result_pre,data_return_rate_all))# return rate
            all_time_result_pre=numpy.concatenate((all_time_result_pre,data_capital_gain_all))# capital gain
            all_time_result_pre=numpy.concatenate((all_time_result_pre,avgv_data_volume_all))# adding AVGVolume and todays date stock value
            #all_time_result_pre=numpy.concatenate((all_time_result_pre,end_date_price))# adding data_close today's value

            # always first value in dataframe which is status overall
            all_time_result_pre=numpy.append(sum_data_all_pre,all_time_result_pre)
            # last value in dataframe
            all_time_result=numpy.append(all_time_result_pre,length_data_young) # data length
        else:    
            partially_time_result=numpy.concatenate((array_mean_200,array_mean_50,array_mean_20))
            all_time_result_pre=numpy.concatenate((partially_time_result,array_mean_ind))
            #indices = [14,7,0,21,15,8,1,22,16,9,2,23,17,10,3,24,18,11,4,25,19,12,5,26,20,13,6,27] # this is dataframe 1
            indices = [14,15,16,17,18,19,20,7,8,9,10,11,12,13,0,1,2,3,4,5,6,21,22,23,24,25,26,27] # this is dateframe 2
            all_time_result_pre=numpy.take(all_time_result_pre, indices) # mean and stock evaluation
            all_time_result_pre=numpy.concatenate((all_time_result_pre,data_return_rate_all))# return rate
            all_time_result_pre=numpy.concatenate((all_time_result_pre,data_capital_gain_all))# capital gain
            all_time_result_pre=numpy.concatenate((all_time_result_pre,avgv_data_volume_all))# adding AVGVolume and todays date stock value
            #all_time_result_pre=numpy.concatenate((all_time_result_pre,end_date_price))# adding data_close today's value
            
            # first value in dataframe which is status overall
            all_time_result_pre=numpy.append(sum_data_all_pre,all_time_result_pre) 
            # last value in dataframe
            all_time_result=numpy.append(all_time_result_pre,length_data_young) # data length

        total_dataframe[x]=all_time_result# complete dataframe 

        #### split up dataframe to prevent memory run out and reduced speed ~ 100 stocks per dataframe allowed
        counter_dataframe_length=counter_dataframe_length+one
        if counter_dataframe_length==save_dataframe_loop:#change to "ninety" when full run is performed, for testing small numbers of stock "one" is recommended######################3
            # save dataframe to csv
            counter4=counter4+one
            if counter4 == one: 
                td_transpose=total_dataframe.transpose()
                td_transpose.to_csv(joined_path_csv_dataframe, sep=',',encoding='utf-8',header='true')
                counter_dataframe_length=zero
                del total_dataframe
                del td_transpose
                gc.collect()
                total_dataframe=[]
                td_transpose=[]
                total_dataframe = pandas.DataFrame(index = dataframe_structure_index, data=dataframe_structure_0)
            else:
                td_transpose=total_dataframe.transpose()
                td_transpose=td_transpose.iloc[1: , :]
                td_transpose.to_csv(joined_path_csv_dataframe, mode='a', header=False) # it does append to existing csv.file
                counter_dataframe_length=zero
                del total_dataframe
                del td_transpose
                gc.collect()
                total_dataframe=[]
                td_transpose=[]
                total_dataframe = pandas.DataFrame(index = dataframe_structure_index, data=dataframe_structure_0)        


    #### save dataframe to csv
    length_columns_of_dataframe=len(total_dataframe.columns)
    if length_columns_of_dataframe > one: # to exclude column with explanation
        td_transpose=total_dataframe.transpose()
        td_transpose=td_transpose.iloc[one: , :]
        td_transpose.to_csv(joined_path_csv_dataframe, mode='a', header=False)
        counter_dataframe_length=zero
        del total_dataframe
        del td_transpose
        gc.collect()

    # print second stage of script has started
    print('second stage of script has started-> dont worry script is almost done')

    #### sort dataframe overall status all stocks
    # call first dataframe, then second and so on
    full_dataframe=[]
    saved_column=[]
    sort_array=[]
    saved_column_todaystockvalue=[]
    sort_array_todaystockvalue=[]
    sort_result_above_todaystockvalue=[]
    total_length_of_sort_array=[]
    full_dataframe = pandas.read_csv(joined_path_csv_dataframe)
    saved_column = full_dataframe.iloc[one:, one].values # contains all status overall numbers of all stocks, if status overall is saved at different coloumn, then results may be faulty.
    sort_array=saved_column. astype(int) 
    #determining today's stock value
    saved_column_todaystockvalue = full_dataframe.iloc[one:, fourtythree].values # contains the today's stock value of all stocks, if that is saved at different coloumn, then results may be faulty.
    saved_column_todaystockvalue=saved_column_todaystockvalue.astype(float)
    sort_array_todaystockvalue=saved_column_todaystockvalue. astype(int) 
    sort_result_above_todaystockvalue=numpy.where(sort_array_todaystockvalue > sort_stock_below_price_all_stock) # setting up baseline which of the stock today's price is above reference variable. those below will be considered in the report and above won't. 
    sort_array[sort_result_above_todaystockvalue]=-1 # set every stock to -1 when stock price exceeds reference value
    total_length_of_sort_array=len(sort_array)
    #prepare for for loop
    counter2=zero
    sort_result_pre1=[]
    sort_result_pre=[]
    overallstatus_total_dataframe=[]
    overallstatus_total_dataframe_pre=[]
    td_transpose=[]
    sort_result_pre_array=[]
    sort_result_pre_array_add=[]
    interm_data=[]
    yy=[]
    count_minus_one_in_sort_array=[]
    number_of_loops_left=[]
    # sort dataframe overall status all stocks
    #first check if enough stock is available that can be sorted which relies on certain reference settings such as today's stock price
    count_minus_one_in_sort_array=numpy.count_nonzero(sort_array == -1) # count -1 items in array
    number_of_loops_left=total_length_of_sort_array-count_minus_one_in_sort_array # number of stock available for sorting
    if number_of_loops_left < length_sort_data:
        length_sort_data_loop=number_of_loops_left
    else:
        length_sort_data_loop=length_sort_data
        
    for yy in range(length_sort_data_loop):# may need to put up the variable into input section.
        counter2=counter2+one
        sort_result_pre1=numpy.where(sort_array == numpy.amax(sort_array)) 
        # it may sort more than twenty elements of dataframe (if twenty is the default range).
        # The reason is if elements have same max value, all will be appended in the same loop.
        # I am happy with what the code does in here and I will not restrict any further.
        sort_array[sort_result_pre1]=-1 # remove previous max value and keep length of array the same
        if (counter2 == one):
                sort_result_pre=sort_result_pre1
        else:
                sort_result_pre=numpy.append(sort_result_pre,sort_result_pre1)
        length_sort_result_pre=len(sort_result_pre)
        if (length_sort_result_pre >= length_sort_data_loop):
                break    
    sort_result_pre_array=(numpy.array(sort_result_pre)).flatten()
    sort_result_pre_array_add=sort_result_pre_array+one # these are indexes of status overall maxima # have to add one, initial array had no explanation coloumn (it was removed) and when adding to dataframe the explanation coloumn needs to be account for by adding 1 to it. 
    overallstatus_total_dataframe_pre=full_dataframe.iloc[[zero]]# add column with explanation first
    td_transpose=full_dataframe.transpose()
    interm_data=td_transpose[sort_result_pre_array_add]
    td_transpose=interm_data.transpose()
    overallstatus_total_dataframe = pandas.concat([overallstatus_total_dataframe_pre, td_transpose], ignore_index=True, sort=False)
    #overallstatus_total_dataframe=overallstatus_total_dataframe_pre.transpose()

    #### sort dataframe overall status for young stocks
    interm_data_age=[]
    td_transpose_age=[]
    result_age_idx=[]
    sort_array_age=[]
    saved_column_age=[]
    sort_array=[]
    saved_column_stoverall=[]
    saved_column_todaystockvalue=[]
    sort_array_todaystockvalue=[]
    sort_result_above_todaystockvalue=[]
    count_minus_one_in_sort_array=[]
    number_of_loops_left=[]
    total_length_of_sort_array=[]
    saved_column_age = full_dataframe.iloc[one:, fourtyfour].values # contains the ages of all stocks, if age is saved at different coloumn, then results may be faulty.
    sort_array_age=saved_column_age.astype(int)
    #result_age_idx=(numpy.array(numpy.where((Y5 > sort_array_age)&(sort_array_age>zero)))).flatten() 
    result_age_idx=(numpy.array(numpy.where(Y5 > sort_array_age))).flatten() # index of stocks less than five years old (1200 business days)
    result_age_idx=result_age_idx+one # these are indexes of status overall maxima # have to add one, initial array had no explanation coloumn (it was removed) and when adding to dataframe the explanation coloumn needs to be account for by adding 1 to it. 
    #result_age_idx=result_age_idx.flatten()
    #result_age_idx=result_age_idx.tolist()
    td_transpose_age=full_dataframe.transpose()
    interm_data_age=td_transpose_age. iloc[:, result_age_idx]
    td_transpose_age=interm_data_age.transpose()
    saved_column_stoverall = td_transpose_age.iloc[:, one].values # contains all status overall numbers of all stocks, if status overall is saved at different coloumn, then results may be faulty.
    sort_array=saved_column_stoverall. astype(int)   
    #determining today's stock value
    saved_column_todaystockvalue = td_transpose_age.iloc[:, fourtythree].values # contains the today's stock value of all stocks, if that is saved at different coloumn, then results may be faulty.
    saved_column_todaystockvalue=saved_column_todaystockvalue.astype(float)
    sort_array_todaystockvalue=saved_column_todaystockvalue.astype(int) 
    sort_result_above_todaystockvalue=(numpy.array(numpy.where(sort_array_todaystockvalue > sort_stock_below_price_all_stock))).flatten() # setting up baseline which of the stock today's price is above reference variable. those below will be considered in the report and above won't. 
    sort_result_above_todaystockvalue=sort_result_above_todaystockvalue
    sort_array[sort_result_above_todaystockvalue]=-1 
    #first check if enough stock is available that can be sorted which relies on certain reference settings such as today's stock price
    total_length_of_sort_array=len(sort_array)
    count_minus_one_in_sort_array=numpy.count_nonzero(sort_array == -1) # count -1 items in array
    number_of_loops_left=total_length_of_sort_array-count_minus_one_in_sort_array # number of stock available for sorting
    if number_of_loops_left < length_sort_data:
        length_sort_data_loop=number_of_loops_left
    else:
        length_sort_data_loop=length_sort_data    
    test_if_empty = numpy.asarray(sort_array)  # converts it to an array if it's not an array.
    # determine if sort_array is empty 
    young_stock_empty_indicator=zero
    if test_if_empty.size == zero:#it's empty!
        print('array of sorting young stock is empty')
        overallstatus_total_dataframe_total = overallstatus_total_dataframe
        young_stock_empty_indicator=one
    else:
        test_if_empty=[]
        counter2=zero
        saved_column_stoverall=[]
        interm_data_age=[]
        result_age_idx=[]
        sort_array_age=[]
        saved_column_age=[]
        sort_result_pre1=[]
        sort_result_pre=[]
        overallstatus_total_dataframe_age=[]
        overallstatus_total_dataframe_pre=[]
        td_transpose=[]
        sort_result_pre_array=[]
        sort_result_pre_array_add=[]
        interm_data=[]
        yy=[]
        # sort dataframe overall status all stocks
        for yy in range(length_sort_data_loop):# may need to put up the variable into input section.
            counter2=counter2+one
            sort_result_pre1=numpy.where(sort_array == numpy.amax(sort_array))
            sort_array[sort_result_pre1]=-1
            if (counter2 == one):
                    sort_result_pre=sort_result_pre1
            else:
                    sort_result_pre=numpy.append(sort_result_pre,sort_result_pre1)
            length_sort_result_pre=len(sort_result_pre)
            if (length_sort_result_pre >= length_sort_data_loop):
                    break
        sort_result_pre_array=(numpy.array(sort_result_pre)).flatten()
        sort_result_pre_array_add=sort_result_pre_array # these are indexes of status overall maxima # have to add one, initial array had no explanation coloumn (it was removed) and when adding to dataframe the explanation coloumn needs to be account for by adding 1 to it. 
        overallstatus_total_dataframe_pre=full_dataframe.iloc[[zero]]# add column with explanation first
        text_to_be_imported=young_stock,' price below',' ',sort_stock_below_price_all_stock,' same for old stocks'# adding more description to the report
        young_stock=(''.join(str(i) for i in text_to_be_imported))
        overallstatus_total_dataframe_pre.iloc[zero,zero]=young_stock# add young stock into specific space
        interm_data=td_transpose_age.iloc[sort_result_pre_array_add]
        overallstatus_total_dataframe_age = pandas.concat([overallstatus_total_dataframe_pre, interm_data], ignore_index=True, sort=False)
        overallstatus_total_dataframe_total = pandas.concat([overallstatus_total_dataframe, overallstatus_total_dataframe_age], ignore_index=True, sort=False)

    ### add companies indicies in here to the best 20 stocks
    #print(overallstatus_total_dataframe_total)
    get_stock_names=[]
    get_stock_names= overallstatus_total_dataframe_total.iloc[one:, zero]#.values # contains all status overall numbers of all stocks, if status overall is saved at different coloumn, then results may be faulty.
    x=[]
    save_indicies=[]
    counter1=zero
    counter2=zero
    xx=[]
    stock_id_info=[]
    row_young_stock=[]
    save_indicies_pre=[]
    for x in get_stock_names:
        counter1=counter1+one
        test_if_x_equals_young_stock = numpy.asarray(x) # find variable 'young_stock' in array
        if test_if_x_equals_young_stock == young_stock:#it's the same
            #print('found the name young_stock')
            row_young_stock=counter1
            continue 
        else:   
            stock_id=yf.Ticker(x)
            for bb in name_of_indicies:
                    if bb is None:
                        lookuperror=na_variable
                        save_indicies=numpy.append(save_indicies,lookuperror) # it is a 1D array
                    else:
                        try: # to avoid error (Exceptions) in Pandas while still getting data.
                            stock_id_info=stock_id.info[bb]
                            if stock_id_info is None:
                                lookuperror=na_variable
                                save_indicies=numpy.append(save_indicies,lookuperror) # it is a 1D array
                                continue
                        except LookupError:  
                            lookuperror=na_variable
                            save_indicies=numpy.append(save_indicies,lookuperror) # it is a 1D array
                            continue
                        else:
                            save_indicies=numpy.append(save_indicies,stock_id_info) # it is a 1D array

    #         if os.path.exists(joined_path_csv_data_stock_indicies):
    #             read_csv_stock_indicies_dataframe=[]
    #             saved_column_stocknames_stock_indicies=[]
    #             row_idx_stock_name_stock_indicies=[]
    #             dataframe_stock_indicies=[]
    #             dataframe_stock_indicies=[]
    #             read_csv_stock_indicies_dataframe = DataFrame()
    #             read_csv_stock_indicies_dataframe = pandas.read_csv(joined_path_csv_data_stock_indicies) # read data from csv.file
    #             saved_column_stocknames_stock_indicies =numpy.array(DataFrame(data=read_csv_stock_indicies_dataframe.iloc[:, one].values)).flatten() # get stock names from csv.file
    #             row_idx_stock_name_stock_indicies=numpy.array(numpy.where(saved_column_stocknames_stock_indicies == x)).flatten() # find row index of stock name x
    #             if row_idx_stock_name_stock_indicies.size > zero:#it's empty!
    #                 save_indicies_pre =numpy.array(DataFrame(data=read_csv_stock_indicies_dataframe.iloc[row_idx_stock_name_stock_indicies, two:].values)).flatten() # get stock names from csv.file
    #                 save_indicies=numpy.append(save_indicies,save_indicies_pre) # it is a 1D array

    # if os.path.exists(joined_path_csv_data_stock_indicies):                               
    # reconstruct array so it fits into dataframe
    #     if counter2==one: # if only one indicy is used then length of column should be one.
    #         length_column=one
    #     else:
    #         length_column=len(name_of_indicies)
    #     length_row=len(get_stock_names)-one # as per default I delete variable young stock, therefore -1 is applied here
    #     array_zeros=numpy.zeros(length_column) # adding a new row with zeros
    #     save_indicies=numpy.append(array_zeros,save_indicies)
    #     length_row=length_row+one # adding a new row with zeros
    #     if young_stock_empty_indicator==zero: # if there is no young stock available in dataframe
    #         inx_row_add_name_indicies=row_young_stock*length_column # find location in array where to place names of indicies in dataframe
    #         save_indicies= numpy.insert(save_indicies, inx_row_add_name_indicies, name_of_indicies) # adding name of indicies into dataframe
    #     length_row=length_row+one # adding a new row with name of indicies
    #     if length_column>one:  # if only indicy is used ->it goes into else
    #         save_indicies_array=numpy.reshape(save_indicies,(length_row, length_column))# reshape 'save_indices' output of double for-loop which creates 2D array
    #         long_name_column=save_indicies_array[:,zero]#first column is long names of stock
    #         save_indicies_array=save_indicies_array[:,one:]# all the other rest -> get error if 2D array is only 1D-array
    #         name_of_indicies_long_name_column=name_of_indicies[0]#first column is long names of stock of 1D array
    #         name_of_indicies=name_of_indicies[one:]# all the other rest of 1D-array
    #         add_column_at_idx=len(overallstatus_total_dataframe_total.columns) # find length of column of dataframe
    #         length_column=len(name_of_indicies)# first column of array will be put to first column in dataframe and all other columns will be put to end of dataframe
    #         last_column_to_dataframe=add_column_at_idx+length_column
    #         build_range=numpy.arange(add_column_at_idx,last_column_to_dataframe,one)
    #         overallstatus_total_dataframe_total[build_range]=save_indicies_array # adding multiple columns into dataframe at once
    #         overallstatus_total_dataframe_total.columns.values[build_range] = name_of_indicies# change name of new column
    #         overallstatus_total_dataframe_total.insert(loc=one, column=name_of_indicies_long_name_column,value=long_name_column) # adding multiple columns into dataframe at once # change name of new column
    #     else:
    #         long_name_column=save_indicies#first column is long names of stock
    #         name_of_indicies_long_name_column=name_of_indicies[0]#first column is long names of stock of 1D array
    #         overallstatus_total_dataframe_total.insert(loc=one, column=name_of_indicies_long_name_column,value=long_name_column) # adding multiple columns into dataframe at once # change name of new column
    length_column=len(name_of_indicies) # a list will be represented correctly
    length_row=len(get_stock_names)-one # as per default I delete variable young stock, therefore -1 is applied here
    array_zeros=numpy.zeros(length_column) # adding a new row with zeros
    save_indicies=numpy.append(array_zeros,save_indicies)
    length_row=length_row+one # adding a new row with zeros
    if young_stock_empty_indicator==zero: # if there is no young stock available in dataframe
        inx_row_add_name_indicies=row_young_stock*length_column # find location in array where to place names of indicies in dataframe
        save_indicies= numpy.insert(save_indicies, inx_row_add_name_indicies, name_of_indicies) # adding name of indicies into dataframe
    length_row=length_row+one # adding a new row with name of indicies
    if length_column>one:  # if only indicy is used ->it goes into else
        save_indicies_array=numpy.reshape(save_indicies,(length_row, length_column))# reshape 'save_indices' output of double for-loop which creates 2D array
        long_name_column=save_indicies_array[:,zero]#first column is long names of stock
        save_indicies_array=save_indicies_array[:,one:]# all the other rest -> get error if 2D array is only 1D-array
        name_of_indicies_long_name_column=name_of_indicies[zero]#first column is long names of stock of 1D array
        name_of_indicies=name_of_indicies[one:]# all the other rest of 1D-array
        add_column_at_idx=len(overallstatus_total_dataframe_total.columns) # find length of column of dataframe
        length_column=len(name_of_indicies)# first column of array will be put to first column in dataframe and all other columns will be put to end of dataframe
        last_column_to_dataframe=add_column_at_idx+length_column
        build_range=numpy.arange(add_column_at_idx,last_column_to_dataframe,one)
        overallstatus_total_dataframe_total[build_range]=save_indicies_array # adding multiple columns into dataframe at once
        overallstatus_total_dataframe_total.columns.values[build_range] = name_of_indicies# change name of new column
        overallstatus_total_dataframe_total.insert(loc=one, column=name_of_indicies_long_name_column,value=long_name_column) # adding multiple columns into dataframe at once # change name of new column
    else:
        long_name_column=save_indicies#first column is long names of stock
        name_of_indicies_long_name_column=name_of_indicies[0]#first column is long names of stock of 1D array
        overallstatus_total_dataframe_total.insert(loc=one, column=name_of_indicies_long_name_column,value=long_name_column) # adding multiple columns into dataframe at once # change name of new column

    #save sort dataframe to csv and add market stock name
    overallstatus_total_dataframe_total.to_csv(joined_path_csv_dataframe_market_name, sep=',',encoding='utf-8',header='true')
    overallstatus_total_dataframe=[]
    overallstatus_total_dataframe_age=[]
    overallstatus_total_dataframe_pre=[]
    overallstatus_total_dataframe_total=[]
    interm_data=[]
    full_dataframe=[]
    td_transpose_age=[]
    gc.collect()


#find second largest and third largest or convert to very low number below zero or zero...

#### save and send email with report
# save dataframe to csv
    #total_dataframe.to_csv(filename_csv, sep=',',encoding='utf-8',header='true')
# save dataframe to txt
    #total_dataframe.to_csv(filename_txt, sep='\t',encoding='utf-8')#,header='true')
# send dataframe as an email
        #html_obj=total_dataframe.to_html()
    #html_obj=total_dataframe.to_csv(sep='\t',encoding='utf-8',header='true')
    #body='test'
        #body='''<h3>Please find data attached and below.</h3>
        #                   {}'''.format(total_dataframe.to_html())
    #msg = MIMEMultipart()
    #msg.attach(MIMEText(body))
    #part = MIMEBase('text', "html")
    #part.set_payload(html_obj)
    #part.add_header('Content-Disposition', 'attachment; filename="filename_csv"')
    #msg.attach(part)
    #msg['From'] = "felixbockel@hotmail.com"
    #msg['To'] = "felixbockel@hotmail.com"
    #msg['Subject'] = "TEST"
    #s = smtplib.SMTP("smtp.live.com",587)
    #s.ehlo() # Hostname to send for this command defaults to the fully qualified domain name of the local host.
    #s.starttls() #Puts connection to SMTP server in TLS mode
    #s.ehlo()
    #s.login('felixbockel@hotmail.com', 'ryna583041fe')
    #s.sendmail("felixbockel@hotmail.com", "felixbockel@hotmail.com", msg.as_string())
    #s.quit()

#### TO-DO-LIST:

##long-term stock analysis (search for uptrend, return rate)
# add 1d in table (won't implement it until i find a better use for it- it only shows mean up, down and touching of stock price)
# setup fixed start time such as max 7years of data from today's date...
# save data_high,data_low,...as separate csv.files
# at position "is rawdata there?"" don't have any code for stock data when it is new and it doesn't exist in csv.file -> it needs to be added to csv.file
# save dataframe or each stock market (US,Australia) to specific file named: 'stock_DONOTDELETE'->
    #can be used for various python code files for analysis -> correlation checks etc.
# get aussie, usa, europe charts, forex,crypto currency, FTP (fund transfer pricing) ready
# midterm, longterm when downswing and when upswing
# save report as pdf -> can be done using R
##watch list
# min expect
# add swing high and low
# analyse candle stick characteristics
## daily trends
#use minute stock plots to get high resolution
#
# one big foor-loop each loop contains one market (us or aussie or europe or forex or crypto ...)
# all correlation analysis can be done on a separate python file :find correlations between stocks in same sector and market, 
    #look at return rate if we buy only top 10 stocks and sell stocks when they are not top 10 anymore to assess how good top 10 is.
    # find correlation when Q1,Q2,Q3,Q4 appear on stock with top10 and maybe there is a general correlation outside of top10
# save report as pdf -> can be done using R

#Plot the close price of the AAPL 

#data.Open.plot()
#data.High.plot()
#data.Low.plot()


## get stock using yahoo finance
# Get the data of the stock A2 
#data = yf.download('AAPL','2021-01-08','2021-07-07') 
 
# Plot the close price of the A2 
#data.Close.plot() 
#plt.show()

# get stock in minute level data using alpha vantage
# initialize TS object with API key and output format 
#ts = TimeSeries(key='Your-API-Key', output_format='pandas') 
 
# Get the data 
#data, meta_data = ts.get_intraday(symbol='MSFT',interval='1min', outputsize='compact') 
 
# Print the data 
#print(data.head())

#Note for minute level data using alpha vantage
#1) For the time interval between two consecutive data points in the time series, the following values are supported: 1min, 5min, 15min, 30min, 60min
#2) By default, outputsize=compact. Strings compact and full are accepted with the following specifications:
#compact returns only the latest 100 data points in the intraday time series; full returns the full-length intraday time series.
#The "compact" option is recommended if you would like to reduce the data size of each API call.

# run R script on python
#subprocess.call ("//ROAPRFAP01/User$/felix.bockelmann/Documents/R/R-3.6.1/bin/x64/Rscript //ROAPRFAP01/User$/felix.bockelmann/Desktop/aqua_stuff/aqua_isocentre_runout_test/gantry_coll_isocentre_test/aqua_paper_kv_mv_test/paper_figure1.r", shell=True)

#test mailing it to email
#apprise -vv -t 'stock report' -b 'time_mean_frame' \
#   'mailto://felixbockel:ryna583041fe@hotmail.com' \


# timer ends
print("--- %s seconds ---" % (time.time() - start_time))
print("python code is finished")
